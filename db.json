{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/column.js","path":"js/column.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/chess.jpeg","path":"img/chess.jpeg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"819ed02f3d41355b55b1158164e291ad5f476513","modified":1660222188120},{"_id":"source/_posts/2019和2020.md","hash":"1e0949db26ea926081c883278452addb3fbad3db","modified":1660235109822},{"_id":"source/_posts/202207W3.md","hash":"45003b8e178989041077d33f7fb0cce462324141","modified":1660234793643},{"_id":"source/_posts/2022已过三分之一.md","hash":"ad3a2a4d29dab64947e673223eea7a9448978041","modified":1660370098272},{"_id":"source/_posts/2022.md","hash":"283225597abf8530f766b1ceac7d7735c25f54e2","modified":1660232015579},{"_id":"source/_posts/Class-based views.md","hash":"79439f6c97a605e1f3731b03f035d7869eecbd2e","modified":1660222188143},{"_id":"source/_posts/202208W1.md","hash":"7f1d9fa89f4fdd733ab1a6d80aee1888e5000d6d","modified":1660234797561},{"_id":"source/_posts/DRF JWT 配置.md","hash":"2043aa0f3dbf6001f4e9af3cfdaaff0f0f387324","modified":1660222188124},{"_id":"source/_posts/Borg状态共享.md","hash":"30f23d27dc3b3f66502f0cd71032a15119ce1574","modified":1660222188129},{"_id":"source/_posts/Django ORM 机制.md","hash":"f05d7a863ebb646982ada4b691c1205b6a8aa1f1","modified":1660222188131},{"_id":"source/_posts/Django 使用 logging 模块的一次记录.md","hash":"1e0f597885606a9b898dae89eabb072dd7f47ea0","modified":1660222188126},{"_id":"source/_posts/Django2.0 重写用户模型.md","hash":"7a0c9e71f0a58fc874cef1701d4f7a717af83146","modified":1660222188130},{"_id":"source/_posts/Docker 指令.md","hash":"f835185359fc1e8977b5d7ced3b2d1ec9939a6c1","modified":1660222188128},{"_id":"source/_posts/Docker 指令2.md","hash":"a76c5946bf53beb919119355cd966c5aa7de5715","modified":1660222188128},{"_id":"source/_posts/Elasticsearch基本查询.md","hash":"636802d45665f4ef7c3fdf94e21e6f9cc23338ce","modified":1660222188141},{"_id":"source/_posts/Elasticsearch组合查询.md","hash":"fc076d56474e9b33ceaa840e1c6de575da91983e","modified":1660222188129},{"_id":"source/_posts/Elasticsearch配置.md","hash":"244326c97c1b5be0cc29d21708bdb9ff994e5261","modified":1660222188142},{"_id":"source/_posts/Elasticsearch操作.md","hash":"a8671147d35ca19eb31be7bfc7eeca665e18ca7e","modified":1660222188128},{"_id":"source/_posts/Git 更新fork代码的内容.md","hash":"3ca73ef0e0e0621b6aaea6055337ecac25f10857","modified":1660222188142},{"_id":"source/_posts/Github搜索开源项目方式.md","hash":"dfd89fc6fc0af293d0b72aa03214d30251bfb02a","modified":1660222188142},{"_id":"source/_posts/Git设置代理.md","hash":"34ec69d70fddd2579f091d7a3ec4aab2a55e1729","modified":1660222188128},{"_id":"source/_posts/Linux文件属性.md","hash":"f969844e918655c083623f7091aea98d338ab387","modified":1660222188141},{"_id":"source/_posts/Redis 数据保留.md","hash":"c906fb083f75c57abe616842e13055b3482b8f85","modified":1660222188129},{"_id":"source/_posts/Linux 文件隐藏属性.md","hash":"9883fff2ea329e05d7bfdd7ac21fa1a9099ddbd6","modified":1660222188124},{"_id":"source/_posts/Python 线程池 ThreadPoolExecutor.md","hash":"62d443b62ffc86be5a46318233029fac73eb0e2d","modified":1660222188124},{"_id":"source/_posts/Ubuntu系统安装redis.md","hash":"076d38e8907c3e45eb82bbd3d1fb322aa8adb509","modified":1660222188122},{"_id":"source/_posts/Windows10 docker desktop k8s.md","hash":"567ba81465d35f39e1a1d01e3cfeca917a40362a","modified":1660222188121},{"_id":"source/_posts/apscheduler.md","hash":"aa1d7874a60077e5e6e2c99130e95634b2752cad","modified":1660222188125},{"_id":"source/_posts/django Signals.md","hash":"9f46bc78d8c5acbdd620d284f184593640d8c50e","modified":1660222188143},{"_id":"source/_posts/django 图片储存七牛云.md","hash":"1a9cfcff9ef066a3afd5f2f9abcc4c044afce881","modified":1660222188123},{"_id":"source/_posts/django-allauth 阿里云发送邮件出现nginx 504解决方法.md","hash":"492c80883b8f5a0ffa8515c77b491b5c10aae3e4","modified":1660222188131},{"_id":"source/_posts/django3 choices 新特性.md","hash":"408d91441c0f48df5575d3bae846c71363020aa8","modified":1660222188141},{"_id":"source/_posts/do things matters.md","hash":"e9e6da01a2bdbcb96fbe13fa77d24332987a4923","modified":1660222188127},{"_id":"source/_posts/docker pull更换源.md","hash":"47dfc106c353a71bd355fb7c713c62322744adc9","modified":1660222188132},{"_id":"source/_posts/drf 一次错误排查.md","hash":"e1a5aa2cae9c00f873ac42ab84751480c70c5507","modified":1660222188132},{"_id":"source/_posts/first.md","hash":"288e1d9682f12ea6cbb38c1f3705b93348dbac27","modified":1660222188125},{"_id":"source/_posts/pipenv 使用.md","hash":"9c45ad02a40a9a98378b5baf51a926b2a4142f0e","modified":1660222188133},{"_id":"source/_posts/plan.md","hash":"b45df7d494b8f4a2f17ac4c42b438a3f583befed","modified":1660222188134},{"_id":"source/_posts/pathlib模块用法.md","hash":"0c3fec96960bfc4d39493fdf0af6e05e4a6890f9","modified":1660222188130},{"_id":"source/_posts/supervisor + pipenv + uwsgi.md","hash":"f9857b0b70732e975b307714665161c2210663ff","modified":1660222188126},{"_id":"source/_posts/ubuntu python3.7 安装uwsgi 常见错误.md","hash":"a8b5a3144bda379ae975673015164d71fcd2e87a","modified":1660222188131},{"_id":"source/_posts/hello-world.md","hash":"05d0bac42609fac5114d995023dfd83cabbd0762","modified":1660222188123},{"_id":"source/_posts/ubuntu 部署 django2.0 + uwsgi + nginx.md","hash":"4029612cd79e4baecc7b2f4a11c57f63d48a7bc9","modified":1660222188129},{"_id":"source/_posts/win10 osg.js 使用.md","hash":"a8377c4f4f0f2e37da6813dc5ad0bf25bd14bae3","modified":1660222188131},{"_id":"source/_posts/windows 安装 helm.md","hash":"bddbb76ec9576767226856045fd0c5b0f7a9c4b2","modified":1660222188123},{"_id":"source/_posts/wsl2 安装 Centos8.md","hash":"d0320106a66f42b8d7b291908b0805465bfe20d9","modified":1660222188127},{"_id":"source/_posts/《大秦帝国》终于到了.md","hash":"67ab7e9c410e4e9c49f3ba6c2c9db69c92b058a0","modified":1660222188127},{"_id":"source/_posts/windows终端命令行下使用网络代理.md","hash":"902f2225a4ee6bdad39b776bce2e04c39164dcb5","modified":1660222188141},{"_id":"source/_posts/仿佛重生.md","hash":"8bd0f89c6f2e715fadae6fd5fdbf38ebb5e5883d","modified":1660222188125},{"_id":"source/_posts/写了个脚本把以前的博客从sqlite转成md.md","hash":"7555a5805147147f5768c7a939d157cda17027a8","modified":1660222188132},{"_id":"source/_posts/删除排序数组中的重复项.md","hash":"fb6b5b41824c4c2b8b47665b5e5358c62dbfec03","modified":1660222188131},{"_id":"source/_posts/围棋第一次胜局.md","hash":"4283d99193007c3839cb93e7a98d9fe45096746b","modified":1660222188142},{"_id":"source/_posts/数据库定时备份任务.md","hash":"71bc03b46a5c575676c3714622802760051ac8a9","modified":1660222188130},{"_id":"source/_posts/来到深圳.md","hash":"a441184e8540350daa28d8e8c5794d85050eca5b","modified":1660222188127},{"_id":"source/_posts/树莓派4b ubuntu 20 设置阿里源.md","hash":"eda9262308a4bf37650b5061f94a3fe8f0e2fe02","modified":1660222188124},{"_id":"source/_posts/树莓派ubuntu 20 安装k3s.md","hash":"9fc1309502bb24ef51e951246a26af312f44e92e","modified":1660222188143},{"_id":"source/_posts/树莓派frp内网穿透.md","hash":"480f8c172307f078b70f9e2add374bfdc09aabb2","modified":1660222188122},{"_id":"source/_posts/树莓派ubuntu 20 网络设置.md","hash":"a123f38cba9ab209497aa5e57bb2fa5abe3effb4","modified":1660222188123},{"_id":"source/_posts/树莓派固定ip设置.md","hash":"1ca92ad8458d9a778be8bdd5eefae895be9ce155","modified":1660222188132},{"_id":"source/_posts/镜像发布.md","hash":"a522e7ae29ec8f76ff0543c16b4069bc04ad140e","modified":1660222188128},{"_id":"source/404/index.md","hash":"53ddea53f95a244dc40b9c07581ef7932853cc4a","modified":1660222188119},{"_id":"source/_data/friends.json","hash":"aadd741725ffb4eaee9c266e3856e4f01a38d875","modified":1660222188120},{"_id":"source/about/index.md","hash":"80f08fa5c811fc034eeedff4a7b30dca910c85be","modified":1662384919510},{"_id":"source/categories/index.md","hash":"83c73b155f85d80ec924d1702c398d7dca71bf82","modified":1660222188144},{"_id":"source/contact/index.md","hash":"f4984d241e6edc9da123a4d56b69a94abfe7dab4","modified":1660222188145},{"_id":"source/tags/CNAME","hash":"819ed02f3d41355b55b1158164e291ad5f476513","modified":1660222188145},{"_id":"source/tags/index.md","hash":"6d0038bf77b8130b36fc80ec7202f76e1955e471","modified":1660222188146},{"_id":"source/friends/index.md","hash":"fe37024d5ba7a229e0833c728fccccc0882cd029","modified":1660222188145},{"_id":"themes/icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1660221995677},{"_id":"themes/icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1660221995678},{"_id":"themes/icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1660221995678},{"_id":"themes/icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1660221995678},{"_id":"themes/icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1660221995678},{"_id":"themes/icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1660221995672},{"_id":"themes/icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1660221995673},{"_id":"themes/icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1660221995673},{"_id":"themes/icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1660221995673},{"_id":"themes/icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1660221995674},{"_id":"themes/icarus/.gitignore","hash":"36084c0851a22bfd393933abb8e262562ffc6802","modified":1660221995671},{"_id":"themes/icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":1660221995672},{"_id":"themes/icarus/package.json","hash":"f26f7e4dd9b194a06c2c77df2c31f3d66662e1af","modified":1660221995678},{"_id":"themes/icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":1660221995671},{"_id":"themes/icarus/.eslintrc.json","hash":"43c7740158c8690242720b4ff7fa11426fc20c79","modified":1660221995670},{"_id":"themes/icarus/README.md","hash":"32f9f4fc8cd7ec60b30544bd2e558b593519ae5d","modified":1660221995672},{"_id":"themes/icarus/.github/stale.yml","hash":"88c73f6216c5666d2f60b1e8fe690a3f6e561e42","modified":1660221995671},{"_id":"themes/icarus/.eslintignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1660221995670},{"_id":"themes/icarus/.github/dependabot.yml","hash":"d532d0db30e42211f35823b9885f3ed1b2d51777","modified":1660221995671},{"_id":"themes/icarus/include/dependency.js","hash":"0ca35dec92ccf383f45db905db1a5a0e92d7209e","modified":1660221995672},{"_id":"themes/icarus/include/register.js","hash":"ec6596b63bfb4349ba61792d905abe8e06fea625","modified":1660221995672},{"_id":"themes/icarus/.npmignore","hash":"42242c8da7a020a3295e7dd3d18bf022cb08b661","modified":1660221995671},{"_id":"themes/icarus/scripts/index.js","hash":"0c666db6fcb4ffc4d300f4e108c00ee42b1cbbe6","modified":1660230173258},{"_id":"themes/icarus/scripts/_friends.yml","hash":"d9ff3c9be41c6cdc505168d2a373f60a2fa9d9a8","modified":1660225023419},{"_id":"themes/icarus/languages/fr.yml","hash":"06d5c819d6108a42b28cff7b52e5410d0bed55d1","modified":1660221995675},{"_id":"themes/icarus/languages/de.yml","hash":"78421f09961ca0b24756a0688fb2cb2e2696e25f","modified":1660221995675},{"_id":"themes/icarus/languages/es.yml","hash":"38579b8fad4b6997362acc770615bcd85ff20f68","modified":1660221995675},{"_id":"themes/icarus/languages/en.yml","hash":"3d674204d9f723c829226da745afddd180c1131d","modified":1660221995675},{"_id":"themes/icarus/languages/ko.yml","hash":"e3374265377809c1518114cf352b595840c0b416","modified":1660221995676},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"ee8f73350e4c6e2f63b7fc72b34472a6b1e21244","modified":1660221995676},{"_id":"themes/icarus/languages/pl.yml","hash":"2e7debb44cd91096f30efc87bf8d6b1d0d0214c9","modified":1660221995676},{"_id":"themes/icarus/languages/tk.yml","hash":"ca583168bd2025124a1cd0e977da475d7a7496fd","modified":1660221995676},{"_id":"themes/icarus/languages/ja.yml","hash":"801d9930fef48d6a3f80470d5bed4f3eb78147e6","modified":1660221995676},{"_id":"themes/icarus/languages/ru.yml","hash":"9d91358c2acbe7a0f2a25daf7f65b999ff32d068","modified":1660221995676},{"_id":"themes/icarus/include/config.js","hash":"1ff0f174e9670074ad2bee890d5b6da486800c9a","modified":1660221995672},{"_id":"themes/icarus/languages/tr.yml","hash":"dd0a7bfe14848d6e1aa229198fe1db03e08e305e","modified":1660221995676},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"02475ba14afc70dfeaf5678467cee307835e4efa","modified":1660221995676},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"a6826e0c8cdb9ad286324b682b466a9e2ad78e6f","modified":1660221995676},{"_id":"themes/icarus/languages/vn.yml","hash":"5f2fffa642110c81d8f529949711c9d19ad6bbbe","modified":1660221995676},{"_id":"themes/icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1660221995676},{"_id":"themes/icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1660221995677},{"_id":"themes/icarus/layout/layout.jsx","hash":"ac7c4e3465a116c7f05f8c2e09ee6d6b9467abf1","modified":1660221995678},{"_id":"themes/icarus/layout/archive.jsx","hash":"05677e93d4a43f417dbbf0d63ca37a99e6349e3b","modified":1660221995676},{"_id":"themes/icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1660221995678},{"_id":"themes/icarus/languages/id.yml","hash":"5e48b1d62378cadeb64b88349477726a5c1bae47","modified":1660221995675},{"_id":"themes/icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1660221995678},{"_id":"themes/icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1660221995678},{"_id":"themes/icarus/.github/PULL_REQUEST_TEMPLATE/pull_request_template.md","hash":"e106fa240c24c8bfbdd623549651600c6d786c9c","modified":1660221995671},{"_id":"themes/icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1660221995678},{"_id":"themes/icarus/.github/workflows/lint.yml","hash":"3e55bcb2156dd31ff7bf4bed12f9fb69fd1b21cd","modified":1660221995671},{"_id":"themes/icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1660221995678},{"_id":"themes/icarus/.github/workflows/test.yml","hash":"45c59d56b198faeb9f38b88170810b98d54ebed1","modified":1660221995671},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/Bug反馈.md","hash":"d801be6937df21e63113be8840b2e23c465db87b","modified":1660221995670},{"_id":"themes/icarus/.github/workflows/npm-publish.yml","hash":"4eabc0c60cb7102fdd5e4b0fbd8c0ac4c17cc8d0","modified":1660221995671},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/bug_report.md","hash":"5d3abdc1a2a79ef9822865184eced6e31066d8f6","modified":1660221995670},{"_id":"themes/icarus/include/migration/head.js","hash":"75bb762d715aa3b27037512051641a06fc31fb5d","modified":1660221995672},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/feature_request.md","hash":"05313e241a3d43fdadb0f74390b562c07c25d4d0","modified":1660221995671},{"_id":"themes/icarus/include/migration/v4_v5.js","hash":"6342310892d113763b5544789b45d44c0ccf2854","modified":1660221995672},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/config.yml","hash":"b49270a202d839c298e584b5d017f56140c7e7a0","modified":1660221995671},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/功能建议.md","hash":"c6f60f37e6cd0bc21a81b3b07f84e04e9e80fb57","modified":1660221995671},{"_id":"themes/icarus/include/schema/config.json","hash":"b949c52d02d5ee520ae4666a016ce91faf6fb350","modified":1660221995673},{"_id":"themes/icarus/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":1660221995672},{"_id":"themes/icarus/.github/workflows/github-release.yml","hash":"48b6bd2cc567687a7b1648c55c8f9de9d44fa9e1","modified":1660221995671},{"_id":"themes/icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1660221995674},{"_id":"themes/icarus/include/style/base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":1660221995674},{"_id":"themes/icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":1660221995672},{"_id":"themes/icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1660221995674},{"_id":"themes/icarus/include/style/codeblock.styl","hash":"ec54dc24eb4d9802d8fefc44c210558bc1641109","modified":1660221995674},{"_id":"themes/icarus/include/style/navbar.styl","hash":"34f09b144cb46a25ec2cc7260a6c207dd34ff1fe","modified":1660221995674},{"_id":"themes/icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":1660221995674},{"_id":"themes/icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":1660221995674},{"_id":"themes/icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1660221995674},{"_id":"themes/icarus/include/style/article.styl","hash":"105c983871b6c9148d97a0f756886e56411572bd","modified":1660221995674},{"_id":"themes/icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":1660221995674},{"_id":"themes/icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1660221995675},{"_id":"themes/icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1660221995675},{"_id":"themes/icarus/include/style/widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":1660221995675},{"_id":"themes/icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1660221995675},{"_id":"themes/icarus/include/style/plugin.styl","hash":"084843d5a522029e0f84a4fe791fbcb2cabd4c36","modified":1660221995675},{"_id":"themes/icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1660221995679},{"_id":"themes/icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":1660221995679},{"_id":"themes/icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1660221995679},{"_id":"themes/icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1660221995675},{"_id":"themes/icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1660221995679},{"_id":"themes/icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1660221995679},{"_id":"themes/icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":1660221995679},{"_id":"themes/icarus/include/util/friends.js","hash":"d2f2ae4ff369055c2e5ec91d9495710bf62959ce","modified":1660224035303},{"_id":"themes/icarus/source/img/avatar.jpg","hash":"a9f5fd4324a38f366f0417374b4fe98693743bc9","modified":1660226262227},{"_id":"themes/icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1660221995679},{"_id":"themes/icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1660221995680},{"_id":"themes/icarus/source/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1660221995680},{"_id":"themes/icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1660221995680},{"_id":"themes/icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1660221995680},{"_id":"themes/icarus/layout/common/article.jsx","hash":"e2765287c6bc6eb97975a1bb4e325b046e95b392","modified":1660221995677},{"_id":"themes/icarus/source/js/main.js","hash":"08a2641765eeaf712157ad134dd675e3f7708ae2","modified":1660221995680},{"_id":"themes/icarus/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":1660221995677},{"_id":"themes/icarus/layout/common/head.jsx","hash":"2ec1f511f32e3a9c86d49f1338f57ae5ece18898","modified":1660221995677},{"_id":"themes/icarus/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":1660221995677},{"_id":"themes/icarus/layout/common/navbar.jsx","hash":"d96e501e52861056474659f96ee0206588d8c93a","modified":1660221995677},{"_id":"themes/icarus/source/js/.eslintrc.json","hash":"6bf0641cb69dffac97f69baea192d7fa3ab612cb","modified":1660221995680},{"_id":"themes/icarus/layout/common/footer.jsx","hash":"baa8e40e036a3ec0114d96893b708435104b4ba9","modified":1660221995677},{"_id":"themes/icarus/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":1660221995677},{"_id":"themes/icarus/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":1660221995677},{"_id":"themes/icarus/layout/common/widgets.jsx","hash":"251263b97de12f2b8d1fce2514e83430f2515b94","modified":1660221995677},{"_id":"themes/icarus/layout/common/scripts.jsx","hash":"0fe1fddab431fb9f63906d8c480d5cd6b33abc32","modified":1660221995677},{"_id":"themes/icarus/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":1660221995677},{"_id":"themes/icarus/layout/plugin/back_to_top.jsx","hash":"7fc0c5aaabd7d0eaff04cb68ec139442dc3414e8","modified":1660221995678},{"_id":"themes/icarus/include/schema/common/article.json","hash":"e2502c39045c6a26ccd8e880858f93e78c7bda35","modified":1660221995672},{"_id":"themes/icarus/include/schema/common/comment.json","hash":"f49270b619f5d2c3decde6b0b5a0c3bbab4b54a5","modified":1660221995672},{"_id":"themes/icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1660221995678},{"_id":"themes/icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":1660221995673},{"_id":"themes/icarus/include/schema/common/footer.json","hash":"09d706cbb94d6da9a0d15c719ce7139325cae1c7","modified":1660221995673},{"_id":"themes/icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":1660221995673},{"_id":"themes/icarus/include/schema/common/plugins.json","hash":"6036a805749816416850d944f7d64aaae62e5e75","modified":1660221995673},{"_id":"themes/icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1660221995673},{"_id":"themes/icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1660221995673},{"_id":"themes/icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1660221995673},{"_id":"themes/icarus/include/schema/common/widgets.json","hash":"cadd9dc942740ecd5037d3943e72f8b6a8399bbe","modified":1660221995673},{"_id":"themes/icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1660221995680},{"_id":"themes/icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1660221995673},{"_id":"themes/icarus/layout/widget/profile.jsx","hash":"0d3a7fd922c12cc45d2c8d26a8f4d3a9a6ed0ae0","modified":1660226914781},{"_id":"themes/icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1660221995673},{"_id":"themes/icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":1660232701957},{"_id":"themes/icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1660221995673},{"_id":"themes/icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1660221995674},{"_id":"public/js/algolia.js","hash":"a8df0c0abeeb4ee1d2d720161f3aea7339380704","modified":1660582699249},{"_id":"public/js/google_cse.js","hash":"1a9881669dfdeb2b3214074eee0d3e01e52db2c4","modified":1660582699249},{"_id":"public/js/insight.js","hash":"86bbdb7305d9bf19ad62d2ca2cf169fc8d9f9d31","modified":1660582699249},{"_id":"public/js/toc.js","hash":"da6fb757a1b083b8ed138bf29aad3a7bf8ec4f11","modified":1660582699249},{"_id":"public/content.json","hash":"cbae28a7083b50789d70098306f2d8985b900b03","modified":1660582699249},{"_id":"public/manifest.json","hash":"9c6c55561aabce012690965ee44bb98ccce176aa","modified":1660582699249},{"_id":"public/404/index.html","hash":"44c2fc0a0598b3f591a1897f89529010f4174170","modified":1660582699249},{"_id":"public/about/index.html","hash":"45b430561c6de13414d8cdefb8cb0eb7e9a2d59f","modified":1660582699249},{"_id":"public/2022/08/08/202208W1/index.html","hash":"fed48c6fc0e1c2dbfedca516b2bac3bf118c4d5e","modified":1660443928685},{"_id":"public/2022/07/24/202207W3/index.html","hash":"7552c64f5cb791490805f507e1eefb39d5ecabc6","modified":1660443928685},{"_id":"public/2022/05/08/2022已过三分之一/index.html","hash":"f0e906766621cabffe498634e3ea1d82148a95d1","modified":1660582699249},{"_id":"public/2022/01/01/2022/index.html","hash":"517fb35cc44bf087aa75392b31f641823782877d","modified":1660582699249},{"_id":"public/2021/10/05/do things matters/index.html","hash":"2c9135eb911f4ebfebca314e073b57a1dc101ff7","modified":1660582699249},{"_id":"public/2021/07/08/围棋第一次胜局/index.html","hash":"671a8a289e2f16fcfaf21336276780aaf4334be1","modified":1660582699249},{"_id":"public/2021/07/08/写了个脚本把以前的博客从sqlite转成md/index.html","hash":"1be86151d59bf5f39fa1cd0778c52b2561c50e4e","modified":1660582699249},{"_id":"public/2021/07/07/hello-world/index.html","hash":"20df30a6821c3dc82e428c634680984bbb42224b","modified":1660582699249},{"_id":"public/2021/07/07/first/index.html","hash":"4173537950e729a493024cb5c9e8d897e82c6d64","modified":1660582699249},{"_id":"public/2021/07/04/wsl2 安装 Centos8/index.html","hash":"6c1089e4fa9348e8d8be3344713add6aad7fc90f","modified":1660582699249},{"_id":"public/2021/07/01/windows 安装 helm/index.html","hash":"ae4a75b40e1912b0f9113aca6e3425dbd18bd74d","modified":1660582699249},{"_id":"public/2021/02/11/树莓派ubuntu 20 安装k3s/index.html","hash":"8d56391aa5c85661e6313224a492cecfd75f6beb","modified":1660582699249},{"_id":"public/2020/11/14/Windows10 docker desktop k8s/index.html","hash":"e7c21cdbf5d911098f24b92055fa84f4667de485","modified":1660582699249},{"_id":"public/2020/09/26/Borg状态共享/index.html","hash":"6dc6fdf9c07614c25cd130c6f302d1e1a38e030a","modified":1660582699249},{"_id":"public/2020/08/30/docker pull更换源/index.html","hash":"bba4a6a073bbe0479b3e4a85e1c93d5d12d8ccfc","modified":1660582699249},{"_id":"public/2020/05/31/树莓派frp内网穿透/index.html","hash":"0c3bc746006d9c1299087777e56e026f50c314a5","modified":1660582699249},{"_id":"public/2020/09/05/树莓派ubuntu 20 网络设置/index.html","hash":"75153e21582e2d225950b80db9a3d49fe934d23a","modified":1660582699249},{"_id":"public/2020/05/30/树莓派固定ip设置/index.html","hash":"97a3c5e5dfaf52fd311c22aa819356a3198c4aee","modified":1660582699249},{"_id":"public/2020/09/05/树莓派4b ubuntu 20 设置阿里源/index.html","hash":"fbd26502cca2f7c426679bf9a7592b2696e051a4","modified":1660582699249},{"_id":"public/2020/05/07/pathlib模块用法/index.html","hash":"f949e32867dad75ab3192b889f5483dc12f9fcee","modified":1660582699249},{"_id":"public/2020/05/02/Github搜索开源项目方式/index.html","hash":"80883039f9c5f1d798ba597c37a577917251fad6","modified":1660582699249},{"_id":"public/2020/05/05/windows终端命令行下使用网络代理/index.html","hash":"27029cda90179859226fcbf7ff0373284a3a54be","modified":1660582699249},{"_id":"public/2020/05/09/Git 更新fork代码的内容/index.html","hash":"ed589b734ae6cf041f3ae9fba4eddd5f485cf24c","modified":1660582699249},{"_id":"public/2020/04/27/plan/index.html","hash":"f79c1be1fec03218f933cf5d009a3ccfc444cd6a","modified":1660582699249},{"_id":"public/2020/04/02/《大秦帝国》终于到了/index.html","hash":"961c0a95ab8d14f720b23bb4022a7b14f98f2dd7","modified":1660582699249},{"_id":"public/2020/03/31/Git设置代理/index.html","hash":"4d76b969a13fb077e7e6392cc3424ccbbddaafd7","modified":1660582699249},{"_id":"public/2020/03/28/apscheduler/index.html","hash":"dc0b4aa93b862d6d902e92f0789cdc32c6d254ce","modified":1660582699249},{"_id":"public/2020/03/28/数据库定时备份任务/index.html","hash":"7173d7f79b6afe37f39437f4121db4ba78526f75","modified":1660582699249},{"_id":"public/2020/03/27/仿佛重生/index.html","hash":"1f7ed8336302d954730252dc2d7d91c9e9bcfcad","modified":1660582699249},{"_id":"public/2020/02/19/Django ORM 机制/index.html","hash":"300ac762d923643922685ebe3c53923d5d178553","modified":1660582699249},{"_id":"public/2020/02/21/Linux 文件隐藏属性/index.html","hash":"706015b3604960c217902e6f88750ffaf6795ca0","modified":1660582699249},{"_id":"public/2020/02/12/drf 一次错误排查/index.html","hash":"7cb75ad6344d149448837513527e9dacd85bcf47","modified":1660582699249},{"_id":"public/2019/12/28/2019和2020/index.html","hash":"1558ad9fdd5aafed8d18a4b887b6c8a06946a987","modified":1660582699249},{"_id":"public/2019/12/28/Elasticsearch基本查询/index.html","hash":"934d1e7a916a99bf5dcfd731df39026d009e930d","modified":1660582699249},{"_id":"public/2019/12/28/Elasticsearch组合查询/index.html","hash":"6e5822f99ca694489adc91e3c9a3341751d29483","modified":1660582699249},{"_id":"public/2020/02/13/DRF JWT 配置/index.html","hash":"57e25cfe6ed63b016dde4c20f20a45ca98b46674","modified":1660582699249},{"_id":"public/2020/02/18/Linux文件属性/index.html","hash":"66b7fb3f3a5613c5d3dcccebeb2b0b74647e661f","modified":1660582699249},{"_id":"public/2019/12/28/Elasticsearch操作/index.html","hash":"fd1a88e5320322e40e013c595e9f38e8c8573472","modified":1660582699249},{"_id":"public/2019/12/28/Elasticsearch配置/index.html","hash":"47c6ded9baff3f8caed5e89a7cb433eb7f43c4be","modified":1660582699249},{"_id":"public/2019/12/20/Python 线程池 ThreadPoolExecutor/index.html","hash":"230f9b4fadbd62dc844156bb29547c1c51dc3641","modified":1660582699249},{"_id":"public/2019/12/20/Docker 指令2/index.html","hash":"8af797eb08aa6f4bc3026cab1f7f9aba7b5286cc","modified":1660582699249},{"_id":"public/2019/12/20/镜像发布/index.html","hash":"a518b68fe80d342a40b56cb817aa0c401e9fe3da","modified":1660582699249},{"_id":"public/2019/12/20/Docker 指令/index.html","hash":"9cc92db627944ea0244b97277bca9c0691dda6eb","modified":1660582699249},{"_id":"public/2019/12/16/来到深圳/index.html","hash":"def817191db54d881c4553a63da69e2ac514584f","modified":1660582699249},{"_id":"public/2019/12/04/django3 choices 新特性/index.html","hash":"acd482634cbe81823b258a38f796300d3ae06939","modified":1660582699249},{"_id":"public/2019/12/03/win10 osg.js 使用/index.html","hash":"a4bcda7a6969ccd7b4970e66910459d55c2bdc39","modified":1660582699249},{"_id":"public/2019/11/28/django-allauth 阿里云发送邮件出现nginx 504解决方法/index.html","hash":"b90c03c0110eb7cacd1b22d52945fb160137e578","modified":1660582699249},{"_id":"public/2019/11/27/ubuntu 部署 django2.0 + uwsgi + nginx/index.html","hash":"f884aa606bda0c3cc2089d43ba6d8f8435c9cdca","modified":1660582699249},{"_id":"public/2019/11/27/ubuntu python3.7 安装uwsgi 常见错误/index.html","hash":"9aef0ccebcaecd4b1fc348cc664184a6fd822ab2","modified":1660582699249},{"_id":"public/2019/11/27/django Signals/index.html","hash":"1bd3d03e23aeffb4a7d760d70eaf5f9b09ed6bbd","modified":1660582699249},{"_id":"public/2019/11/27/Django 使用 logging 模块的一次记录/index.html","hash":"6f921b4012b3b942aba7a969547191354b3a1d14","modified":1660582699249},{"_id":"public/2019/11/27/django 图片储存七牛云/index.html","hash":"d9a50cf09f056fe6c2afda8a479aef2a262b1cb7","modified":1660582699249},{"_id":"public/2019/11/27/Django2.0 重写用户模型/index.html","hash":"4a3c243ecfcf5a6a80fcc05ddbf29267c9127188","modified":1660582699249},{"_id":"public/2019/11/27/Ubuntu系统安装redis/index.html","hash":"48a7c879b5813c22483055dad2e158d93ccab1de","modified":1660582699249},{"_id":"public/2019/11/27/Redis 数据保留/index.html","hash":"1facfe06f6cbd21711d80e0df5fdcde3d2904382","modified":1660582699249},{"_id":"public/2019/12/21/删除排序数组中的重复项/index.html","hash":"d573897409499c3d8da37237c1e65266dec9141c","modified":1660582699249},{"_id":"public/2019/11/27/pipenv 使用/index.html","hash":"9e9f50894eeffc9fc7cc07ad4afc0b94faaea870","modified":1660582699249},{"_id":"public/2019/11/23/Class-based views/index.html","hash":"e92c14a5735684c8b9b26faa168ef8a4ddbab980","modified":1660582699249},{"_id":"public/2019/11/20/supervisor + pipenv + uwsgi/index.html","hash":"63695bc5040f6fe9d0fd97a31a450239fb4e65a5","modified":1660582699249},{"_id":"public/categories/生活/index.html","hash":"a6f85be71f1a4f2a3d432f18b1d4f431d8aa528c","modified":1660582699249},{"_id":"public/categories/python/index.html","hash":"9041bf55d44970c666e2c3ef6e122568992d58f4","modified":1660582699249},{"_id":"public/categories/python/page/2/index.html","hash":"d1d05d50901d8d26fa80f3a47db26926f7e2621f","modified":1660582699249},{"_id":"public/categories/Django/page/2/index.html","hash":"49a4989ee5c8d2a5d482ef9616446a9c894f106e","modified":1660582699249},{"_id":"public/categories/数据库/index.html","hash":"e77e3faa7c982a8b49d790da071ec93bf481c7a2","modified":1660582699249},{"_id":"public/categories/数据库/page/2/index.html","hash":"d58092e9bda943ae2837fd183ef2b181b20da483","modified":1660582699249},{"_id":"public/categories/docker/index.html","hash":"72c26122c0b75f70c5b4695d5c0ec2e5ccf8c500","modified":1660582699249},{"_id":"public/categories/Django/index.html","hash":"5992200ac6aff181ec034b4402a07838c0c9214d","modified":1660582699249},{"_id":"public/categories/生活/page/2/index.html","hash":"e40894e8b0958b3cc512326628eb88dade7b4102","modified":1660582699249},{"_id":"public/categories/Git-Github/index.html","hash":"eb4cf12777cdd84970bcbb1bcbcde57373354476","modified":1660582699249},{"_id":"public/categories/其他/index.html","hash":"8b30a115ba7e808530848f9f2be5be5250158a8d","modified":1660582699249},{"_id":"public/categories/其他/page/2/index.html","hash":"4d5691a0e24f05871daf8d9ce2282df4ce869f60","modified":1660582699249},{"_id":"public/categories/Linux/index.html","hash":"7b7200027080edac19005011f7e62bec6ba52e54","modified":1660582699249},{"_id":"public/categories/Markdown/index.html","hash":"6c372f8b6aa6f4a8e59092045836bd35e27151f4","modified":1660582699249},{"_id":"public/categories/充电/index.html","hash":"689d2a7d095b032ecf30eebcb11ae73ba9f63dda","modified":1660582699249},{"_id":"public/categories/算法/index.html","hash":"5b640c96046d1cd901bfd34374f1a4ece21f1374","modified":1660582699249},{"_id":"public/categories/阅读/index.html","hash":"14bfa118c16a26f9430908a09c6ec557352cd582","modified":1660582699249},{"_id":"public/categories/树莓派/index.html","hash":"a4ef968a29d08e0fb10f3835dabb681e081e428b","modified":1660582699249},{"_id":"public/index.html","hash":"022c95c3ba9822240ba45cb404ce89779858a518","modified":1660582699249},{"_id":"public/page/3/index.html","hash":"df9a0b10330e844fa25c85e7923fb7606b2f89fa","modified":1660582699249},{"_id":"public/page/4/index.html","hash":"5f966fcf53988f91654c0b43fe738b2c492cdec7","modified":1660582699249},{"_id":"public/page/2/index.html","hash":"eb88a9522497634638aebf835531a6c0717425e8","modified":1660582699249},{"_id":"public/page/5/index.html","hash":"f5a03ffc9c02e7cb766ad513d58e7952ee789dce","modified":1660582699249},{"_id":"public/page/6/index.html","hash":"45ffd041ef1b083546103e870fcca771bd34034d","modified":1660582699249},{"_id":"public/tags/python/page/2/index.html","hash":"8812b627823d41e11e7dc3367b40b9372ebdaa5d","modified":1660582699249},{"_id":"public/tags/python/index.html","hash":"2e942b831ba617429e13af022b5e557636b743c6","modified":1660582699249},{"_id":"public/tags/Django/index.html","hash":"e846e00f68a022835e4aac8277979742e97cc714","modified":1660582699249},{"_id":"public/tags/Django/page/2/index.html","hash":"7ac560370706a45008b2d1ab41cebc05f5128468","modified":1660582699249},{"_id":"public/tags/多线程/index.html","hash":"4c45579bd44aecd4cd9e03ce1b1ce05557342e97","modified":1660582699249},{"_id":"public/tags/redis/index.html","hash":"01b3099a092d4aa78087c36abfaa6d7a5cd97db1","modified":1660582699249},{"_id":"public/tags/docker/index.html","hash":"2cb7dc3ddbaed10e47d21203ccb6959e504edc15","modified":1660582699249},{"_id":"public/tags/windows/index.html","hash":"27577966ea34141ca188b541574942a1f44e8086","modified":1660582699249},{"_id":"public/tags/k8s/index.html","hash":"ff66670173e5524573ff70d7f96e8c1ba52f2974","modified":1660582699249},{"_id":"public/tags/django3/index.html","hash":"88b16ca28a7299d1bf2804ab550e4cb90d2afd4f","modified":1660582699249},{"_id":"public/tags/邮件/index.html","hash":"915e63155600974b39baf84739c42f8b8c164067","modified":1660582699249},{"_id":"public/tags/Typora/index.html","hash":"b690faa30902b7809fbef35b335f6c475c6953cf","modified":1660582699249},{"_id":"public/tags/Markdown/index.html","hash":"72a4d19dde9cdb7954e5ac12295428b09abef5d7","modified":1660582699249},{"_id":"public/tags/FastAPI/index.html","hash":"6b74e5206d116901173f531bb679b8bed1397278","modified":1660582699249},{"_id":"public/tags/生活/index.html","hash":"c73f323dc724c03006de944f6568e7523c40c7f4","modified":1660582699249},{"_id":"public/tags/Vue/index.html","hash":"5dbd8055cf23181e98c20e297b401ba4d383d827","modified":1660582699249},{"_id":"public/tags/自动化/index.html","hash":"d70e839d798c8cbd5e94cce6230398cccb236e64","modified":1660582699249},{"_id":"public/tags/WSL2/index.html","hash":"38ff0be25abfc53e4a4c0f3a1841e3dad6b68205","modified":1660582699249},{"_id":"public/tags/树莓派/index.html","hash":"3cee25c75982cc60b2b7e2632edee9514e472389","modified":1660582699249},{"_id":"public/tags/uwsgi/index.html","hash":"62a073500d31697518fb6c6ce4d66a80b3e810d9","modified":1660582699249},{"_id":"public/archives/index.html","hash":"6e364bb433eed6caddcf426ea82b9bf4ae72e46d","modified":1660582699249},{"_id":"public/tags/历史相关/index.html","hash":"c56e73fde1774ea8ff0ff67d37afd7ba95aa9aaf","modified":1660582699249},{"_id":"public/archives/page/3/index.html","hash":"680a293e66a20c8f233e6babf0fea19c8469a49a","modified":1660582699249},{"_id":"public/archives/page/2/index.html","hash":"43b1efb718e091f32c4668e620e7c94f2a0cf777","modified":1660582699249},{"_id":"public/archives/page/5/index.html","hash":"803c0cfe53ba7fcc92033a4b121afd9352d28fd2","modified":1660582699249},{"_id":"public/archives/page/7/index.html","hash":"5ebad9f330c1d616596fa17a8b800bc2c71f65a8","modified":1660582699249},{"_id":"public/archives/page/4/index.html","hash":"d4a1f135c0b3ee04882ffcb20588362326b4eff0","modified":1660582699249},{"_id":"public/archives/page/6/index.html","hash":"715da478c3c51225d9ee5e4d9d6c4149846afef2","modified":1660582699249},{"_id":"public/archives/page/8/index.html","hash":"7335e07e0e7b516d8dd2c80b7ddca00e7e7a93f8","modified":1660582699249},{"_id":"public/archives/page/9/index.html","hash":"381d9f2d98e60c6c0b06438ba94e5e78498944eb","modified":1660582699249},{"_id":"public/archives/page/10/index.html","hash":"c3f121b1f3764466d5d80d1f974e256cda5dde46","modified":1660582699249},{"_id":"public/archives/2019/index.html","hash":"49352ec76ffea6b5aee0364ae54041f92d8f74d6","modified":1660582699249},{"_id":"public/archives/2019/page/2/index.html","hash":"794740eb0d3646f792f96b106d580fa58968edeb","modified":1660582699249},{"_id":"public/archives/2019/page/3/index.html","hash":"25b2709ea422f693c38d91e112afd15e87bc7203","modified":1660582699249},{"_id":"public/archives/2019/page/4/index.html","hash":"5c6cc572d97dc1514de85e1004259d10fee0e2ad","modified":1660582699249},{"_id":"public/archives/2019/page/5/index.html","hash":"f88ac0e2e0fb534c778fc22b8f9f1fb152441d21","modified":1660582699249},{"_id":"public/archives/2019/11/index.html","hash":"8d687788a478347273c64f93d032f1e54c660923","modified":1660582699249},{"_id":"public/archives/2019/11/page/2/index.html","hash":"0653bc4e8d9128f9dc073ce884f95cdc737e3399","modified":1660582699249},{"_id":"public/archives/2019/12/index.html","hash":"18d2db1f6b856eb807b2b94fe2f4593b7166f90a","modified":1660582699249},{"_id":"public/archives/2019/12/page/2/index.html","hash":"7716801280c1b420e4f5c033a0e13f9cb4a24848","modified":1660582699249},{"_id":"public/archives/2020/index.html","hash":"a676be08effadf108896dad85dd987642e59042e","modified":1660582699249},{"_id":"public/archives/2020/page/2/index.html","hash":"087c0b581fe0fe57c21ec4be65a0db71ebaab647","modified":1660582699249},{"_id":"public/archives/2019/12/page/3/index.html","hash":"b4c6353fee8a6b7623908d7b3d3c1ffdb51fad02","modified":1660582699249},{"_id":"public/archives/2020/page/3/index.html","hash":"e206b8e3c843b2dfa14bb208c393d857165a5abd","modified":1660582699249},{"_id":"public/archives/2020/02/index.html","hash":"7123c17e5a189e50fb844824de57c56e8d42a57c","modified":1660582699249},{"_id":"public/archives/2020/page/4/index.html","hash":"34b4df59a4e328915b770194c50fb66c3b36fd05","modified":1660582699249},{"_id":"public/archives/2020/03/index.html","hash":"03f80f47f7973e841dacde4ec981eedd9a48c00c","modified":1660582699249},{"_id":"public/archives/2020/04/index.html","hash":"6a469692023fb4c6916a0c3b728f805a829cd815","modified":1660582699249},{"_id":"public/archives/2020/05/index.html","hash":"8c740445e97bea29563f8e9e8f0fecd14d8d0dd0","modified":1660582699249},{"_id":"public/archives/2020/08/index.html","hash":"a2eb9374c42e1cfbfade3f1f629d1f567c0a75a5","modified":1660582699249},{"_id":"public/archives/2020/09/index.html","hash":"72331b232c439974ce672f11398c0b0d7c362116","modified":1660582699249},{"_id":"public/archives/2020/11/index.html","hash":"956d9cf4922ef1014b89ba634e158f4c5f9b3351","modified":1660582699249},{"_id":"public/archives/2021/index.html","hash":"6e3fb7655857f2e6c094a478135ff0fbd8fdb004","modified":1660582699249},{"_id":"public/archives/2021/02/index.html","hash":"8c5dda52d4413492cbb679925957d2f6d2b450fe","modified":1660582699249},{"_id":"public/archives/2021/07/index.html","hash":"5891b0827553343e06c0bb4ebd13daeeee9fee29","modified":1660582699249},{"_id":"public/archives/2022/index.html","hash":"d5478014641ee2770cb1311e9d8ae1aad4bf30aa","modified":1660582699249},{"_id":"public/archives/2021/10/index.html","hash":"886eaf57167b87724d284f49ffb50d791a32d79a","modified":1660582699249},{"_id":"public/archives/2022/01/index.html","hash":"53c0e4435b967574ad0a52f7bbb09f30bbb588f5","modified":1660582699249},{"_id":"public/archives/2022/05/index.html","hash":"11df2f4317d43f81181400336d380fa1605464ab","modified":1660582699249},{"_id":"public/archives/2021/page/2/index.html","hash":"8cac0a508c19dc90b7f8659a4ed6c7cf37a8ced5","modified":1660582699249},{"_id":"public/archives/2022/07/index.html","hash":"70d01beb1e4a859c77bc363238b4346756c8df16","modified":1660443928685},{"_id":"public/archives/2022/08/index.html","hash":"f99074886713d89f8ef5021c7aa6d2062a1014ff","modified":1660443928685},{"_id":"public/categories/index.html","hash":"1e9f2c3db93fa877b012b1719a025a1f7d230d25","modified":1660582699249},{"_id":"public/tags/index.html","hash":"701effc14eaab78a8792690d060c73290c9a76ab","modified":1660582699249},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1660582699249},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1660582699249},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1660582699249},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1660582699249},{"_id":"source/game/index.md","hash":"af530977ff5b370133f278448db3972f89ce9bf0","modified":1660232896023},{"_id":"source/weelly/index.md","hash":"5dc36b30853cf227980d615955a9ad8c7e6d3383","modified":1660232985835},{"_id":"source/weekly/index.md","hash":"ed451ce7a39cf70f538f2fba5b5bab70b443b360","modified":1662384919512},{"_id":"public/weekly/index.html","hash":"ab5680fb93ed70d593a98c949a1536428b3c7225","modified":1660582699249},{"_id":"source/_posts/My-Gallery.md","hash":"56cf881cce47bfe145d39488701bd5f27debbd06","modified":1660443902558},{"_id":"public/2022/08/14/My-Gallery/index.html","hash":"a0d4902d37c7aef2afa2fb890dbaf99a77355b87","modified":1660443928685},{"_id":"source/weekly/202207W3.md","hash":"9b8ee0cbe85dccf36ffb692ecaade5b5cd41d377","modified":1660483395054},{"_id":"source/weekly/202208W1.md","hash":"a057a80ab4d9bf440be0c4a4d4229051918df654","modified":1660483449969},{"_id":"public/weekly/202207W3.html","hash":"e383e32fbb8283ff32a7700ba5d1479a860a19df","modified":1660582699249},{"_id":"public/weekly/202208W1.html","hash":"8b6692683cc7693b7fe74b3c17d9afcd0462bdf7","modified":1660582699249},{"_id":"public/atom.xml","hash":"306200389508389d72a05e796649b5c53269f8ea","modified":1660582699249},{"_id":"themes/icarus/source/img/chess.jpeg","hash":"d2cc585b6e37bd214d084f4459c9096d99c8ad33","modified":1660459855915},{"_id":"public/img/chess.jpeg","hash":"d2cc585b6e37bd214d084f4459c9096d99c8ad33","modified":1660582699249},{"_id":"source/weekly/202208W2.md","hash":"3327f1507cae8d735b652c810949dcde5224a966","modified":1660483651401},{"_id":"public/weekly/202208W2.html","hash":"1ae87930653823ef27fb40c68dfe0f0bcb90fc2a","modified":1660582699249},{"_id":"public/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1660582699249},{"_id":"public/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1660582699249},{"_id":"public/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1660582699249},{"_id":"public/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1660582699249},{"_id":"public/CNAME","hash":"819ed02f3d41355b55b1158164e291ad5f476513","modified":1660582699249},{"_id":"public/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1660582699249},{"_id":"public/img/avatar.jpg","hash":"a9f5fd4324a38f366f0417374b4fe98693743bc9","modified":1660582699249},{"_id":"public/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1660582699249},{"_id":"public/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1660582699249},{"_id":"public/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1660582699249},{"_id":"public/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1660582699249},{"_id":"public/js/main.js","hash":"08a2641765eeaf712157ad134dd675e3f7708ae2","modified":1660582699249},{"_id":"public/css/style.css","hash":"8717dd0ed1fe2a4237fbfb4f4f6e566cb1ee16b7","modified":1660582699249},{"_id":"public/css/default.css","hash":"8717dd0ed1fe2a4237fbfb4f4f6e566cb1ee16b7","modified":1660582699249},{"_id":"public/css/cyberpunk.css","hash":"b462177bee11f76e84e649f8192d5a68cb4b1402","modified":1660582699249},{"_id":"source/_posts/时生.md","hash":"85f34589228db5a7bca7a0c72e820878f1590162","modified":1662384919507},{"_id":"source/weekly/202208W4.md","hash":"1ae96d0be9d8736fa452358156cf35e2a4c9a753","modified":1662384919512},{"_id":"source/weekly/202208W3.md","hash":"d58dfae66ac755aebc7837cd39b4b04e74c56c89","modified":1662384919512}],"Category":[{"name":"生活","_id":"cl6p6180p0004tksc9juhb5ao"},{"name":"python","_id":"cl6p6180u000mtkscfysr3n16"},{"name":"Django","_id":"cl6p6180v000ttkscfv5c9nak"},{"name":"数据库","_id":"cl6p6180w0014tksc5s8328ix"},{"name":"docker","_id":"cl6p6180y001mtkscc7v2f2p6"},{"name":"Git/Github","_id":"cl6p61811002ctksc6993a7lb"},{"name":"其他","_id":"cl6p61812002stksca015086b"},{"name":"Linux","_id":"cl6p61813002ytksc4ir01nc0"},{"name":"Markdown","_id":"cl6p61815003ntkscf9t0ej40"},{"name":"充电","_id":"cl6p61816003xtksca1o360g7"},{"name":"阅读","_id":"cl6p618190048tkscfb8q9mai"},{"name":"算法","_id":"cl6p6181a004jtksc426mgsf2"},{"name":"树莓派","_id":"cl6p6181b004ytksc99btd20d"}],"Data":[{"_id":"friends","data":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}],"Page":[{"title":"404","date":"2021-07-05T15:30:11.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2021-07-05 23:30:11\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n","updated":"2022-08-11T12:49:48.119Z","path":"404/index.html","comments":1,"_id":"cl6p6180l0000tksc0tr6fx5q","content":"","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":""},{"_content":"### 什么样的存在\n极简主义，中二晚期.\n\n| Key      | Value |\n| ----------- | ----------- |\n| 所在      | 深圳       |\n|如何联系|775650117@qq.com|\n| 户外   | 爬山，滑雪        |\n| 乐器   | 一把偶尔响一下的吉他       |\n| 常用语言      | Go,Python,Solidity       |\n| 平时喜欢看      | 宇宙记录片，旅游Vlog，红警HBK08       |\n\n\n### 一些清单\n- [阅读清单](https://atlantic-gull-726.notion.site/658a3e55b3bd4ca3b212beb7438a5c5e)\n- [音乐清单](https://music.163.com/playlist?id=7502042039&userid=1419114645)\n- [观影清单](https://atlantic-gull-726.notion.site/e9cd9af522c64c54848bb6a5f0c1a91a)\n\n\n### F\n{% blockquote Ricardo M. Lu, 《龙族》 %}\n我是一个偶尔会发疯的人呐。\n{% endblockquote %}\n\n\n","source":"about/index.md","raw":"### 什么样的存在\n极简主义，中二晚期.\n\n| Key      | Value |\n| ----------- | ----------- |\n| 所在      | 深圳       |\n|如何联系|775650117@qq.com|\n| 户外   | 爬山，滑雪        |\n| 乐器   | 一把偶尔响一下的吉他       |\n| 常用语言      | Go,Python,Solidity       |\n| 平时喜欢看      | 宇宙记录片，旅游Vlog，红警HBK08       |\n\n\n### 一些清单\n- [阅读清单](https://atlantic-gull-726.notion.site/658a3e55b3bd4ca3b212beb7438a5c5e)\n- [音乐清单](https://music.163.com/playlist?id=7502042039&userid=1419114645)\n- [观影清单](https://atlantic-gull-726.notion.site/e9cd9af522c64c54848bb6a5f0c1a91a)\n\n\n### F\n{% blockquote Ricardo M. Lu, 《龙族》 %}\n我是一个偶尔会发疯的人呐。\n{% endblockquote %}\n\n\n","date":"2022-09-05T13:35:19.510Z","updated":"2022-09-05T13:35:19.510Z","path":"about/index.html","_id":"cl6p6180o0002tkscbb39cknv","title":"","comments":1,"layout":"page","content":"<h3 id=\"什么样的存在\"><a href=\"#什么样的存在\" class=\"headerlink\" title=\"什么样的存在\"></a>什么样的存在</h3><p>极简主义，中二晚期.</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>所在</td>\n<td>深圳</td>\n</tr>\n<tr>\n<td>如何联系</td>\n<td><a href=\"mailto:&#55;&#55;&#x35;&#x36;&#x35;&#x30;&#49;&#49;&#55;&#x40;&#113;&#x71;&#46;&#99;&#111;&#109;\">&#55;&#55;&#x35;&#x36;&#x35;&#x30;&#49;&#49;&#55;&#x40;&#113;&#x71;&#46;&#99;&#111;&#109;</a></td>\n</tr>\n<tr>\n<td>户外</td>\n<td>爬山，滑雪</td>\n</tr>\n<tr>\n<td>乐器</td>\n<td>一把偶尔响一下的吉他</td>\n</tr>\n<tr>\n<td>常用语言</td>\n<td>Go,Python,Solidity</td>\n</tr>\n<tr>\n<td>平时喜欢看</td>\n<td>宇宙记录片，旅游Vlog，红警HBK08</td>\n</tr>\n</tbody></table>\n<h3 id=\"一些清单\"><a href=\"#一些清单\" class=\"headerlink\" title=\"一些清单\"></a>一些清单</h3><ul>\n<li><a href=\"https://atlantic-gull-726.notion.site/658a3e55b3bd4ca3b212beb7438a5c5e\">阅读清单</a></li>\n<li><a href=\"https://music.163.com/playlist?id=7502042039&userid=1419114645\">音乐清单</a></li>\n<li><a href=\"https://atlantic-gull-726.notion.site/e9cd9af522c64c54848bb6a5f0c1a91a\">观影清单</a></li>\n</ul>\n<h3 id=\"F\"><a href=\"#F\" class=\"headerlink\" title=\"F\"></a>F</h3><blockquote><p>我是一个偶尔会发疯的人呐。</p>\n<footer><strong>Ricardo M. Lu</strong><cite>《龙族》</cite></footer></blockquote>\n\n\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h3 id=\"什么样的存在\"><a href=\"#什么样的存在\" class=\"headerlink\" title=\"什么样的存在\"></a>什么样的存在</h3><p>极简主义，中二晚期.</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>所在</td>\n<td>深圳</td>\n</tr>\n<tr>\n<td>如何联系</td>\n<td><a href=\"mailto:&#55;&#55;&#x35;&#x36;&#x35;&#x30;&#49;&#49;&#55;&#x40;&#113;&#x71;&#46;&#99;&#111;&#109;\">&#55;&#55;&#x35;&#x36;&#x35;&#x30;&#49;&#49;&#55;&#x40;&#113;&#x71;&#46;&#99;&#111;&#109;</a></td>\n</tr>\n<tr>\n<td>户外</td>\n<td>爬山，滑雪</td>\n</tr>\n<tr>\n<td>乐器</td>\n<td>一把偶尔响一下的吉他</td>\n</tr>\n<tr>\n<td>常用语言</td>\n<td>Go,Python,Solidity</td>\n</tr>\n<tr>\n<td>平时喜欢看</td>\n<td>宇宙记录片，旅游Vlog，红警HBK08</td>\n</tr>\n</tbody></table>\n<h3 id=\"一些清单\"><a href=\"#一些清单\" class=\"headerlink\" title=\"一些清单\"></a>一些清单</h3><ul>\n<li><a href=\"https://atlantic-gull-726.notion.site/658a3e55b3bd4ca3b212beb7438a5c5e\">阅读清单</a></li>\n<li><a href=\"https://music.163.com/playlist?id=7502042039&userid=1419114645\">音乐清单</a></li>\n<li><a href=\"https://atlantic-gull-726.notion.site/e9cd9af522c64c54848bb6a5f0c1a91a\">观影清单</a></li>\n</ul>\n<h3 id=\"F\"><a href=\"#F\" class=\"headerlink\" title=\"F\"></a>F</h3><blockquote><p>我是一个偶尔会发疯的人呐。</p>\n<footer><strong>Ricardo M. Lu</strong><cite>《龙族》</cite></footer></blockquote>\n\n\n"},{"title":"202207W3","date":"2022-07-24T11:10:47.000Z","author":"Ginta","img":"https://img.ginta.top/post%2Fchuandi.jpg","tags":["周报"],"categories":"生活","_content":"### 生活\n周六申请了加班，一方面是优化一下系统，另外也是打算过段时间请假去西藏或者云南，当然也可能是四川走一走。有好长时间没有旅游了（一两天的就不说了），上次是什么时候已经不记得了。\n乌龟养了一个多月，这几天精神不是很好，把它放到的窗边了，希望每天有一段时间的光照能让它有有所好转。\n最近又开始刷[宇宙记录片](https://www.bilibili.com/video/BV1os411K72G?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=dfeba0e84225bbb1159a33a311780697)了，韦伯望远镜公布了几张深空照片，从中可以看到几处引力透镜效应，很好奇未来有一天我们通过引力透镜效应观测到的一百多亿年前接近 *Bing Bang* 时期的宇宙是什么样子。\n### 技术\n入门了 **solidity**，虽然不从事区块链相关的工作，一直以来对这方面还是挺感兴趣的。\n博客从 *Vercel* 迁移到了 *cloudflare*，现在 *Vercel* 在国内访问速度有点感人。还有就是现在的主题有点太花哨了，计划切换成[icarus](https://github.com/ppoffice/hexo-theme-icarus)。\n### 读书\n在读[Make Time](https://www.amazon.sg/Make-Time-focus-matters-every/dp/0593079582/ref=asc_df_0593079582/?tag=googleshoppin-22&linkCode=df0&hvadid=389124471048&hvpos=&hvnetw=g&hvrand=11831829612059196502&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=2702&hvtargid=pla-585858616727&psc=1)。","source":"weekly/202207W3.md","raw":"---\ntitle: 202207W3\ndate: 2022-07-24 19:10:47\nauthor: Ginta\nimg: https://img.ginta.top/post%2Fchuandi.jpg\ntags:\n    - 周报\ncategories: 生活\n---\n### 生活\n周六申请了加班，一方面是优化一下系统，另外也是打算过段时间请假去西藏或者云南，当然也可能是四川走一走。有好长时间没有旅游了（一两天的就不说了），上次是什么时候已经不记得了。\n乌龟养了一个多月，这几天精神不是很好，把它放到的窗边了，希望每天有一段时间的光照能让它有有所好转。\n最近又开始刷[宇宙记录片](https://www.bilibili.com/video/BV1os411K72G?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=dfeba0e84225bbb1159a33a311780697)了，韦伯望远镜公布了几张深空照片，从中可以看到几处引力透镜效应，很好奇未来有一天我们通过引力透镜效应观测到的一百多亿年前接近 *Bing Bang* 时期的宇宙是什么样子。\n### 技术\n入门了 **solidity**，虽然不从事区块链相关的工作，一直以来对这方面还是挺感兴趣的。\n博客从 *Vercel* 迁移到了 *cloudflare*，现在 *Vercel* 在国内访问速度有点感人。还有就是现在的主题有点太花哨了，计划切换成[icarus](https://github.com/ppoffice/hexo-theme-icarus)。\n### 读书\n在读[Make Time](https://www.amazon.sg/Make-Time-focus-matters-every/dp/0593079582/ref=asc_df_0593079582/?tag=googleshoppin-22&linkCode=df0&hvadid=389124471048&hvpos=&hvnetw=g&hvrand=11831829612059196502&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=2702&hvtargid=pla-585858616727&psc=1)。","updated":"2022-08-14T13:23:15.054Z","path":"weekly/202207W3.html","_id":"cl6sph2z10000n2sc8afc9f3u","comments":1,"layout":"page","content":"<h3 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h3><p>周六申请了加班，一方面是优化一下系统，另外也是打算过段时间请假去西藏或者云南，当然也可能是四川走一走。有好长时间没有旅游了（一两天的就不说了），上次是什么时候已经不记得了。<br>乌龟养了一个多月，这几天精神不是很好，把它放到的窗边了，希望每天有一段时间的光照能让它有有所好转。<br>最近又开始刷<a href=\"https://www.bilibili.com/video/BV1os411K72G?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=dfeba0e84225bbb1159a33a311780697\">宇宙记录片</a>了，韦伯望远镜公布了几张深空照片，从中可以看到几处引力透镜效应，很好奇未来有一天我们通过引力透镜效应观测到的一百多亿年前接近 <em>Bing Bang</em> 时期的宇宙是什么样子。</p>\n<h3 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h3><p>入门了 <strong>solidity</strong>，虽然不从事区块链相关的工作，一直以来对这方面还是挺感兴趣的。<br>博客从 <em>Vercel</em> 迁移到了 <em>cloudflare</em>，现在 <em>Vercel</em> 在国内访问速度有点感人。还有就是现在的主题有点太花哨了，计划切换成<a href=\"https://github.com/ppoffice/hexo-theme-icarus\">icarus</a>。</p>\n<h3 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h3><p>在读<a href=\"https://www.amazon.sg/Make-Time-focus-matters-every/dp/0593079582/ref=asc_df_0593079582/?tag=googleshoppin-22&linkCode=df0&hvadid=389124471048&hvpos=&hvnetw=g&hvrand=11831829612059196502&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=2702&hvtargid=pla-585858616727&psc=1\">Make Time</a>。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h3 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h3><p>周六申请了加班，一方面是优化一下系统，另外也是打算过段时间请假去西藏或者云南，当然也可能是四川走一走。有好长时间没有旅游了（一两天的就不说了），上次是什么时候已经不记得了。<br>乌龟养了一个多月，这几天精神不是很好，把它放到的窗边了，希望每天有一段时间的光照能让它有有所好转。<br>最近又开始刷<a href=\"https://www.bilibili.com/video/BV1os411K72G?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=dfeba0e84225bbb1159a33a311780697\">宇宙记录片</a>了，韦伯望远镜公布了几张深空照片，从中可以看到几处引力透镜效应，很好奇未来有一天我们通过引力透镜效应观测到的一百多亿年前接近 <em>Bing Bang</em> 时期的宇宙是什么样子。</p>\n<h3 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h3><p>入门了 <strong>solidity</strong>，虽然不从事区块链相关的工作，一直以来对这方面还是挺感兴趣的。<br>博客从 <em>Vercel</em> 迁移到了 <em>cloudflare</em>，现在 <em>Vercel</em> 在国内访问速度有点感人。还有就是现在的主题有点太花哨了，计划切换成<a href=\"https://github.com/ppoffice/hexo-theme-icarus\">icarus</a>。</p>\n<h3 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h3><p>在读<a href=\"https://www.amazon.sg/Make-Time-focus-matters-every/dp/0593079582/ref=asc_df_0593079582/?tag=googleshoppin-22&linkCode=df0&hvadid=389124471048&hvpos=&hvnetw=g&hvrand=11831829612059196502&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=2702&hvtargid=pla-585858616727&psc=1\">Make Time</a>。</p>\n"},{"title":"202208W1","date":"2022-08-08T15:20:47.000Z","author":"Ginta","cover":"https://img.ginta.top/post%2Fchuandi.jpg","tags":["周报"],"categories":"生活","_content":"\n### 生活\n\n乌龟还是没能活过第二个月，如果早注意到它的状态就好了，本来想再尝试一下的，最后决定过段时间吧。最近朋友圈里有好多爬山的，回想一下上次爬山已经是几个月前的事了，周末爬一下塘朗山吧。\n\n### 技术\n重读了一下[DESIGN  PATTERNS  in  GO](https://refactoring.guru/design-patterns/go)，每次读设计模式问题能有不同的感觉，可能是因为平时不怎么写组件，所以更多的还是阅读开源代码来保持工程化的思维。\n\n### 读书\n\n本周没怎么阅读，晚上睡的太晚了，地铁上都不想读书了，作息还是要调整一下的。","source":"weekly/202208W1.md","raw":"---\ntitle: 202208W1\ndate: 2022-08-08 23:20:47\nauthor: Ginta\ncover: https://img.ginta.top/post%2Fchuandi.jpg\ntags:\n    - 周报\ncategories: 生活\n---\n\n### 生活\n\n乌龟还是没能活过第二个月，如果早注意到它的状态就好了，本来想再尝试一下的，最后决定过段时间吧。最近朋友圈里有好多爬山的，回想一下上次爬山已经是几个月前的事了，周末爬一下塘朗山吧。\n\n### 技术\n重读了一下[DESIGN  PATTERNS  in  GO](https://refactoring.guru/design-patterns/go)，每次读设计模式问题能有不同的感觉，可能是因为平时不怎么写组件，所以更多的还是阅读开源代码来保持工程化的思维。\n\n### 读书\n\n本周没怎么阅读，晚上睡的太晚了，地铁上都不想读书了，作息还是要调整一下的。","updated":"2022-08-14T13:24:09.969Z","path":"weekly/202208W1.html","_id":"cl6sphaw50001n2sch5zz0vx0","comments":1,"layout":"page","content":"<h3 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h3><p>乌龟还是没能活过第二个月，如果早注意到它的状态就好了，本来想再尝试一下的，最后决定过段时间吧。最近朋友圈里有好多爬山的，回想一下上次爬山已经是几个月前的事了，周末爬一下塘朗山吧。</p>\n<h3 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h3><p>重读了一下<a href=\"https://refactoring.guru/design-patterns/go\">DESIGN  PATTERNS  in  GO</a>，每次读设计模式问题能有不同的感觉，可能是因为平时不怎么写组件，所以更多的还是阅读开源代码来保持工程化的思维。</p>\n<h3 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h3><p>本周没怎么阅读，晚上睡的太晚了，地铁上都不想读书了，作息还是要调整一下的。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h3 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h3><p>乌龟还是没能活过第二个月，如果早注意到它的状态就好了，本来想再尝试一下的，最后决定过段时间吧。最近朋友圈里有好多爬山的，回想一下上次爬山已经是几个月前的事了，周末爬一下塘朗山吧。</p>\n<h3 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h3><p>重读了一下<a href=\"https://refactoring.guru/design-patterns/go\">DESIGN  PATTERNS  in  GO</a>，每次读设计模式问题能有不同的感觉，可能是因为平时不怎么写组件，所以更多的还是阅读开源代码来保持工程化的思维。</p>\n<h3 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h3><p>本周没怎么阅读，晚上睡的太晚了，地铁上都不想读书了，作息还是要调整一下的。</p>\n"},{"_content":"Weekly report\n[202208-W4](/weekly/202208W4.html)\n[202208-W3](/weekly/202208W3.html)\n[202208-W2](/weekly/202208W2.html)\n[202208-W1](/weekly/202208W1.html)\n[202207-W3](/weekly/202207W3.html)","source":"weekly/index.md","raw":"Weekly report\n[202208-W4](/weekly/202208W4.html)\n[202208-W3](/weekly/202208W3.html)\n[202208-W2](/weekly/202208W2.html)\n[202208-W1](/weekly/202208W1.html)\n[202207-W3](/weekly/202207W3.html)","date":"2022-09-05T13:35:19.512Z","updated":"2022-09-05T13:35:19.512Z","path":"weekly/index.html","_id":"cl6spxpdk00008tsc1o6zb5y1","title":"","comments":1,"layout":"page","content":"<p>Weekly report<br><a href=\"/weekly/202208W4.html\">202208-W4</a><br><a href=\"/weekly/202208W3.html\">202208-W3</a><br><a href=\"/weekly/202208W2.html\">202208-W2</a><br><a href=\"/weekly/202208W1.html\">202208-W1</a><br><a href=\"/weekly/202207W3.html\">202207-W3</a></p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<p>Weekly report<br><a href=\"/weekly/202208W4.html\">202208-W4</a><br><a href=\"/weekly/202208W3.html\">202208-W3</a><br><a href=\"/weekly/202208W2.html\">202208-W2</a><br><a href=\"/weekly/202208W1.html\">202208-W1</a><br><a href=\"/weekly/202207W3.html\">202207-W3</a></p>\n"},{"title":"202208W2","author":"Ginta","date":"2022-08-14T12:32:08.000Z","tags":["周报"],"categories":"生活","_content":"\n### 生活\n如上周周报所提到，周六下午去爬了塘朗山，今年的夏天相较往年热了不少，一趟下来全身都是汗。回后瑞随便吃了点，看了一下时间还早，想起也好久没有看电影了，查了一下最近《神探大战》正在上映，觉得题材和演员都还可以就直奔影院，剧情偏悬疑,刘青云演技依旧在线，就不剧透了，个人算是满意。回到家洗澡11点休息了，是几个月来最早的一次。玩了两局LOL，选了从来不选的船长，天坑，但是队友给力，所以还是赢了，这个游戏果然七分靠运气~\n\n### 技术\n速刷了 *Solidity* 的基本特性，下周会尝试开始写合约，也会学习一下公有链，私有链，联盟链，超级账本的概念和实现思路。\n博客主题换成了[icarus](https://github.com/ppoffice/hexo-theme-icarus)，原因在[7月第三周周报](/weekly/202207W3.html)有提到（还是拖了大半个月。。。），顺带把周报单独分出了一个page。少加载了一堆资源访问速度提升是肉眼可见了，看板娘最后也没去掉。\n### 读书\n- 《读者》\n- 《重构》\n虽然量不大，毕竟相比上周好多了。\n\n### 还有\n本周就是这样了，不过在上传md之前习惯性地刷了一下推特，发现了一枚有趣的学生。\n{% twitter https://twitter.com/renbaoshuo/status/1558461539677765632 %}","source":"weekly/202208W2.md","raw":"---\ntitle: 202208W2\nauthor: Ginta\ndate: 2022-08-14 20:32:08\ntags:\n    - 周报\ncategories: 生活\n---\n\n### 生活\n如上周周报所提到，周六下午去爬了塘朗山，今年的夏天相较往年热了不少，一趟下来全身都是汗。回后瑞随便吃了点，看了一下时间还早，想起也好久没有看电影了，查了一下最近《神探大战》正在上映，觉得题材和演员都还可以就直奔影院，剧情偏悬疑,刘青云演技依旧在线，就不剧透了，个人算是满意。回到家洗澡11点休息了，是几个月来最早的一次。玩了两局LOL，选了从来不选的船长，天坑，但是队友给力，所以还是赢了，这个游戏果然七分靠运气~\n\n### 技术\n速刷了 *Solidity* 的基本特性，下周会尝试开始写合约，也会学习一下公有链，私有链，联盟链，超级账本的概念和实现思路。\n博客主题换成了[icarus](https://github.com/ppoffice/hexo-theme-icarus)，原因在[7月第三周周报](/weekly/202207W3.html)有提到（还是拖了大半个月。。。），顺带把周报单独分出了一个page。少加载了一堆资源访问速度提升是肉眼可见了，看板娘最后也没去掉。\n### 读书\n- 《读者》\n- 《重构》\n虽然量不大，毕竟相比上周好多了。\n\n### 还有\n本周就是这样了，不过在上传md之前习惯性地刷了一下推特，发现了一枚有趣的学生。\n{% twitter https://twitter.com/renbaoshuo/status/1558461539677765632 %}","updated":"2022-08-14T13:27:31.401Z","path":"weekly/202208W2.html","_id":"cl6tcs8w100003wscg49gf6mu","comments":1,"layout":"page","content":"<h3 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h3><p>如上周周报所提到，周六下午去爬了塘朗山，今年的夏天相较往年热了不少，一趟下来全身都是汗。回后瑞随便吃了点，看了一下时间还早，想起也好久没有看电影了，查了一下最近《神探大战》正在上映，觉得题材和演员都还可以就直奔影院，剧情偏悬疑,刘青云演技依旧在线，就不剧透了，个人算是满意。回到家洗澡11点休息了，是几个月来最早的一次。玩了两局LOL，选了从来不选的船长，天坑，但是队友给力，所以还是赢了，这个游戏果然七分靠运气~</p>\n<h3 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h3><p>速刷了 <em>Solidity</em> 的基本特性，下周会尝试开始写合约，也会学习一下公有链，私有链，联盟链，超级账本的概念和实现思路。<br>博客主题换成了<a href=\"https://github.com/ppoffice/hexo-theme-icarus\">icarus</a>，原因在<a href=\"/weekly/202207W3.html\">7月第三周周报</a>有提到（还是拖了大半个月。。。），顺带把周报单独分出了一个page。少加载了一堆资源访问速度提升是肉眼可见了，看板娘最后也没去掉。</p>\n<h3 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h3><ul>\n<li>《读者》</li>\n<li>《重构》<br>虽然量不大，毕竟相比上周好多了。</li>\n</ul>\n<h3 id=\"还有\"><a href=\"#还有\" class=\"headerlink\" title=\"还有\"></a>还有</h3><p>本周就是这样了，不过在上传md之前习惯性地刷了一下推特，发现了一枚有趣的学生。</p>\n<div class=\"twitter-wrapper\"><blockquote class=\"twitter-tweet\"><a href=\"https://twitter.com/renbaoshuo/status/1558461539677765632\"></a></blockquote></div><script async defer src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h3 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h3><p>如上周周报所提到，周六下午去爬了塘朗山，今年的夏天相较往年热了不少，一趟下来全身都是汗。回后瑞随便吃了点，看了一下时间还早，想起也好久没有看电影了，查了一下最近《神探大战》正在上映，觉得题材和演员都还可以就直奔影院，剧情偏悬疑,刘青云演技依旧在线，就不剧透了，个人算是满意。回到家洗澡11点休息了，是几个月来最早的一次。玩了两局LOL，选了从来不选的船长，天坑，但是队友给力，所以还是赢了，这个游戏果然七分靠运气~</p>\n<h3 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h3><p>速刷了 <em>Solidity</em> 的基本特性，下周会尝试开始写合约，也会学习一下公有链，私有链，联盟链，超级账本的概念和实现思路。<br>博客主题换成了<a href=\"https://github.com/ppoffice/hexo-theme-icarus\">icarus</a>，原因在<a href=\"/weekly/202207W3.html\">7月第三周周报</a>有提到（还是拖了大半个月。。。），顺带把周报单独分出了一个page。少加载了一堆资源访问速度提升是肉眼可见了，看板娘最后也没去掉。</p>\n<h3 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h3><ul>\n<li>《读者》</li>\n<li>《重构》<br>虽然量不大，毕竟相比上周好多了。</li>\n</ul>\n<h3 id=\"还有\"><a href=\"#还有\" class=\"headerlink\" title=\"还有\"></a>还有</h3><p>本周就是这样了，不过在上传md之前习惯性地刷了一下推特，发现了一枚有趣的学生。</p>\n<div class=\"twitter-wrapper\"><blockquote class=\"twitter-tweet\"><a href=\"https://twitter.com/renbaoshuo/status/1558461539677765632\"></a></blockquote></div><script async defer src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>"},{"title":"202208W4","author":"Ginta","date":"2022-08-28T16:15:14.000Z","tags":["周报"],"categories":"生活","_content":"\n### 生活\n周五和两位朋友吃饭，之前是他们请的，这次正好轮到我了，选了大仟里的《美奈小馆》，越南料理，几个月前尝过一次，口感还行。期间闲聊了很多，代码、链、定居。其中一位离职一个多月，最近在研究 *react* ，有提到曾经做过一段前端，算是重拾旧业，打算再休息一段时间。另一位是有考虑之后在惠州定居，可能是因为已经有小孩了，所以会想得全面一点。\n\n### 技术\n这周抽空整理了一下负责业务模块代码，九月份计划重构部分接口，所以又看了[DESIGN  PATTERNS  in  GO](https://refactoring.guru/design-patterns/go)，希望重构后可以做到任何一位新人都可以快速上手。\n\n### 读书\n- 《时生》100%\n- 《人间失格》100%\n积压的东野圭吾的书全部看完了，把《时生》放回书架的时候纠结下一本看什么好，《大秦帝国》系列还是阿加莎系列，但是最近看的都是历史和悬疑类型小说，想换个风格。正好看到角落里的《人间失格》，之前和发小互相推荐小说的时候有对她提到过，她说这本书看了可能会抑郁，没有很推荐我看。然而当初《活着》也没有造成很大的心理负担，片刻迟疑最终还是拆开了包装。《人间失格》一共花了两天半，确实是不错的作品，也确实有点心情沉重，刚看完的那天不想工作，也不想和任何人沟通。一两天后就好多了，多看看不同题材的书就好像经历了不同人的部分人生一样，感觉生命充实许多。","source":"weekly/202208W4.md","raw":"---\ntitle: 202208W4\nauthor: Ginta\ndate: 2022-08-29 00:15:14\ntags:\n    - 周报\ncategories: 生活\n---\n\n### 生活\n周五和两位朋友吃饭，之前是他们请的，这次正好轮到我了，选了大仟里的《美奈小馆》，越南料理，几个月前尝过一次，口感还行。期间闲聊了很多，代码、链、定居。其中一位离职一个多月，最近在研究 *react* ，有提到曾经做过一段前端，算是重拾旧业，打算再休息一段时间。另一位是有考虑之后在惠州定居，可能是因为已经有小孩了，所以会想得全面一点。\n\n### 技术\n这周抽空整理了一下负责业务模块代码，九月份计划重构部分接口，所以又看了[DESIGN  PATTERNS  in  GO](https://refactoring.guru/design-patterns/go)，希望重构后可以做到任何一位新人都可以快速上手。\n\n### 读书\n- 《时生》100%\n- 《人间失格》100%\n积压的东野圭吾的书全部看完了，把《时生》放回书架的时候纠结下一本看什么好，《大秦帝国》系列还是阿加莎系列，但是最近看的都是历史和悬疑类型小说，想换个风格。正好看到角落里的《人间失格》，之前和发小互相推荐小说的时候有对她提到过，她说这本书看了可能会抑郁，没有很推荐我看。然而当初《活着》也没有造成很大的心理负担，片刻迟疑最终还是拆开了包装。《人间失格》一共花了两天半，确实是不错的作品，也确实有点心情沉重，刚看完的那天不想工作，也不想和任何人沟通。一两天后就好多了，多看看不同题材的书就好像经历了不同人的部分人生一样，感觉生命充实许多。","updated":"2022-09-05T13:35:19.512Z","path":"weekly/202208W4.html","comments":1,"layout":"page","_id":"cl7otbdkl0000qkf08now8m5q","content":"<h3 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h3><p>周五和两位朋友吃饭，之前是他们请的，这次正好轮到我了，选了大仟里的《美奈小馆》，越南料理，几个月前尝过一次，口感还行。期间闲聊了很多，代码、链、定居。其中一位离职一个多月，最近在研究 <em>react</em> ，有提到曾经做过一段前端，算是重拾旧业，打算再休息一段时间。另一位是有考虑之后在惠州定居，可能是因为已经有小孩了，所以会想得全面一点。</p>\n<h3 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h3><p>这周抽空整理了一下负责业务模块代码，九月份计划重构部分接口，所以又看了<a href=\"https://refactoring.guru/design-patterns/go\">DESIGN  PATTERNS  in  GO</a>，希望重构后可以做到任何一位新人都可以快速上手。</p>\n<h3 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h3><ul>\n<li>《时生》100%</li>\n<li>《人间失格》100%<br>积压的东野圭吾的书全部看完了，把《时生》放回书架的时候纠结下一本看什么好，《大秦帝国》系列还是阿加莎系列，但是最近看的都是历史和悬疑类型小说，想换个风格。正好看到角落里的《人间失格》，之前和发小互相推荐小说的时候有对她提到过，她说这本书看了可能会抑郁，没有很推荐我看。然而当初《活着》也没有造成很大的心理负担，片刻迟疑最终还是拆开了包装。《人间失格》一共花了两天半，确实是不错的作品，也确实有点心情沉重，刚看完的那天不想工作，也不想和任何人沟通。一两天后就好多了，多看看不同题材的书就好像经历了不同人的部分人生一样，感觉生命充实许多。</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h3 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h3><p>周五和两位朋友吃饭，之前是他们请的，这次正好轮到我了，选了大仟里的《美奈小馆》，越南料理，几个月前尝过一次，口感还行。期间闲聊了很多，代码、链、定居。其中一位离职一个多月，最近在研究 <em>react</em> ，有提到曾经做过一段前端，算是重拾旧业，打算再休息一段时间。另一位是有考虑之后在惠州定居，可能是因为已经有小孩了，所以会想得全面一点。</p>\n<h3 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h3><p>这周抽空整理了一下负责业务模块代码，九月份计划重构部分接口，所以又看了<a href=\"https://refactoring.guru/design-patterns/go\">DESIGN  PATTERNS  in  GO</a>，希望重构后可以做到任何一位新人都可以快速上手。</p>\n<h3 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h3><ul>\n<li>《时生》100%</li>\n<li>《人间失格》100%<br>积压的东野圭吾的书全部看完了，把《时生》放回书架的时候纠结下一本看什么好，《大秦帝国》系列还是阿加莎系列，但是最近看的都是历史和悬疑类型小说，想换个风格。正好看到角落里的《人间失格》，之前和发小互相推荐小说的时候有对她提到过，她说这本书看了可能会抑郁，没有很推荐我看。然而当初《活着》也没有造成很大的心理负担，片刻迟疑最终还是拆开了包装。《人间失格》一共花了两天半，确实是不错的作品，也确实有点心情沉重，刚看完的那天不想工作，也不想和任何人沟通。一两天后就好多了，多看看不同题材的书就好像经历了不同人的部分人生一样，感觉生命充实许多。</li>\n</ul>\n"},{"title":"202208W3","author":"Ginta","date":"2022-08-22T16:10:46.000Z","tags":["周报"],"categories":"生活","_content":"\n## 生活\n周六刷了梧桐山，上次去梧桐山已经是半年前了，天气正好，有一段土路没有下雨，顺利走到蝴蝶谷。只是不巧当天山顶多云，往下什么都看不到，还挺冷的。\n吉他放到角落吃灰有段时间了，试了试《城南花已开》，已经有点生硬了，平时还是要不时练习一下。公司新来一个老哥可以负载部分我的任务，leader说前期可以把不太重要的交给他熟悉项目，不过第一周感觉还是算了吧，快乐就好，所以我告诉他本周只用熟悉一下模块是做什么的，然后就是强调了一下没什么事就准时下班。\n\n## 技术\n这周还挺忙的，技术方面基本没有输入和输出，本来想写一下合约的，这周工作任务比较满。下周会好一点，可以把一些任务交付给新人了。\n\n## 读书\n东野圭吾的《时生》读了一半，《重构》小翻了一下，个人感觉比起上周只读杂志算是好一点。","source":"weekly/202208W3.md","raw":"---\ntitle: 202208W3\nauthor: Ginta\ndate: 2022-08-23 00:10:46\ntags:\n    - 周报\ncategories: 生活\n---\n\n## 生活\n周六刷了梧桐山，上次去梧桐山已经是半年前了，天气正好，有一段土路没有下雨，顺利走到蝴蝶谷。只是不巧当天山顶多云，往下什么都看不到，还挺冷的。\n吉他放到角落吃灰有段时间了，试了试《城南花已开》，已经有点生硬了，平时还是要不时练习一下。公司新来一个老哥可以负载部分我的任务，leader说前期可以把不太重要的交给他熟悉项目，不过第一周感觉还是算了吧，快乐就好，所以我告诉他本周只用熟悉一下模块是做什么的，然后就是强调了一下没什么事就准时下班。\n\n## 技术\n这周还挺忙的，技术方面基本没有输入和输出，本来想写一下合约的，这周工作任务比较满。下周会好一点，可以把一些任务交付给新人了。\n\n## 读书\n东野圭吾的《时生》读了一半，《重构》小翻了一下，个人感觉比起上周只读杂志算是好一点。","updated":"2022-09-05T13:35:19.512Z","path":"weekly/202208W3.html","comments":1,"layout":"page","_id":"cl7otbdky0003qkf0eoj224iu","content":"<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><p>周六刷了梧桐山，上次去梧桐山已经是半年前了，天气正好，有一段土路没有下雨，顺利走到蝴蝶谷。只是不巧当天山顶多云，往下什么都看不到，还挺冷的。<br>吉他放到角落吃灰有段时间了，试了试《城南花已开》，已经有点生硬了，平时还是要不时练习一下。公司新来一个老哥可以负载部分我的任务，leader说前期可以把不太重要的交给他熟悉项目，不过第一周感觉还是算了吧，快乐就好，所以我告诉他本周只用熟悉一下模块是做什么的，然后就是强调了一下没什么事就准时下班。</p>\n<h2 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h2><p>这周还挺忙的，技术方面基本没有输入和输出，本来想写一下合约的，这周工作任务比较满。下周会好一点，可以把一些任务交付给新人了。</p>\n<h2 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h2><p>东野圭吾的《时生》读了一半，《重构》小翻了一下，个人感觉比起上周只读杂志算是好一点。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><p>周六刷了梧桐山，上次去梧桐山已经是半年前了，天气正好，有一段土路没有下雨，顺利走到蝴蝶谷。只是不巧当天山顶多云，往下什么都看不到，还挺冷的。<br>吉他放到角落吃灰有段时间了，试了试《城南花已开》，已经有点生硬了，平时还是要不时练习一下。公司新来一个老哥可以负载部分我的任务，leader说前期可以把不太重要的交给他熟悉项目，不过第一周感觉还是算了吧，快乐就好，所以我告诉他本周只用熟悉一下模块是做什么的，然后就是强调了一下没什么事就准时下班。</p>\n<h2 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h2><p>这周还挺忙的，技术方面基本没有输入和输出，本来想写一下合约的，这周工作任务比较满。下周会好一点，可以把一些任务交付给新人了。</p>\n<h2 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h2><p>东野圭吾的《时生》读了一半，《重构》小翻了一下，个人感觉比起上周只读杂志算是好一点。</p>\n"}],"Post":[{"title":"2019和2020","date":"2019-12-28T07:10:47.000Z","author":"Ginta","cover":"http://img.ginta.top/dragin1.jpg","_content":"## 前言\n\n2019年总体来说还是有所收获的，除了技术上成长了许多，还开发了自己的博客；另外还参与了 *Pycon China2019 成都* 的志愿者活动，有机会和各位大佬近距离接触\n\n![志愿者和讲师合影](https://upload-images.jianshu.io/upload_images/8491383-c1bf578e98d8d121.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)，阿里老哥、日本小姐姐以及 *Flask* 项目大神维护者的讲解让小生受益匪浅。\n\n- 读书的话貌似杂志更多吧，受老爸影响没事的时候就会看看《特别关注》、还有初中以来一直看的《读者》、《意林》。小说的话也看了《嫌疑人x的献身》（开始以为是推理小说，最后还是爱情结尾......以前看《白夜行》感觉亮司也是个“好人”）、《巨人的陨落1》、《巨人的陨落2》目前看了一半吧。\n\n\n\n- 工作方面之前一直在成都工作，最终也是内心斗争了好久还是决定来深圳了，2年前就一直想来了，毕业后又工作了几个月（从成都到北上广深的也许可以体会这需要多大的勇气~），来到深圳开始找新的工作吧，目前有一个offer不过岗位路线和自己的计划略微偏移，最终决定放弃这个offer。\n\n\n\n- 旅行，去年把《港澳通行证》办了，打算的是今年来一趟香港之旅，不过成都距离还是太远了，现在来深圳方便多了，明年的话这个计划基本没问题。\n\n\n\n## 对于2020年\n\n- 学习，微服务无论是前景还是技术角度个人还是很看好的，然后之前抽空也大概看了看 **docker**，不过还没有项目部署经验，年前这段时间再巩固一下，年后打算把博客改成 **docker** 部署。由于用到了 **elasticsearch** 进行全文检索 和  **supervisor** 来进程管理，免不了再来一大波操作了~。\n\n\n\n- 社交，感觉自己的运气还是蛮好的，来深圳之前帮助一个老哥解决了一些技术问题，来深圳以后老哥也帮了我不少。未来希望结交一些新朋友吧，不过这个随缘就好。\n\n\n\n- 兴趣，周日的话想培养个兴趣，目前是想弹弹吉他，工作稳定后换个房子，养条狗，还是要有些仪式感的。\n\n\n\n- 读书，《巨人的陨落》还有一本半没读完，《平凡的世界》，《基督山伯爵》（英文版）。\n\n\n\n- 待补充......\n\n\n\n最后想给自己来一句\n\n\n\n>愿你在被打击时，记起你的珍贵，抵抗恶意；愿你在迷茫时，坚信你的珍贵。爱你所爱，行你所行，听从你心，无问西东。","source":"_posts/2019和2020.md","raw":"---\ntitle: 2019和2020\ndate: 2019-12-28 15:10:47\nauthor: Ginta\ncover: http://img.ginta.top/dragin1.jpg\ntags: \ncategories: 生活\n---\n## 前言\n\n2019年总体来说还是有所收获的，除了技术上成长了许多，还开发了自己的博客；另外还参与了 *Pycon China2019 成都* 的志愿者活动，有机会和各位大佬近距离接触\n\n![志愿者和讲师合影](https://upload-images.jianshu.io/upload_images/8491383-c1bf578e98d8d121.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)，阿里老哥、日本小姐姐以及 *Flask* 项目大神维护者的讲解让小生受益匪浅。\n\n- 读书的话貌似杂志更多吧，受老爸影响没事的时候就会看看《特别关注》、还有初中以来一直看的《读者》、《意林》。小说的话也看了《嫌疑人x的献身》（开始以为是推理小说，最后还是爱情结尾......以前看《白夜行》感觉亮司也是个“好人”）、《巨人的陨落1》、《巨人的陨落2》目前看了一半吧。\n\n\n\n- 工作方面之前一直在成都工作，最终也是内心斗争了好久还是决定来深圳了，2年前就一直想来了，毕业后又工作了几个月（从成都到北上广深的也许可以体会这需要多大的勇气~），来到深圳开始找新的工作吧，目前有一个offer不过岗位路线和自己的计划略微偏移，最终决定放弃这个offer。\n\n\n\n- 旅行，去年把《港澳通行证》办了，打算的是今年来一趟香港之旅，不过成都距离还是太远了，现在来深圳方便多了，明年的话这个计划基本没问题。\n\n\n\n## 对于2020年\n\n- 学习，微服务无论是前景还是技术角度个人还是很看好的，然后之前抽空也大概看了看 **docker**，不过还没有项目部署经验，年前这段时间再巩固一下，年后打算把博客改成 **docker** 部署。由于用到了 **elasticsearch** 进行全文检索 和  **supervisor** 来进程管理，免不了再来一大波操作了~。\n\n\n\n- 社交，感觉自己的运气还是蛮好的，来深圳之前帮助一个老哥解决了一些技术问题，来深圳以后老哥也帮了我不少。未来希望结交一些新朋友吧，不过这个随缘就好。\n\n\n\n- 兴趣，周日的话想培养个兴趣，目前是想弹弹吉他，工作稳定后换个房子，养条狗，还是要有些仪式感的。\n\n\n\n- 读书，《巨人的陨落》还有一本半没读完，《平凡的世界》，《基督山伯爵》（英文版）。\n\n\n\n- 待补充......\n\n\n\n最后想给自己来一句\n\n\n\n>愿你在被打击时，记起你的珍贵，抵抗恶意；愿你在迷茫时，坚信你的珍贵。爱你所爱，行你所行，听从你心，无问西东。","slug":"2019和2020","published":1,"updated":"2022-08-11T16:25:09.822Z","_id":"cl6p6180m0001tkscbucr6r3j","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>2019年总体来说还是有所收获的，除了技术上成长了许多，还开发了自己的博客；另外还参与了 <em>Pycon China2019 成都</em> 的志愿者活动，有机会和各位大佬近距离接触</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/8491383-c1bf578e98d8d121.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"志愿者和讲师合影\">，阿里老哥、日本小姐姐以及 <em>Flask</em> 项目大神维护者的讲解让小生受益匪浅。</p>\n<ul>\n<li><p>读书的话貌似杂志更多吧，受老爸影响没事的时候就会看看《特别关注》、还有初中以来一直看的《读者》、《意林》。小说的话也看了《嫌疑人x的献身》（开始以为是推理小说，最后还是爱情结尾……以前看《白夜行》感觉亮司也是个“好人”）、《巨人的陨落1》、《巨人的陨落2》目前看了一半吧。</p>\n</li>\n<li><p>工作方面之前一直在成都工作，最终也是内心斗争了好久还是决定来深圳了，2年前就一直想来了，毕业后又工作了几个月（从成都到北上广深的也许可以体会这需要多大的勇气~），来到深圳开始找新的工作吧，目前有一个offer不过岗位路线和自己的计划略微偏移，最终决定放弃这个offer。</p>\n</li>\n<li><p>旅行，去年把《港澳通行证》办了，打算的是今年来一趟香港之旅，不过成都距离还是太远了，现在来深圳方便多了，明年的话这个计划基本没问题。</p>\n</li>\n</ul>\n<h2 id=\"对于2020年\"><a href=\"#对于2020年\" class=\"headerlink\" title=\"对于2020年\"></a>对于2020年</h2><ul>\n<li><p>学习，微服务无论是前景还是技术角度个人还是很看好的，然后之前抽空也大概看了看 <strong>docker</strong>，不过还没有项目部署经验，年前这段时间再巩固一下，年后打算把博客改成 <strong>docker</strong> 部署。由于用到了 <strong>elasticsearch</strong> 进行全文检索 和  <strong>supervisor</strong> 来进程管理，免不了再来一大波操作了~。</p>\n</li>\n<li><p>社交，感觉自己的运气还是蛮好的，来深圳之前帮助一个老哥解决了一些技术问题，来深圳以后老哥也帮了我不少。未来希望结交一些新朋友吧，不过这个随缘就好。</p>\n</li>\n<li><p>兴趣，周日的话想培养个兴趣，目前是想弹弹吉他，工作稳定后换个房子，养条狗，还是要有些仪式感的。</p>\n</li>\n<li><p>读书，《巨人的陨落》还有一本半没读完，《平凡的世界》，《基督山伯爵》（英文版）。</p>\n</li>\n<li><p>待补充……</p>\n</li>\n</ul>\n<p>最后想给自己来一句</p>\n<blockquote>\n<p>愿你在被打击时，记起你的珍贵，抵抗恶意；愿你在迷茫时，坚信你的珍贵。爱你所爱，行你所行，听从你心，无问西东。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>2019年总体来说还是有所收获的，除了技术上成长了许多，还开发了自己的博客；另外还参与了 <em>Pycon China2019 成都</em> 的志愿者活动，有机会和各位大佬近距离接触</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/8491383-c1bf578e98d8d121.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"志愿者和讲师合影\">，阿里老哥、日本小姐姐以及 <em>Flask</em> 项目大神维护者的讲解让小生受益匪浅。</p>\n<ul>\n<li><p>读书的话貌似杂志更多吧，受老爸影响没事的时候就会看看《特别关注》、还有初中以来一直看的《读者》、《意林》。小说的话也看了《嫌疑人x的献身》（开始以为是推理小说，最后还是爱情结尾……以前看《白夜行》感觉亮司也是个“好人”）、《巨人的陨落1》、《巨人的陨落2》目前看了一半吧。</p>\n</li>\n<li><p>工作方面之前一直在成都工作，最终也是内心斗争了好久还是决定来深圳了，2年前就一直想来了，毕业后又工作了几个月（从成都到北上广深的也许可以体会这需要多大的勇气~），来到深圳开始找新的工作吧，目前有一个offer不过岗位路线和自己的计划略微偏移，最终决定放弃这个offer。</p>\n</li>\n<li><p>旅行，去年把《港澳通行证》办了，打算的是今年来一趟香港之旅，不过成都距离还是太远了，现在来深圳方便多了，明年的话这个计划基本没问题。</p>\n</li>\n</ul>\n<h2 id=\"对于2020年\"><a href=\"#对于2020年\" class=\"headerlink\" title=\"对于2020年\"></a>对于2020年</h2><ul>\n<li><p>学习，微服务无论是前景还是技术角度个人还是很看好的，然后之前抽空也大概看了看 <strong>docker</strong>，不过还没有项目部署经验，年前这段时间再巩固一下，年后打算把博客改成 <strong>docker</strong> 部署。由于用到了 <strong>elasticsearch</strong> 进行全文检索 和  <strong>supervisor</strong> 来进程管理，免不了再来一大波操作了~。</p>\n</li>\n<li><p>社交，感觉自己的运气还是蛮好的，来深圳之前帮助一个老哥解决了一些技术问题，来深圳以后老哥也帮了我不少。未来希望结交一些新朋友吧，不过这个随缘就好。</p>\n</li>\n<li><p>兴趣，周日的话想培养个兴趣，目前是想弹弹吉他，工作稳定后换个房子，养条狗，还是要有些仪式感的。</p>\n</li>\n<li><p>读书，《巨人的陨落》还有一本半没读完，《平凡的世界》，《基督山伯爵》（英文版）。</p>\n</li>\n<li><p>待补充……</p>\n</li>\n</ul>\n<p>最后想给自己来一句</p>\n<blockquote>\n<p>愿你在被打击时，记起你的珍贵，抵抗恶意；愿你在迷茫时，坚信你的珍贵。爱你所爱，行你所行，听从你心，无问西东。</p>\n</blockquote>\n"},{"title":"2021年总结","date":"2022-01-01T04:35:47.000Z","author":"Ginta","img":"https://img.ginta.top/src%3Dhttp___gss0.baidu.com_-Po3dSag_xI4khGko9WTAnF6hhy_zhidao_pic_item_f7246b600c338744d0431315570fd9f9d62aa0d0.jpg%26refer%3Dhttp___gss0.baidu.jpeg","top":false,"hide":false,"cover":false,"coverImg":"https://img.ginta.top/src%3Dhttp___gss0.baidu.com_-Po3dSag_xI4khGko9WTAnF6hhy_zhidao_pic_item_f7246b600c338744d0431315570fd9f9d62aa0d0.jpg%26refer%3Dhttp___gss0.baidu.jpeg","toc":false,"mathjax":false,"summary":null,"_content":"\n本来是打算在年末的最后一天总结一下的，结果跨年玩到了3点多才回后瑞，那就元旦的上午抽点时间回顾2021年的经历，顺便规划一下2022年。\n\n按理来说总结应该是简单的，不过多写点其实也挺好的，很久之后再看回过头再看自己写的东西其实挺有意思的。\n\n2021年的春节是在朋友家过的，在过年的前一个月疫情突然又严重了，老妈说太原那边看样子回不去了，票可以退掉。想到从来没有一个人在外地过年，还是有点新鲜的，所以后来虽然确定可以回去了，也果断选择留在深圳过年。\n\n那天上午在家玩了几局游戏，下午就出门了，目的地没有想好，先去宝安图书馆转了一下，本以为十分冷清的大厅竟坐满了人，大部分是准备考试的，考研、考证、可能考公也不一定。在书架上挑了本讲宇宙天体的书看了两个小时，不得不说有插画的书，特别是这种讲太空星体的更能让人耐心看下去。\n四点多到了深圳湾公园，海边也有不少人的，也不奇怪，毕竟图书馆都能有那么多人。有不少人在拍照,找了自认为风景还可以的角度拍了几张，选了一张贴上。![深圳湾公园](https://img-blog.csdnimg.cn/710bbf5d98db45a2a41a47dd69b84d55.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAR2ludGFfeA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center)\n七点回去吃年夜饭，朋友准备的还是很不错的，菜式比较丰富，名字叫不上来，十分好吃。期间聊了一下工作，还有以前的经历，每个人都有自己的过去，以前一直认为朋友身在一个互联网大厂，在深圳定居已经让不少人羡慕了，但北京的几年辛酸加上个人的性格，就不在 *Tencent* 想必也差不到哪去。朋友说很多年前他也曾沉迷游戏，为了充钱过年也没有回家，家里还一度以为他在好好读书。那天聊了很久，年夜饭就这么结束了。过年的两个星期把《无心法师》追完了。\n\n三月和同事去玩了恐怖密室，《鬼打墙》。之前是没有玩过恐怖主题密室的，表面平静，实际感觉还是有点吓人的，有个女生主动 *solo* 最后一关，我们还是佩服她的勇气，后来又去了个恐怖主题的，但都没有第一家那种感觉了。\n\n六月组织了梅林-塘朗山穿越，一行七人，都是入门级玩家，有四位竟然只带了一瓶水就来爬山了，只能说想法比较年经，不过能让他们体会到了躺平是多么美好的一件事，后来这种强度的运动他们再也不参加了。还有一位行进比较慢就到终点等我们了。同事体力相当好，我被丢到了后面，后来带着我的所有补给和唯一的通信工具上了山顶，以至于我后来没有体力走下去了，也联系不上同事，还遇到了分叉口，被迫下山了。下山后找了家小商店，八宝粥火腿什么的各种吃，顺便加了根老冰棍,然后给家里打电话说没钱结账了，家里多转了100块打车回家，用电脑上的微信联系到了同事。“你太能折腾了，自己都这样还叫同事，下次一个人就好了，自己丢了不要紧，别把其他人捎带了。”依稀记得后来老妈是说么说的。再后来就把阳台山，梧桐山也爬完了，之后考虑挑战更高难度的山。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/ab829a6c6e7b4ba396584dc4bef9c32f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAR2ludGFfeA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center)\n\n七月份入门了围棋，围棋以前总觉得很高深，不好上手。其实围棋对新人来说还是很友好的，成为国手就是另一回事了。\n\n十一月底换了工作，转了 *go* 的开发。比较感谢 *leader* 一年多的关照，还有公司的其他同事也比较好沟通，离职一个多月了有时做梦还能梦到公司的猫。\n\n\n十二月初捡起了闲置几个月的吉他，自买回来就没弹过几次，不过整个十二月还是连续下来了。\n\n\n读书清单如下：\n- 《幻夜》30%\n- 《程序员修炼之道》40%\n- 《我曾走在崩溃的边缘》100%\n- 《明朝那些事儿》100%\n- 《活着》100%\n- 《读者》、《特别关注》若干\n\n2021年总体来说相对2020年还是丰富了很多，2020年的周末基本都是在家里宅的。*Pycon China* 的*Meeting up* 也结识了不少新朋友，听了他们不同人生经历感触还是挺深的。读书的话这么一看似乎是有点少了，大部分都是杂志，技术方面对 *k8s* 架构了解了一下，也不再只局限于架构。小说只完成了两本，其实小说应该至少15+的。\n### 退掉好多微信群\n年度的某个周末，我做了一个重大决定：退掉大部分群，简化社交。\n截止到2021年末微信加了很多很多的群，大部分都是同事群。因为都是和工作无关，所以离职后也没有退，还有一些在其他场合加入的。\n也许是自己无法做到让内心足够的平静，查看多个群的内容每天占据了相当可观的时间，虽然确实有一些内容比较有用，但这样的状态也不是自己所理想的。\n有考虑过退掉这么多群带来的弊端，比如技术领域的滞后，以及社交能力的下滑。然而最后还是这么做了。\n一直以来理想的状态是每周可以静心读一到两本小说，或者半月通读一本技术书籍；每天弹半个小时到一个小时吉他，然后做一定量的运动。\n如果每隔几分钟就想看一下群消息，担心错过什么重要信息，那我可能一直达不到理想的状态了。\n基于以上考虑，目前还是选择放弃一部分社交，多出来的时间调节一下自己，哪怕只是在躺着什么也不做，什么也不想。\n\n### 2022年\n读书前置清单：\n- 《幻夜》（一周）\n- 《重构》（一个月）\n- 《放学后》（一周）\n- 《大秦帝国》（三个月）\n- 《why we sleep》（两个月）\n先规划半年的吧，读书量按周末时间来估的\n\n技术\n- SRE - Google 运维解密\n- 深入了解 Proxyless Service Mesh 相关技术\n- 一周两道算法练习\n- 读gin源码\n- 深度学习mysql\n\n开源\n- 参与到kratos\n- rqalpha\n\n户外运动（玩）\n- 排牙山\n- 广州蹦极\n- 七娘山\n\n音乐\n- 学习乐理\n\n健身\n目前每天晚上是固定2组简单的运动：每组40次哑铃（单手1.75KG），80个仰卧起坐以及30个俯卧撑。\n二月结束的时候希望达到每组50次哑铃（单手2.5KG），100个仰卧起坐以及40个俯卧撑。目前先这么定，哑铃的目标感觉有点高了，先挂着吧。\n### 尝试\n尝试做一些自己从来没做过的方向，年前听了[100天计划，你可以完成什么？](https://uxcoffee.com/episode/74)播客，觉得很有意思，几位主播都用100天尝试自己从未涉及的领域，100天后的效果还是挺好的。能把一件自己觉得有意思的事连续100天不间断做下来，第二个100天就容易很多了。从来没有期望自己做什么惊天动地的大事，只是不想每天过着重复的生活，很多冲动的决定，只是希望生活可以丰富一点。\n\n## end\n最近看到一句很不错的话:\n>>>一个人最好的状态莫过于,眼里写满了故事,脸上却不见风霜。\n","source":"_posts/2022.md","raw":"---\ntitle: 2021年总结\ndate: 2022-01-01 12:35:47\nauthor: Ginta\nimg: https://img.ginta.top/src%3Dhttp___gss0.baidu.com_-Po3dSag_xI4khGko9WTAnF6hhy_zhidao_pic_item_f7246b600c338744d0431315570fd9f9d62aa0d0.jpg%26refer%3Dhttp___gss0.baidu.jpeg\ntop: false\nhide: false\ncover: false\ncoverImg: https://img.ginta.top/src%3Dhttp___gss0.baidu.com_-Po3dSag_xI4khGko9WTAnF6hhy_zhidao_pic_item_f7246b600c338744d0431315570fd9f9d62aa0d0.jpg%26refer%3Dhttp___gss0.baidu.jpeg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: 生活\n---\n\n本来是打算在年末的最后一天总结一下的，结果跨年玩到了3点多才回后瑞，那就元旦的上午抽点时间回顾2021年的经历，顺便规划一下2022年。\n\n按理来说总结应该是简单的，不过多写点其实也挺好的，很久之后再看回过头再看自己写的东西其实挺有意思的。\n\n2021年的春节是在朋友家过的，在过年的前一个月疫情突然又严重了，老妈说太原那边看样子回不去了，票可以退掉。想到从来没有一个人在外地过年，还是有点新鲜的，所以后来虽然确定可以回去了，也果断选择留在深圳过年。\n\n那天上午在家玩了几局游戏，下午就出门了，目的地没有想好，先去宝安图书馆转了一下，本以为十分冷清的大厅竟坐满了人，大部分是准备考试的，考研、考证、可能考公也不一定。在书架上挑了本讲宇宙天体的书看了两个小时，不得不说有插画的书，特别是这种讲太空星体的更能让人耐心看下去。\n四点多到了深圳湾公园，海边也有不少人的，也不奇怪，毕竟图书馆都能有那么多人。有不少人在拍照,找了自认为风景还可以的角度拍了几张，选了一张贴上。![深圳湾公园](https://img-blog.csdnimg.cn/710bbf5d98db45a2a41a47dd69b84d55.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAR2ludGFfeA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center)\n七点回去吃年夜饭，朋友准备的还是很不错的，菜式比较丰富，名字叫不上来，十分好吃。期间聊了一下工作，还有以前的经历，每个人都有自己的过去，以前一直认为朋友身在一个互联网大厂，在深圳定居已经让不少人羡慕了，但北京的几年辛酸加上个人的性格，就不在 *Tencent* 想必也差不到哪去。朋友说很多年前他也曾沉迷游戏，为了充钱过年也没有回家，家里还一度以为他在好好读书。那天聊了很久，年夜饭就这么结束了。过年的两个星期把《无心法师》追完了。\n\n三月和同事去玩了恐怖密室，《鬼打墙》。之前是没有玩过恐怖主题密室的，表面平静，实际感觉还是有点吓人的，有个女生主动 *solo* 最后一关，我们还是佩服她的勇气，后来又去了个恐怖主题的，但都没有第一家那种感觉了。\n\n六月组织了梅林-塘朗山穿越，一行七人，都是入门级玩家，有四位竟然只带了一瓶水就来爬山了，只能说想法比较年经，不过能让他们体会到了躺平是多么美好的一件事，后来这种强度的运动他们再也不参加了。还有一位行进比较慢就到终点等我们了。同事体力相当好，我被丢到了后面，后来带着我的所有补给和唯一的通信工具上了山顶，以至于我后来没有体力走下去了，也联系不上同事，还遇到了分叉口，被迫下山了。下山后找了家小商店，八宝粥火腿什么的各种吃，顺便加了根老冰棍,然后给家里打电话说没钱结账了，家里多转了100块打车回家，用电脑上的微信联系到了同事。“你太能折腾了，自己都这样还叫同事，下次一个人就好了，自己丢了不要紧，别把其他人捎带了。”依稀记得后来老妈是说么说的。再后来就把阳台山，梧桐山也爬完了，之后考虑挑战更高难度的山。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/ab829a6c6e7b4ba396584dc4bef9c32f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAR2ludGFfeA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center)\n\n七月份入门了围棋，围棋以前总觉得很高深，不好上手。其实围棋对新人来说还是很友好的，成为国手就是另一回事了。\n\n十一月底换了工作，转了 *go* 的开发。比较感谢 *leader* 一年多的关照，还有公司的其他同事也比较好沟通，离职一个多月了有时做梦还能梦到公司的猫。\n\n\n十二月初捡起了闲置几个月的吉他，自买回来就没弹过几次，不过整个十二月还是连续下来了。\n\n\n读书清单如下：\n- 《幻夜》30%\n- 《程序员修炼之道》40%\n- 《我曾走在崩溃的边缘》100%\n- 《明朝那些事儿》100%\n- 《活着》100%\n- 《读者》、《特别关注》若干\n\n2021年总体来说相对2020年还是丰富了很多，2020年的周末基本都是在家里宅的。*Pycon China* 的*Meeting up* 也结识了不少新朋友，听了他们不同人生经历感触还是挺深的。读书的话这么一看似乎是有点少了，大部分都是杂志，技术方面对 *k8s* 架构了解了一下，也不再只局限于架构。小说只完成了两本，其实小说应该至少15+的。\n### 退掉好多微信群\n年度的某个周末，我做了一个重大决定：退掉大部分群，简化社交。\n截止到2021年末微信加了很多很多的群，大部分都是同事群。因为都是和工作无关，所以离职后也没有退，还有一些在其他场合加入的。\n也许是自己无法做到让内心足够的平静，查看多个群的内容每天占据了相当可观的时间，虽然确实有一些内容比较有用，但这样的状态也不是自己所理想的。\n有考虑过退掉这么多群带来的弊端，比如技术领域的滞后，以及社交能力的下滑。然而最后还是这么做了。\n一直以来理想的状态是每周可以静心读一到两本小说，或者半月通读一本技术书籍；每天弹半个小时到一个小时吉他，然后做一定量的运动。\n如果每隔几分钟就想看一下群消息，担心错过什么重要信息，那我可能一直达不到理想的状态了。\n基于以上考虑，目前还是选择放弃一部分社交，多出来的时间调节一下自己，哪怕只是在躺着什么也不做，什么也不想。\n\n### 2022年\n读书前置清单：\n- 《幻夜》（一周）\n- 《重构》（一个月）\n- 《放学后》（一周）\n- 《大秦帝国》（三个月）\n- 《why we sleep》（两个月）\n先规划半年的吧，读书量按周末时间来估的\n\n技术\n- SRE - Google 运维解密\n- 深入了解 Proxyless Service Mesh 相关技术\n- 一周两道算法练习\n- 读gin源码\n- 深度学习mysql\n\n开源\n- 参与到kratos\n- rqalpha\n\n户外运动（玩）\n- 排牙山\n- 广州蹦极\n- 七娘山\n\n音乐\n- 学习乐理\n\n健身\n目前每天晚上是固定2组简单的运动：每组40次哑铃（单手1.75KG），80个仰卧起坐以及30个俯卧撑。\n二月结束的时候希望达到每组50次哑铃（单手2.5KG），100个仰卧起坐以及40个俯卧撑。目前先这么定，哑铃的目标感觉有点高了，先挂着吧。\n### 尝试\n尝试做一些自己从来没做过的方向，年前听了[100天计划，你可以完成什么？](https://uxcoffee.com/episode/74)播客，觉得很有意思，几位主播都用100天尝试自己从未涉及的领域，100天后的效果还是挺好的。能把一件自己觉得有意思的事连续100天不间断做下来，第二个100天就容易很多了。从来没有期望自己做什么惊天动地的大事，只是不想每天过着重复的生活，很多冲动的决定，只是希望生活可以丰富一点。\n\n## end\n最近看到一句很不错的话:\n>>>一个人最好的状态莫过于,眼里写满了故事,脸上却不见风霜。\n","slug":"2022","published":1,"updated":"2022-08-11T15:33:35.579Z","_id":"cl6p6180o0003tkscfdxj5qnk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本来是打算在年末的最后一天总结一下的，结果跨年玩到了3点多才回后瑞，那就元旦的上午抽点时间回顾2021年的经历，顺便规划一下2022年。</p>\n<p>按理来说总结应该是简单的，不过多写点其实也挺好的，很久之后再看回过头再看自己写的东西其实挺有意思的。</p>\n<p>2021年的春节是在朋友家过的，在过年的前一个月疫情突然又严重了，老妈说太原那边看样子回不去了，票可以退掉。想到从来没有一个人在外地过年，还是有点新鲜的，所以后来虽然确定可以回去了，也果断选择留在深圳过年。</p>\n<p>那天上午在家玩了几局游戏，下午就出门了，目的地没有想好，先去宝安图书馆转了一下，本以为十分冷清的大厅竟坐满了人，大部分是准备考试的，考研、考证、可能考公也不一定。在书架上挑了本讲宇宙天体的书看了两个小时，不得不说有插画的书，特别是这种讲太空星体的更能让人耐心看下去。<br>四点多到了深圳湾公园，海边也有不少人的，也不奇怪，毕竟图书馆都能有那么多人。有不少人在拍照,找了自认为风景还可以的角度拍了几张，选了一张贴上。<img src=\"https://img-blog.csdnimg.cn/710bbf5d98db45a2a41a47dd69b84d55.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAR2ludGFfeA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"深圳湾公园\"><br>七点回去吃年夜饭，朋友准备的还是很不错的，菜式比较丰富，名字叫不上来，十分好吃。期间聊了一下工作，还有以前的经历，每个人都有自己的过去，以前一直认为朋友身在一个互联网大厂，在深圳定居已经让不少人羡慕了，但北京的几年辛酸加上个人的性格，就不在 <em>Tencent</em> 想必也差不到哪去。朋友说很多年前他也曾沉迷游戏，为了充钱过年也没有回家，家里还一度以为他在好好读书。那天聊了很久，年夜饭就这么结束了。过年的两个星期把《无心法师》追完了。</p>\n<p>三月和同事去玩了恐怖密室，《鬼打墙》。之前是没有玩过恐怖主题密室的，表面平静，实际感觉还是有点吓人的，有个女生主动 <em>solo</em> 最后一关，我们还是佩服她的勇气，后来又去了个恐怖主题的，但都没有第一家那种感觉了。</p>\n<p>六月组织了梅林-塘朗山穿越，一行七人，都是入门级玩家，有四位竟然只带了一瓶水就来爬山了，只能说想法比较年经，不过能让他们体会到了躺平是多么美好的一件事，后来这种强度的运动他们再也不参加了。还有一位行进比较慢就到终点等我们了。同事体力相当好，我被丢到了后面，后来带着我的所有补给和唯一的通信工具上了山顶，以至于我后来没有体力走下去了，也联系不上同事，还遇到了分叉口，被迫下山了。下山后找了家小商店，八宝粥火腿什么的各种吃，顺便加了根老冰棍,然后给家里打电话说没钱结账了，家里多转了100块打车回家，用电脑上的微信联系到了同事。“你太能折腾了，自己都这样还叫同事，下次一个人就好了，自己丢了不要紧，别把其他人捎带了。”依稀记得后来老妈是说么说的。再后来就把阳台山，梧桐山也爬完了，之后考虑挑战更高难度的山。<br><img src=\"https://img-blog.csdnimg.cn/ab829a6c6e7b4ba396584dc4bef9c32f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAR2ludGFfeA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>七月份入门了围棋，围棋以前总觉得很高深，不好上手。其实围棋对新人来说还是很友好的，成为国手就是另一回事了。</p>\n<p>十一月底换了工作，转了 <em>go</em> 的开发。比较感谢 <em>leader</em> 一年多的关照，还有公司的其他同事也比较好沟通，离职一个多月了有时做梦还能梦到公司的猫。</p>\n<p>十二月初捡起了闲置几个月的吉他，自买回来就没弹过几次，不过整个十二月还是连续下来了。</p>\n<p>读书清单如下：</p>\n<ul>\n<li>《幻夜》30%</li>\n<li>《程序员修炼之道》40%</li>\n<li>《我曾走在崩溃的边缘》100%</li>\n<li>《明朝那些事儿》100%</li>\n<li>《活着》100%</li>\n<li>《读者》、《特别关注》若干</li>\n</ul>\n<p>2021年总体来说相对2020年还是丰富了很多，2020年的周末基本都是在家里宅的。<em>Pycon China</em> 的<em>Meeting up</em> 也结识了不少新朋友，听了他们不同人生经历感触还是挺深的。读书的话这么一看似乎是有点少了，大部分都是杂志，技术方面对 <em>k8s</em> 架构了解了一下，也不再只局限于架构。小说只完成了两本，其实小说应该至少15+的。</p>\n<h3 id=\"退掉好多微信群\"><a href=\"#退掉好多微信群\" class=\"headerlink\" title=\"退掉好多微信群\"></a>退掉好多微信群</h3><p>年度的某个周末，我做了一个重大决定：退掉大部分群，简化社交。<br>截止到2021年末微信加了很多很多的群，大部分都是同事群。因为都是和工作无关，所以离职后也没有退，还有一些在其他场合加入的。<br>也许是自己无法做到让内心足够的平静，查看多个群的内容每天占据了相当可观的时间，虽然确实有一些内容比较有用，但这样的状态也不是自己所理想的。<br>有考虑过退掉这么多群带来的弊端，比如技术领域的滞后，以及社交能力的下滑。然而最后还是这么做了。<br>一直以来理想的状态是每周可以静心读一到两本小说，或者半月通读一本技术书籍；每天弹半个小时到一个小时吉他，然后做一定量的运动。<br>如果每隔几分钟就想看一下群消息，担心错过什么重要信息，那我可能一直达不到理想的状态了。<br>基于以上考虑，目前还是选择放弃一部分社交，多出来的时间调节一下自己，哪怕只是在躺着什么也不做，什么也不想。</p>\n<h3 id=\"2022年\"><a href=\"#2022年\" class=\"headerlink\" title=\"2022年\"></a>2022年</h3><p>读书前置清单：</p>\n<ul>\n<li>《幻夜》（一周）</li>\n<li>《重构》（一个月）</li>\n<li>《放学后》（一周）</li>\n<li>《大秦帝国》（三个月）</li>\n<li>《why we sleep》（两个月）<br>先规划半年的吧，读书量按周末时间来估的</li>\n</ul>\n<p>技术</p>\n<ul>\n<li>SRE - Google 运维解密</li>\n<li>深入了解 Proxyless Service Mesh 相关技术</li>\n<li>一周两道算法练习</li>\n<li>读gin源码</li>\n<li>深度学习mysql</li>\n</ul>\n<p>开源</p>\n<ul>\n<li>参与到kratos</li>\n<li>rqalpha</li>\n</ul>\n<p>户外运动（玩）</p>\n<ul>\n<li>排牙山</li>\n<li>广州蹦极</li>\n<li>七娘山</li>\n</ul>\n<p>音乐</p>\n<ul>\n<li>学习乐理</li>\n</ul>\n<p>健身<br>目前每天晚上是固定2组简单的运动：每组40次哑铃（单手1.75KG），80个仰卧起坐以及30个俯卧撑。<br>二月结束的时候希望达到每组50次哑铃（单手2.5KG），100个仰卧起坐以及40个俯卧撑。目前先这么定，哑铃的目标感觉有点高了，先挂着吧。</p>\n<h3 id=\"尝试\"><a href=\"#尝试\" class=\"headerlink\" title=\"尝试\"></a>尝试</h3><p>尝试做一些自己从来没做过的方向，年前听了<a href=\"https://uxcoffee.com/episode/74\">100天计划，你可以完成什么？</a>播客，觉得很有意思，几位主播都用100天尝试自己从未涉及的领域，100天后的效果还是挺好的。能把一件自己觉得有意思的事连续100天不间断做下来，第二个100天就容易很多了。从来没有期望自己做什么惊天动地的大事，只是不想每天过着重复的生活，很多冲动的决定，只是希望生活可以丰富一点。</p>\n<h2 id=\"end\"><a href=\"#end\" class=\"headerlink\" title=\"end\"></a>end</h2><p>最近看到一句很不错的话:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>一个人最好的状态莫过于,眼里写满了故事,脸上却不见风霜。</p>\n</blockquote>\n</blockquote>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<p>本来是打算在年末的最后一天总结一下的，结果跨年玩到了3点多才回后瑞，那就元旦的上午抽点时间回顾2021年的经历，顺便规划一下2022年。</p>\n<p>按理来说总结应该是简单的，不过多写点其实也挺好的，很久之后再看回过头再看自己写的东西其实挺有意思的。</p>\n<p>2021年的春节是在朋友家过的，在过年的前一个月疫情突然又严重了，老妈说太原那边看样子回不去了，票可以退掉。想到从来没有一个人在外地过年，还是有点新鲜的，所以后来虽然确定可以回去了，也果断选择留在深圳过年。</p>\n<p>那天上午在家玩了几局游戏，下午就出门了，目的地没有想好，先去宝安图书馆转了一下，本以为十分冷清的大厅竟坐满了人，大部分是准备考试的，考研、考证、可能考公也不一定。在书架上挑了本讲宇宙天体的书看了两个小时，不得不说有插画的书，特别是这种讲太空星体的更能让人耐心看下去。<br>四点多到了深圳湾公园，海边也有不少人的，也不奇怪，毕竟图书馆都能有那么多人。有不少人在拍照,找了自认为风景还可以的角度拍了几张，选了一张贴上。<img src=\"https://img-blog.csdnimg.cn/710bbf5d98db45a2a41a47dd69b84d55.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAR2ludGFfeA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"深圳湾公园\"><br>七点回去吃年夜饭，朋友准备的还是很不错的，菜式比较丰富，名字叫不上来，十分好吃。期间聊了一下工作，还有以前的经历，每个人都有自己的过去，以前一直认为朋友身在一个互联网大厂，在深圳定居已经让不少人羡慕了，但北京的几年辛酸加上个人的性格，就不在 <em>Tencent</em> 想必也差不到哪去。朋友说很多年前他也曾沉迷游戏，为了充钱过年也没有回家，家里还一度以为他在好好读书。那天聊了很久，年夜饭就这么结束了。过年的两个星期把《无心法师》追完了。</p>\n<p>三月和同事去玩了恐怖密室，《鬼打墙》。之前是没有玩过恐怖主题密室的，表面平静，实际感觉还是有点吓人的，有个女生主动 <em>solo</em> 最后一关，我们还是佩服她的勇气，后来又去了个恐怖主题的，但都没有第一家那种感觉了。</p>\n<p>六月组织了梅林-塘朗山穿越，一行七人，都是入门级玩家，有四位竟然只带了一瓶水就来爬山了，只能说想法比较年经，不过能让他们体会到了躺平是多么美好的一件事，后来这种强度的运动他们再也不参加了。还有一位行进比较慢就到终点等我们了。同事体力相当好，我被丢到了后面，后来带着我的所有补给和唯一的通信工具上了山顶，以至于我后来没有体力走下去了，也联系不上同事，还遇到了分叉口，被迫下山了。下山后找了家小商店，八宝粥火腿什么的各种吃，顺便加了根老冰棍,然后给家里打电话说没钱结账了，家里多转了100块打车回家，用电脑上的微信联系到了同事。“你太能折腾了，自己都这样还叫同事，下次一个人就好了，自己丢了不要紧，别把其他人捎带了。”依稀记得后来老妈是说么说的。再后来就把阳台山，梧桐山也爬完了，之后考虑挑战更高难度的山。<br><img src=\"https://img-blog.csdnimg.cn/ab829a6c6e7b4ba396584dc4bef9c32f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAR2ludGFfeA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>七月份入门了围棋，围棋以前总觉得很高深，不好上手。其实围棋对新人来说还是很友好的，成为国手就是另一回事了。</p>\n<p>十一月底换了工作，转了 <em>go</em> 的开发。比较感谢 <em>leader</em> 一年多的关照，还有公司的其他同事也比较好沟通，离职一个多月了有时做梦还能梦到公司的猫。</p>\n<p>十二月初捡起了闲置几个月的吉他，自买回来就没弹过几次，不过整个十二月还是连续下来了。</p>\n<p>读书清单如下：</p>\n<ul>\n<li>《幻夜》30%</li>\n<li>《程序员修炼之道》40%</li>\n<li>《我曾走在崩溃的边缘》100%</li>\n<li>《明朝那些事儿》100%</li>\n<li>《活着》100%</li>\n<li>《读者》、《特别关注》若干</li>\n</ul>\n<p>2021年总体来说相对2020年还是丰富了很多，2020年的周末基本都是在家里宅的。<em>Pycon China</em> 的<em>Meeting up</em> 也结识了不少新朋友，听了他们不同人生经历感触还是挺深的。读书的话这么一看似乎是有点少了，大部分都是杂志，技术方面对 <em>k8s</em> 架构了解了一下，也不再只局限于架构。小说只完成了两本，其实小说应该至少15+的。</p>\n<h3 id=\"退掉好多微信群\"><a href=\"#退掉好多微信群\" class=\"headerlink\" title=\"退掉好多微信群\"></a>退掉好多微信群</h3><p>年度的某个周末，我做了一个重大决定：退掉大部分群，简化社交。<br>截止到2021年末微信加了很多很多的群，大部分都是同事群。因为都是和工作无关，所以离职后也没有退，还有一些在其他场合加入的。<br>也许是自己无法做到让内心足够的平静，查看多个群的内容每天占据了相当可观的时间，虽然确实有一些内容比较有用，但这样的状态也不是自己所理想的。<br>有考虑过退掉这么多群带来的弊端，比如技术领域的滞后，以及社交能力的下滑。然而最后还是这么做了。<br>一直以来理想的状态是每周可以静心读一到两本小说，或者半月通读一本技术书籍；每天弹半个小时到一个小时吉他，然后做一定量的运动。<br>如果每隔几分钟就想看一下群消息，担心错过什么重要信息，那我可能一直达不到理想的状态了。<br>基于以上考虑，目前还是选择放弃一部分社交，多出来的时间调节一下自己，哪怕只是在躺着什么也不做，什么也不想。</p>\n<h3 id=\"2022年\"><a href=\"#2022年\" class=\"headerlink\" title=\"2022年\"></a>2022年</h3><p>读书前置清单：</p>\n<ul>\n<li>《幻夜》（一周）</li>\n<li>《重构》（一个月）</li>\n<li>《放学后》（一周）</li>\n<li>《大秦帝国》（三个月）</li>\n<li>《why we sleep》（两个月）<br>先规划半年的吧，读书量按周末时间来估的</li>\n</ul>\n<p>技术</p>\n<ul>\n<li>SRE - Google 运维解密</li>\n<li>深入了解 Proxyless Service Mesh 相关技术</li>\n<li>一周两道算法练习</li>\n<li>读gin源码</li>\n<li>深度学习mysql</li>\n</ul>\n<p>开源</p>\n<ul>\n<li>参与到kratos</li>\n<li>rqalpha</li>\n</ul>\n<p>户外运动（玩）</p>\n<ul>\n<li>排牙山</li>\n<li>广州蹦极</li>\n<li>七娘山</li>\n</ul>\n<p>音乐</p>\n<ul>\n<li>学习乐理</li>\n</ul>\n<p>健身<br>目前每天晚上是固定2组简单的运动：每组40次哑铃（单手1.75KG），80个仰卧起坐以及30个俯卧撑。<br>二月结束的时候希望达到每组50次哑铃（单手2.5KG），100个仰卧起坐以及40个俯卧撑。目前先这么定，哑铃的目标感觉有点高了，先挂着吧。</p>\n<h3 id=\"尝试\"><a href=\"#尝试\" class=\"headerlink\" title=\"尝试\"></a>尝试</h3><p>尝试做一些自己从来没做过的方向，年前听了<a href=\"https://uxcoffee.com/episode/74\">100天计划，你可以完成什么？</a>播客，觉得很有意思，几位主播都用100天尝试自己从未涉及的领域，100天后的效果还是挺好的。能把一件自己觉得有意思的事连续100天不间断做下来，第二个100天就容易很多了。从来没有期望自己做什么惊天动地的大事，只是不想每天过着重复的生活，很多冲动的决定，只是希望生活可以丰富一点。</p>\n<h2 id=\"end\"><a href=\"#end\" class=\"headerlink\" title=\"end\"></a>end</h2><p>最近看到一句很不错的话:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>一个人最好的状态莫过于,眼里写满了故事,脸上却不见风霜。</p>\n</blockquote>\n</blockquote>\n</blockquote>\n"},{"title":"2022已过三分之一","date":"2022-05-08T00:09:20.000Z","author":"Ginta","img":"https://img.ginta.top/src%3Dhttp___gss0.baidu.com_-Po3dSag_xI4khGko9WTAnF6hhy_zhidao_pic_item_f7246b600c338744d0431315570fd9f9d62aa0d0.jpg%26refer%3Dhttp___gss0.baidu.jpeg","top":false,"hide":false,"cover":false,"coverImg":"https://img.ginta.top/src%3Dhttp___gss0.baidu.com_-Po3dSag_xI4khGko9WTAnF6hhy_zhidao_pic_item_f7246b600c338744d0431315570fd9f9d62aa0d0.jpg%26refer%3Dhttp___gss0.baidu.jpeg","toc":false,"mathjax":false,"summary":null,"_content":"\n## 前言\n起早了，闲来无事刷一下 *blog*，看了看年初写的总结，决定复盘一下，近乎鞭尸的行为，先附上[2021年总结](https://ginta.top/2022/01/01/2022/)。其实每过一段时间看看之前写的博客还蛮有意思的。\n## 运动\n从年后到五月，只爬了一次山，更多的是出去吃个烧烤什么的，爬山的次数无法和2021年同期相比。\n目前可以做到80个仰卧起坐，40次哑铃（单手5KG）,30个俯卧撑，断断续续，并非每天，偶尔朋友吃饭回来11点了，就没有做了，之后的话尽量保证10.30之前回家。\n\n## 读书\n年初的时候在 *twitter* 上看到一位老哥的总结，感触挺多的。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/a3efd977f05e448a8e3d20e16de08286.png)\n当时看的时候还是挺感慨的，现在看也有同感。2021看完整读过的书不到10本，当然是除去了读者和特别关注等杂志，杂志也不是每篇都看。\n对比了一下自己：\n- 单身和朋友合租，但基本也无人打扰\n- 有一定社交，2021年还是参与一些群聊的\n- 偶尔玩玩游戏\n- 节假日会出去转转吧，爬山什么的\n\n那天看了看书架上吃灰已久的书，做出了一些调整，周末玩游戏少了，退出了 *N* 个群，少花点时间水群。这在[2021年总结](https://ginta.top/2022/01/01/2022/) 中有提到。空出来的时间以期读更多的书。\n从一月到五月，也就是写这篇文章的时候，读书情况如下：\n\n- 《幻夜》100%\n- 《新参者》 100%\n- 《东方快车谋杀案》100%\n- 《大秦帝国一（上）》100%\n- 《大秦帝国一（下）》100%\n- 《大秦帝国二（上）》100%\n- 《秘密》100%\n- 《三体一》100%\n- 《三体二》100%\n- 《三体三》100%\n- 《大秦帝国二（下）》40%\n- 《刀锋》35%\n\n## 技术\n《kubernetes权威指南》时不时翻一下。\n## 音乐\n🎸偶尔在弹，乐理没有在看。。。\n\n## 最后\n阶段性的复盘还是很有必要的，之后每周写一下周报吧。\n","source":"_posts/2022已过三分之一.md","raw":"---\ntitle: 2022已过三分之一\ndate: 2022-05-08 08:09:20\nauthor: Ginta\nimg: https://img.ginta.top/src%3Dhttp___gss0.baidu.com_-Po3dSag_xI4khGko9WTAnF6hhy_zhidao_pic_item_f7246b600c338744d0431315570fd9f9d62aa0d0.jpg%26refer%3Dhttp___gss0.baidu.jpeg\ntop: false\nhide: false\ncover: false\ncoverImg: https://img.ginta.top/src%3Dhttp___gss0.baidu.com_-Po3dSag_xI4khGko9WTAnF6hhy_zhidao_pic_item_f7246b600c338744d0431315570fd9f9d62aa0d0.jpg%26refer%3Dhttp___gss0.baidu.jpeg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: 生活\n---\n\n## 前言\n起早了，闲来无事刷一下 *blog*，看了看年初写的总结，决定复盘一下，近乎鞭尸的行为，先附上[2021年总结](https://ginta.top/2022/01/01/2022/)。其实每过一段时间看看之前写的博客还蛮有意思的。\n## 运动\n从年后到五月，只爬了一次山，更多的是出去吃个烧烤什么的，爬山的次数无法和2021年同期相比。\n目前可以做到80个仰卧起坐，40次哑铃（单手5KG）,30个俯卧撑，断断续续，并非每天，偶尔朋友吃饭回来11点了，就没有做了，之后的话尽量保证10.30之前回家。\n\n## 读书\n年初的时候在 *twitter* 上看到一位老哥的总结，感触挺多的。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/a3efd977f05e448a8e3d20e16de08286.png)\n当时看的时候还是挺感慨的，现在看也有同感。2021看完整读过的书不到10本，当然是除去了读者和特别关注等杂志，杂志也不是每篇都看。\n对比了一下自己：\n- 单身和朋友合租，但基本也无人打扰\n- 有一定社交，2021年还是参与一些群聊的\n- 偶尔玩玩游戏\n- 节假日会出去转转吧，爬山什么的\n\n那天看了看书架上吃灰已久的书，做出了一些调整，周末玩游戏少了，退出了 *N* 个群，少花点时间水群。这在[2021年总结](https://ginta.top/2022/01/01/2022/) 中有提到。空出来的时间以期读更多的书。\n从一月到五月，也就是写这篇文章的时候，读书情况如下：\n\n- 《幻夜》100%\n- 《新参者》 100%\n- 《东方快车谋杀案》100%\n- 《大秦帝国一（上）》100%\n- 《大秦帝国一（下）》100%\n- 《大秦帝国二（上）》100%\n- 《秘密》100%\n- 《三体一》100%\n- 《三体二》100%\n- 《三体三》100%\n- 《大秦帝国二（下）》40%\n- 《刀锋》35%\n\n## 技术\n《kubernetes权威指南》时不时翻一下。\n## 音乐\n🎸偶尔在弹，乐理没有在看。。。\n\n## 最后\n阶段性的复盘还是很有必要的，之后每周写一下周报吧。\n","slug":"2022已过三分之一","published":1,"updated":"2022-08-13T05:54:58.272Z","_id":"cl6p6180r000atkscauc4ap1v","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>起早了，闲来无事刷一下 <em>blog</em>，看了看年初写的总结，决定复盘一下，近乎鞭尸的行为，先附上<a href=\"https://ginta.top/2022/01/01/2022/\">2021年总结</a>。其实每过一段时间看看之前写的博客还蛮有意思的。</p>\n<h2 id=\"运动\"><a href=\"#运动\" class=\"headerlink\" title=\"运动\"></a>运动</h2><p>从年后到五月，只爬了一次山，更多的是出去吃个烧烤什么的，爬山的次数无法和2021年同期相比。<br>目前可以做到80个仰卧起坐，40次哑铃（单手5KG）,30个俯卧撑，断断续续，并非每天，偶尔朋友吃饭回来11点了，就没有做了，之后的话尽量保证10.30之前回家。</p>\n<h2 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h2><p>年初的时候在 <em>twitter</em> 上看到一位老哥的总结，感触挺多的。<br><img src=\"https://img-blog.csdnimg.cn/a3efd977f05e448a8e3d20e16de08286.png\" alt=\"在这里插入图片描述\"><br>当时看的时候还是挺感慨的，现在看也有同感。2021看完整读过的书不到10本，当然是除去了读者和特别关注等杂志，杂志也不是每篇都看。<br>对比了一下自己：</p>\n<ul>\n<li>单身和朋友合租，但基本也无人打扰</li>\n<li>有一定社交，2021年还是参与一些群聊的</li>\n<li>偶尔玩玩游戏</li>\n<li>节假日会出去转转吧，爬山什么的</li>\n</ul>\n<p>那天看了看书架上吃灰已久的书，做出了一些调整，周末玩游戏少了，退出了 <em>N</em> 个群，少花点时间水群。这在<a href=\"https://ginta.top/2022/01/01/2022/\">2021年总结</a> 中有提到。空出来的时间以期读更多的书。<br>从一月到五月，也就是写这篇文章的时候，读书情况如下：</p>\n<ul>\n<li>《幻夜》100%</li>\n<li>《新参者》 100%</li>\n<li>《东方快车谋杀案》100%</li>\n<li>《大秦帝国一（上）》100%</li>\n<li>《大秦帝国一（下）》100%</li>\n<li>《大秦帝国二（上）》100%</li>\n<li>《秘密》100%</li>\n<li>《三体一》100%</li>\n<li>《三体二》100%</li>\n<li>《三体三》100%</li>\n<li>《大秦帝国二（下）》40%</li>\n<li>《刀锋》35%</li>\n</ul>\n<h2 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h2><p>《kubernetes权威指南》时不时翻一下。</p>\n<h2 id=\"音乐\"><a href=\"#音乐\" class=\"headerlink\" title=\"音乐\"></a>音乐</h2><p>🎸偶尔在弹，乐理没有在看。。。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>阶段性的复盘还是很有必要的，之后每周写一下周报吧。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>起早了，闲来无事刷一下 <em>blog</em>，看了看年初写的总结，决定复盘一下，近乎鞭尸的行为，先附上<a href=\"https://ginta.top/2022/01/01/2022/\">2021年总结</a>。其实每过一段时间看看之前写的博客还蛮有意思的。</p>\n<h2 id=\"运动\"><a href=\"#运动\" class=\"headerlink\" title=\"运动\"></a>运动</h2><p>从年后到五月，只爬了一次山，更多的是出去吃个烧烤什么的，爬山的次数无法和2021年同期相比。<br>目前可以做到80个仰卧起坐，40次哑铃（单手5KG）,30个俯卧撑，断断续续，并非每天，偶尔朋友吃饭回来11点了，就没有做了，之后的话尽量保证10.30之前回家。</p>\n<h2 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h2><p>年初的时候在 <em>twitter</em> 上看到一位老哥的总结，感触挺多的。<br><img src=\"https://img-blog.csdnimg.cn/a3efd977f05e448a8e3d20e16de08286.png\" alt=\"在这里插入图片描述\"><br>当时看的时候还是挺感慨的，现在看也有同感。2021看完整读过的书不到10本，当然是除去了读者和特别关注等杂志，杂志也不是每篇都看。<br>对比了一下自己：</p>\n<ul>\n<li>单身和朋友合租，但基本也无人打扰</li>\n<li>有一定社交，2021年还是参与一些群聊的</li>\n<li>偶尔玩玩游戏</li>\n<li>节假日会出去转转吧，爬山什么的</li>\n</ul>\n<p>那天看了看书架上吃灰已久的书，做出了一些调整，周末玩游戏少了，退出了 <em>N</em> 个群，少花点时间水群。这在<a href=\"https://ginta.top/2022/01/01/2022/\">2021年总结</a> 中有提到。空出来的时间以期读更多的书。<br>从一月到五月，也就是写这篇文章的时候，读书情况如下：</p>\n<ul>\n<li>《幻夜》100%</li>\n<li>《新参者》 100%</li>\n<li>《东方快车谋杀案》100%</li>\n<li>《大秦帝国一（上）》100%</li>\n<li>《大秦帝国一（下）》100%</li>\n<li>《大秦帝国二（上）》100%</li>\n<li>《秘密》100%</li>\n<li>《三体一》100%</li>\n<li>《三体二》100%</li>\n<li>《三体三》100%</li>\n<li>《大秦帝国二（下）》40%</li>\n<li>《刀锋》35%</li>\n</ul>\n<h2 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h2><p>《kubernetes权威指南》时不时翻一下。</p>\n<h2 id=\"音乐\"><a href=\"#音乐\" class=\"headerlink\" title=\"音乐\"></a>音乐</h2><p>🎸偶尔在弹，乐理没有在看。。。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>阶段性的复盘还是很有必要的，之后每周写一下周报吧。</p>\n"},{"title":"Borg状态共享","date":"2020-09-26T07:54:30.000Z","author":"Ginta","img":"http://img.ginta.top/qinshi2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/qinshi2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 前言\r\n有一个类 **Singleton** ，我们需要它所有的子类，以及子类的子类所有实例共享同一状态。\r\n```\r\nclass Singleton(object):\r\n    state = 1\r\n    def __init__(self, state):\r\n        self.state = state\r\n\r\nclass SingletonA(Singleton):\r\n    pass\r\n\r\nclass SingletonB(Singleton):\r\n    pass\r\n\r\na = SingletonA(1)\r\nb = SingletonB(2)\r\n\r\n\r\na = SingletonA(1)\r\nb = SingletonB(2)\r\nprint(\"a.state:\", a.state)\r\nprint(\"b.state:\",b.state)\r\na.state = 666\r\nprint(\"new a.state:\",a.state)\r\nprint(\"new b.state:\",b.state)\r\n```\r\n输出结果\r\n```\r\na.state: 1\r\nb.state: 2\r\nnew a.state: 666\r\nnew b.state: 2\r\n```\r\n可以看到，虽然我们把 *a* 的状态改变了，但是 *b* 的状态并没有改变\r\n## 解决\r\n如果我们想做到修改 *a* 的状态以后， *b* 的状态也随之修改，可以使用 **Borg** 模式，从父类的 *__dict__* 入手\r\n```\r\nclass Borg(object):\r\n    state = 0\r\n    __share_dict = {}\r\n    def __init__(self, state):\r\n        self.__dict__ = self.__share_dict\r\n        self.state = state\r\nclass BorgA(Borg):\r\n    pass\r\n\r\nclass BorgB(Borg):\r\n    pass\r\n\r\nold = Borg(7)\r\na = BorgA(1)\r\nb = BorgB(2)\r\nprint(\"old.state:\", a.state)\r\nprint(\"a.state:\", a.state)\r\nprint(\"b.state:\",b.state)\r\na.state = 666\r\nprint(\"new old.state:\",a.state)\r\nprint(\"new a.state:\",a.state)\r\nprint(\"new b.state:\",b.state)\r\n```\r\n## 输出\r\n```\r\nold.state: 2\r\na.state: 2\r\nb.state: 2\r\nnew old.state: 666\r\nnew a.state: 666\r\nnew b.state: 666\r\n```\r\n显然，当我们声明  `self.__dict__ = self.__share_dict` 的时候，所有 **Borg** 以及他的子类实例就共享同一个 **state** 属性了。","source":"_posts/Borg状态共享.md","raw":"---\ntitle: Borg状态共享\ndate: 2020-09-26 15:54:30\nauthor: Ginta\nimg: http://img.ginta.top/qinshi2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/qinshi2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - python\ncategories: python\n---\n## 前言\r\n有一个类 **Singleton** ，我们需要它所有的子类，以及子类的子类所有实例共享同一状态。\r\n```\r\nclass Singleton(object):\r\n    state = 1\r\n    def __init__(self, state):\r\n        self.state = state\r\n\r\nclass SingletonA(Singleton):\r\n    pass\r\n\r\nclass SingletonB(Singleton):\r\n    pass\r\n\r\na = SingletonA(1)\r\nb = SingletonB(2)\r\n\r\n\r\na = SingletonA(1)\r\nb = SingletonB(2)\r\nprint(\"a.state:\", a.state)\r\nprint(\"b.state:\",b.state)\r\na.state = 666\r\nprint(\"new a.state:\",a.state)\r\nprint(\"new b.state:\",b.state)\r\n```\r\n输出结果\r\n```\r\na.state: 1\r\nb.state: 2\r\nnew a.state: 666\r\nnew b.state: 2\r\n```\r\n可以看到，虽然我们把 *a* 的状态改变了，但是 *b* 的状态并没有改变\r\n## 解决\r\n如果我们想做到修改 *a* 的状态以后， *b* 的状态也随之修改，可以使用 **Borg** 模式，从父类的 *__dict__* 入手\r\n```\r\nclass Borg(object):\r\n    state = 0\r\n    __share_dict = {}\r\n    def __init__(self, state):\r\n        self.__dict__ = self.__share_dict\r\n        self.state = state\r\nclass BorgA(Borg):\r\n    pass\r\n\r\nclass BorgB(Borg):\r\n    pass\r\n\r\nold = Borg(7)\r\na = BorgA(1)\r\nb = BorgB(2)\r\nprint(\"old.state:\", a.state)\r\nprint(\"a.state:\", a.state)\r\nprint(\"b.state:\",b.state)\r\na.state = 666\r\nprint(\"new old.state:\",a.state)\r\nprint(\"new a.state:\",a.state)\r\nprint(\"new b.state:\",b.state)\r\n```\r\n## 输出\r\n```\r\nold.state: 2\r\na.state: 2\r\nb.state: 2\r\nnew old.state: 666\r\nnew a.state: 666\r\nnew b.state: 666\r\n```\r\n显然，当我们声明  `self.__dict__ = self.__share_dict` 的时候，所有 **Borg** 以及他的子类实例就共享同一个 **state** 属性了。","slug":"Borg状态共享","published":1,"updated":"2022-08-11T12:49:48.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6180s000dtksc3x9i8kql","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有一个类 <strong>Singleton</strong> ，我们需要它所有的子类，以及子类的子类所有实例共享同一状态。</p>\n<pre><code>class Singleton(object):\n    state = 1\n    def __init__(self, state):\n        self.state = state\n\nclass SingletonA(Singleton):\n    pass\n\nclass SingletonB(Singleton):\n    pass\n\na = SingletonA(1)\nb = SingletonB(2)\n\n\na = SingletonA(1)\nb = SingletonB(2)\nprint(&quot;a.state:&quot;, a.state)\nprint(&quot;b.state:&quot;,b.state)\na.state = 666\nprint(&quot;new a.state:&quot;,a.state)\nprint(&quot;new b.state:&quot;,b.state)\n</code></pre>\n<p>输出结果</p>\n<pre><code>a.state: 1\nb.state: 2\nnew a.state: 666\nnew b.state: 2\n</code></pre>\n<p>可以看到，虽然我们把 <em>a</em> 的状态改变了，但是 <em>b</em> 的状态并没有改变</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>如果我们想做到修改 <em>a</em> 的状态以后， <em>b</em> 的状态也随之修改，可以使用 <strong>Borg</strong> 模式，从父类的 <em><strong>dict</strong></em> 入手</p>\n<pre><code>class Borg(object):\n    state = 0\n    __share_dict = &#123;&#125;\n    def __init__(self, state):\n        self.__dict__ = self.__share_dict\n        self.state = state\nclass BorgA(Borg):\n    pass\n\nclass BorgB(Borg):\n    pass\n\nold = Borg(7)\na = BorgA(1)\nb = BorgB(2)\nprint(&quot;old.state:&quot;, a.state)\nprint(&quot;a.state:&quot;, a.state)\nprint(&quot;b.state:&quot;,b.state)\na.state = 666\nprint(&quot;new old.state:&quot;,a.state)\nprint(&quot;new a.state:&quot;,a.state)\nprint(&quot;new b.state:&quot;,b.state)\n</code></pre>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><pre><code>old.state: 2\na.state: 2\nb.state: 2\nnew old.state: 666\nnew a.state: 666\nnew b.state: 666\n</code></pre>\n<p>显然，当我们声明  <code>self.__dict__ = self.__share_dict</code> 的时候，所有 <strong>Borg</strong> 以及他的子类实例就共享同一个 <strong>state</strong> 属性了。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有一个类 <strong>Singleton</strong> ，我们需要它所有的子类，以及子类的子类所有实例共享同一状态。</p>\n<pre><code>class Singleton(object):\n    state = 1\n    def __init__(self, state):\n        self.state = state\n\nclass SingletonA(Singleton):\n    pass\n\nclass SingletonB(Singleton):\n    pass\n\na = SingletonA(1)\nb = SingletonB(2)\n\n\na = SingletonA(1)\nb = SingletonB(2)\nprint(&quot;a.state:&quot;, a.state)\nprint(&quot;b.state:&quot;,b.state)\na.state = 666\nprint(&quot;new a.state:&quot;,a.state)\nprint(&quot;new b.state:&quot;,b.state)\n</code></pre>\n<p>输出结果</p>\n<pre><code>a.state: 1\nb.state: 2\nnew a.state: 666\nnew b.state: 2\n</code></pre>\n<p>可以看到，虽然我们把 <em>a</em> 的状态改变了，但是 <em>b</em> 的状态并没有改变</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>如果我们想做到修改 <em>a</em> 的状态以后， <em>b</em> 的状态也随之修改，可以使用 <strong>Borg</strong> 模式，从父类的 <em><strong>dict</strong></em> 入手</p>\n<pre><code>class Borg(object):\n    state = 0\n    __share_dict = &#123;&#125;\n    def __init__(self, state):\n        self.__dict__ = self.__share_dict\n        self.state = state\nclass BorgA(Borg):\n    pass\n\nclass BorgB(Borg):\n    pass\n\nold = Borg(7)\na = BorgA(1)\nb = BorgB(2)\nprint(&quot;old.state:&quot;, a.state)\nprint(&quot;a.state:&quot;, a.state)\nprint(&quot;b.state:&quot;,b.state)\na.state = 666\nprint(&quot;new old.state:&quot;,a.state)\nprint(&quot;new a.state:&quot;,a.state)\nprint(&quot;new b.state:&quot;,b.state)\n</code></pre>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><pre><code>old.state: 2\na.state: 2\nb.state: 2\nnew old.state: 666\nnew a.state: 666\nnew b.state: 666\n</code></pre>\n<p>显然，当我们声明  <code>self.__dict__ = self.__share_dict</code> 的时候，所有 <strong>Borg</strong> 以及他的子类实例就共享同一个 <strong>state</strong> 属性了。</p>\n"},{"title":"Class-based views","date":"2019-11-23T04:17:31.000Z","author":"Ginta","img":"http://img.ginta.top/dragin1.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/dragin1.jpg","toc":false,"mathjax":false,"summary":null,"_content":"### 前言 \r\n*Django* 中 **函数视图** 中有个 *request* 对象，封装了一些请求的数据，比如 **post** 请求上传来的参数或者当前用户数据：\r\n```\r\ndef index(request, *args, **kwargs):\r\n    print(args)\r\n    return HttpResponse(\"hello\")\r\n```\r\n在给博客新增第三方登录的时候后端要进行一些用户数据的处理，比如头像链接拼接，而项目的视图函数采用的是 **类视图**。\r\n### 解决\r\n一开始没有找到 **User** 对象，然后看了看 *View* 类的封装，发现有这么一段：\r\n```\r\ndef setup(self, request, *args, **kwargs):\r\n    \"\"\"Initialize attributes shared by all view methods.\"\"\"\r\n    self.request = request\r\n    self.args = args\r\n    self.kwargs = kwargs\r\n```\r\n显然在 **类视图** 中 **request** 对象被封装成一个属性了，那调用的时候就用 **self.request** 来代替原来的 **request**，比如获取当前用户就用 **self.request.user** 即可。\r\n\r\n### 结语\r\n遇到问题直接看源码有时候比百度要来得快一些。","source":"_posts/Class-based views.md","raw":"---\ntitle: Class-based views\ndate: 2019-11-23 12:17:31\nauthor: Ginta\nimg: http://img.ginta.top/dragin1.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/dragin1.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - Django\ncategories: Django\n---\n### 前言 \r\n*Django* 中 **函数视图** 中有个 *request* 对象，封装了一些请求的数据，比如 **post** 请求上传来的参数或者当前用户数据：\r\n```\r\ndef index(request, *args, **kwargs):\r\n    print(args)\r\n    return HttpResponse(\"hello\")\r\n```\r\n在给博客新增第三方登录的时候后端要进行一些用户数据的处理，比如头像链接拼接，而项目的视图函数采用的是 **类视图**。\r\n### 解决\r\n一开始没有找到 **User** 对象，然后看了看 *View* 类的封装，发现有这么一段：\r\n```\r\ndef setup(self, request, *args, **kwargs):\r\n    \"\"\"Initialize attributes shared by all view methods.\"\"\"\r\n    self.request = request\r\n    self.args = args\r\n    self.kwargs = kwargs\r\n```\r\n显然在 **类视图** 中 **request** 对象被封装成一个属性了，那调用的时候就用 **self.request** 来代替原来的 **request**，比如获取当前用户就用 **self.request.user** 即可。\r\n\r\n### 结语\r\n遇到问题直接看源码有时候比百度要来得快一些。","slug":"Class-based views","published":1,"updated":"2022-08-11T12:49:48.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6180s000etksc4cu99s4j","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p><em>Django</em> 中 <strong>函数视图</strong> 中有个 <em>request</em> 对象，封装了一些请求的数据，比如 <strong>post</strong> 请求上传来的参数或者当前用户数据：</p>\n<pre><code>def index(request, *args, **kwargs):\n    print(args)\n    return HttpResponse(&quot;hello&quot;)\n</code></pre>\n<p>在给博客新增第三方登录的时候后端要进行一些用户数据的处理，比如头像链接拼接，而项目的视图函数采用的是 <strong>类视图</strong>。</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>一开始没有找到 <strong>User</strong> 对象，然后看了看 <em>View</em> 类的封装，发现有这么一段：</p>\n<pre><code>def setup(self, request, *args, **kwargs):\n    &quot;&quot;&quot;Initialize attributes shared by all view methods.&quot;&quot;&quot;\n    self.request = request\n    self.args = args\n    self.kwargs = kwargs\n</code></pre>\n<p>显然在 <strong>类视图</strong> 中 <strong>request</strong> 对象被封装成一个属性了，那调用的时候就用 <strong>self.request</strong> 来代替原来的 <strong>request</strong>，比如获取当前用户就用 <strong>self.request.user</strong> 即可。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>遇到问题直接看源码有时候比百度要来得快一些。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p><em>Django</em> 中 <strong>函数视图</strong> 中有个 <em>request</em> 对象，封装了一些请求的数据，比如 <strong>post</strong> 请求上传来的参数或者当前用户数据：</p>\n<pre><code>def index(request, *args, **kwargs):\n    print(args)\n    return HttpResponse(&quot;hello&quot;)\n</code></pre>\n<p>在给博客新增第三方登录的时候后端要进行一些用户数据的处理，比如头像链接拼接，而项目的视图函数采用的是 <strong>类视图</strong>。</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>一开始没有找到 <strong>User</strong> 对象，然后看了看 <em>View</em> 类的封装，发现有这么一段：</p>\n<pre><code>def setup(self, request, *args, **kwargs):\n    &quot;&quot;&quot;Initialize attributes shared by all view methods.&quot;&quot;&quot;\n    self.request = request\n    self.args = args\n    self.kwargs = kwargs\n</code></pre>\n<p>显然在 <strong>类视图</strong> 中 <strong>request</strong> 对象被封装成一个属性了，那调用的时候就用 <strong>self.request</strong> 来代替原来的 <strong>request</strong>，比如获取当前用户就用 <strong>self.request.user</strong> 即可。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>遇到问题直接看源码有时候比百度要来得快一些。</p>\n"},{"title":"DRF JWT 配置","date":"2020-02-13T03:14:48.000Z","author":"Ginta","img":"http://img.ginta.top/lc2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/lc2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 前言\r\n原本 *github* 上有一个和 *drf* 版本对应的开源项目，最近在做项目的时候由于用的是新版本 *drf* ，特地到网上仓库看了一下之前使用的 [django-rest-framework-jwt](https://github.com/jpadilla/django-rest-framework-jwt) 已经停止维护了，幸运的是在该仓库的 *issues* 里发现了另一个持续维护的项目，[django-rest-framework-simplejwt](https://github.com/davesque/django-rest-framework-simplejwt)，目前已经支持 *django3.0*了。\r\n\r\n## 使用\r\n首先使用pip进行安装:\r\n```\r\npip install djangorestframework-simplejwt\r\n```\r\n\r\n然后在 DRF 配置加入以下内容\r\n```\r\nREST_FRAMEWORK = {\r\n    ...\r\n    'DEFAULT_AUTHENTICATION_CLASSES': (\r\n        ...\r\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\r\n    )\r\n    ...\r\n}\r\n```\r\n\r\n那么我们如何获取 *token* 呢？这时候需要配置一个路由来获取 *token*，直接配置到项目根目录下的 *urls.py* 里就好\r\n```\r\n# urls.py\r\nfrom rest_framework_simplejwt.views import (\r\n    TokenObtainPairView,\r\n    TokenRefreshView,\r\n)\r\n\r\nurlpatterns = [\r\n    ...\r\n    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\r\n    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\r\n    ...\r\n]\r\n```\r\n\r\n然后就可以使用 *postman* 来测试获取token了\r\n\r\n\r\n![](http://img.ginta.top/markdownx/2019/12/02/dc885b29-d663-49cb-9d68-3b9906e3e319.png)\r\n\r\n之后发送请求的时候使用上面的 **access**就好，不用每次请求都输入用户名密码\r\n\r\n\r\n![](http://img.ginta.top/markdownx/2019/12/02/0a7bb631-0a12-4cbb-8bbc-2e58c06b4251.png)\r\n\r\n请求的方式没有太多变化，就是在请求头中多了一个 *Authorization* ，对应的值格式是 Bearer+一个空格+access。\r\n**Bearer** 也可以改为其他的名字，这个是官方配置的值，比如我习惯用 **jwt** 开头，在项目的 *settings.py* 文件中加入如下配置\r\n```\r\n# settings.py\r\n# simple_jwt config\r\nSIMPLE_JWT = {\r\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\r\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\r\n    'ROTATE_REFRESH_TOKENS': False,\r\n    'BLACKLIST_AFTER_ROTATION': True,\r\n\r\n    'ALGORITHM': 'HS256',\r\n    'SIGNING_KEY': SECRET_KEY,\r\n    'VERIFYING_KEY': None,\r\n    'AUDIENCE': None,\r\n    'ISSUER': None,\r\n\r\n    'AUTH_HEADER_TYPES': ('Bearer',),\r\n    'USER_ID_FIELD': 'id',\r\n    'USER_ID_CLAIM': 'user_id',\r\n\r\n    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),\r\n    'TOKEN_TYPE_CLAIM': 'token_type',\r\n\r\n    'JTI_CLAIM': 'jti',\r\n\r\n    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',\r\n    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),\r\n    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),\r\n}\r\n```\r\n其他的参数看官方文档，这里举一个例子 *AUTH_HEADER_TYPES* 这里值为 *Bearer* 就是刚才提到 *Authorization* 开头要加的字符串，可以根据自己喜好设置。\r\n\r\n# 补充\r\n如果想让所有的路由都需要 jwt 认证，那么可以在 *drf* 配置中增加全局配置：\r\n```\r\n# DRF config\r\nREST_FRAMEWORK = {\r\n    # 其他内容\t\t\t\r\n    \"DEFAULT_PERMISSION_CLASSES\":[\r\n        'rest_framework.permissions.IsAuthenticated'\r\n    ]\r\n}\r\n```\r\n如果有的路由，比如用户注册的时候并没有办法获取 *token* ，那么该函数就跳过登陆验证，就是说该请求并不需要在 *header* 中添加 *Authorization*，那么我们可以这样：\r\n```\r\nfrom rest_framework import mixins\r\nfrom rest_framework.viewsets import GenericViewSet\r\nfrom django.contrib.auth import get_user_model\r\nfrom .serializers import UserSerializer\r\n\r\nUser = get_user_model()\r\n\r\nclass CreateUserView(GenericViewSet, mixins.CreateModelMixin):\r\n    \"\"\"\r\n    用户注册\r\n    \"\"\"\r\n    permission_classes = []\r\n    queryset = User.objects.all()\r\n    serializer_class = UserSerializer\r\n\r\n```\r\n把 *permission_classes* 赋值为空列表即可。","source":"_posts/DRF JWT 配置.md","raw":"---\ntitle: DRF JWT 配置\ndate: 2020-02-13 11:14:48\nauthor: Ginta\nimg: http://img.ginta.top/lc2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/lc2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - Django\ncategories: Django\n---\n## 前言\r\n原本 *github* 上有一个和 *drf* 版本对应的开源项目，最近在做项目的时候由于用的是新版本 *drf* ，特地到网上仓库看了一下之前使用的 [django-rest-framework-jwt](https://github.com/jpadilla/django-rest-framework-jwt) 已经停止维护了，幸运的是在该仓库的 *issues* 里发现了另一个持续维护的项目，[django-rest-framework-simplejwt](https://github.com/davesque/django-rest-framework-simplejwt)，目前已经支持 *django3.0*了。\r\n\r\n## 使用\r\n首先使用pip进行安装:\r\n```\r\npip install djangorestframework-simplejwt\r\n```\r\n\r\n然后在 DRF 配置加入以下内容\r\n```\r\nREST_FRAMEWORK = {\r\n    ...\r\n    'DEFAULT_AUTHENTICATION_CLASSES': (\r\n        ...\r\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\r\n    )\r\n    ...\r\n}\r\n```\r\n\r\n那么我们如何获取 *token* 呢？这时候需要配置一个路由来获取 *token*，直接配置到项目根目录下的 *urls.py* 里就好\r\n```\r\n# urls.py\r\nfrom rest_framework_simplejwt.views import (\r\n    TokenObtainPairView,\r\n    TokenRefreshView,\r\n)\r\n\r\nurlpatterns = [\r\n    ...\r\n    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\r\n    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\r\n    ...\r\n]\r\n```\r\n\r\n然后就可以使用 *postman* 来测试获取token了\r\n\r\n\r\n![](http://img.ginta.top/markdownx/2019/12/02/dc885b29-d663-49cb-9d68-3b9906e3e319.png)\r\n\r\n之后发送请求的时候使用上面的 **access**就好，不用每次请求都输入用户名密码\r\n\r\n\r\n![](http://img.ginta.top/markdownx/2019/12/02/0a7bb631-0a12-4cbb-8bbc-2e58c06b4251.png)\r\n\r\n请求的方式没有太多变化，就是在请求头中多了一个 *Authorization* ，对应的值格式是 Bearer+一个空格+access。\r\n**Bearer** 也可以改为其他的名字，这个是官方配置的值，比如我习惯用 **jwt** 开头，在项目的 *settings.py* 文件中加入如下配置\r\n```\r\n# settings.py\r\n# simple_jwt config\r\nSIMPLE_JWT = {\r\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\r\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\r\n    'ROTATE_REFRESH_TOKENS': False,\r\n    'BLACKLIST_AFTER_ROTATION': True,\r\n\r\n    'ALGORITHM': 'HS256',\r\n    'SIGNING_KEY': SECRET_KEY,\r\n    'VERIFYING_KEY': None,\r\n    'AUDIENCE': None,\r\n    'ISSUER': None,\r\n\r\n    'AUTH_HEADER_TYPES': ('Bearer',),\r\n    'USER_ID_FIELD': 'id',\r\n    'USER_ID_CLAIM': 'user_id',\r\n\r\n    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),\r\n    'TOKEN_TYPE_CLAIM': 'token_type',\r\n\r\n    'JTI_CLAIM': 'jti',\r\n\r\n    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',\r\n    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),\r\n    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),\r\n}\r\n```\r\n其他的参数看官方文档，这里举一个例子 *AUTH_HEADER_TYPES* 这里值为 *Bearer* 就是刚才提到 *Authorization* 开头要加的字符串，可以根据自己喜好设置。\r\n\r\n# 补充\r\n如果想让所有的路由都需要 jwt 认证，那么可以在 *drf* 配置中增加全局配置：\r\n```\r\n# DRF config\r\nREST_FRAMEWORK = {\r\n    # 其他内容\t\t\t\r\n    \"DEFAULT_PERMISSION_CLASSES\":[\r\n        'rest_framework.permissions.IsAuthenticated'\r\n    ]\r\n}\r\n```\r\n如果有的路由，比如用户注册的时候并没有办法获取 *token* ，那么该函数就跳过登陆验证，就是说该请求并不需要在 *header* 中添加 *Authorization*，那么我们可以这样：\r\n```\r\nfrom rest_framework import mixins\r\nfrom rest_framework.viewsets import GenericViewSet\r\nfrom django.contrib.auth import get_user_model\r\nfrom .serializers import UserSerializer\r\n\r\nUser = get_user_model()\r\n\r\nclass CreateUserView(GenericViewSet, mixins.CreateModelMixin):\r\n    \"\"\"\r\n    用户注册\r\n    \"\"\"\r\n    permission_classes = []\r\n    queryset = User.objects.all()\r\n    serializer_class = UserSerializer\r\n\r\n```\r\n把 *permission_classes* 赋值为空列表即可。","slug":"DRF JWT 配置","published":1,"updated":"2022-08-11T12:49:48.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6180t000itkscfaqa3ofj","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>原本 <em>github</em> 上有一个和 <em>drf</em> 版本对应的开源项目，最近在做项目的时候由于用的是新版本 <em>drf</em> ，特地到网上仓库看了一下之前使用的 <a href=\"https://github.com/jpadilla/django-rest-framework-jwt\">django-rest-framework-jwt</a> 已经停止维护了，幸运的是在该仓库的 <em>issues</em> 里发现了另一个持续维护的项目，<a href=\"https://github.com/davesque/django-rest-framework-simplejwt\">django-rest-framework-simplejwt</a>，目前已经支持 <em>django3.0</em>了。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>首先使用pip进行安装:</p>\n<pre><code>pip install djangorestframework-simplejwt\n</code></pre>\n<p>然后在 DRF 配置加入以下内容</p>\n<pre><code>REST_FRAMEWORK = &#123;\n    ...\n    &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: (\n        ...\n        &#39;rest_framework_simplejwt.authentication.JWTAuthentication&#39;,\n    )\n    ...\n&#125;\n</code></pre>\n<p>那么我们如何获取 <em>token</em> 呢？这时候需要配置一个路由来获取 <em>token</em>，直接配置到项目根目录下的 <em>urls.py</em> 里就好</p>\n<pre><code># urls.py\nfrom rest_framework_simplejwt.views import (\n    TokenObtainPairView,\n    TokenRefreshView,\n)\n\nurlpatterns = [\n    ...\n    path(&#39;api/token/&#39;, TokenObtainPairView.as_view(), name=&#39;token_obtain_pair&#39;),\n    path(&#39;api/token/refresh/&#39;, TokenRefreshView.as_view(), name=&#39;token_refresh&#39;),\n    ...\n]\n</code></pre>\n<p>然后就可以使用 <em>postman</em> 来测试获取token了</p>\n<p><img src=\"http://img.ginta.top/markdownx/2019/12/02/dc885b29-d663-49cb-9d68-3b9906e3e319.png\"></p>\n<p>之后发送请求的时候使用上面的 <strong>access</strong>就好，不用每次请求都输入用户名密码</p>\n<p><img src=\"http://img.ginta.top/markdownx/2019/12/02/0a7bb631-0a12-4cbb-8bbc-2e58c06b4251.png\"></p>\n<p>请求的方式没有太多变化，就是在请求头中多了一个 <em>Authorization</em> ，对应的值格式是 Bearer+一个空格+access。<br><strong>Bearer</strong> 也可以改为其他的名字，这个是官方配置的值，比如我习惯用 <strong>jwt</strong> 开头，在项目的 <em>settings.py</em> 文件中加入如下配置</p>\n<pre><code># settings.py\n# simple_jwt config\nSIMPLE_JWT = &#123;\n    &#39;ACCESS_TOKEN_LIFETIME&#39;: timedelta(minutes=5),\n    &#39;REFRESH_TOKEN_LIFETIME&#39;: timedelta(days=1),\n    &#39;ROTATE_REFRESH_TOKENS&#39;: False,\n    &#39;BLACKLIST_AFTER_ROTATION&#39;: True,\n\n    &#39;ALGORITHM&#39;: &#39;HS256&#39;,\n    &#39;SIGNING_KEY&#39;: SECRET_KEY,\n    &#39;VERIFYING_KEY&#39;: None,\n    &#39;AUDIENCE&#39;: None,\n    &#39;ISSUER&#39;: None,\n\n    &#39;AUTH_HEADER_TYPES&#39;: (&#39;Bearer&#39;,),\n    &#39;USER_ID_FIELD&#39;: &#39;id&#39;,\n    &#39;USER_ID_CLAIM&#39;: &#39;user_id&#39;,\n\n    &#39;AUTH_TOKEN_CLASSES&#39;: (&#39;rest_framework_simplejwt.tokens.AccessToken&#39;,),\n    &#39;TOKEN_TYPE_CLAIM&#39;: &#39;token_type&#39;,\n\n    &#39;JTI_CLAIM&#39;: &#39;jti&#39;,\n\n    &#39;SLIDING_TOKEN_REFRESH_EXP_CLAIM&#39;: &#39;refresh_exp&#39;,\n    &#39;SLIDING_TOKEN_LIFETIME&#39;: timedelta(minutes=5),\n    &#39;SLIDING_TOKEN_REFRESH_LIFETIME&#39;: timedelta(days=1),\n&#125;\n</code></pre>\n<p>其他的参数看官方文档，这里举一个例子 <em>AUTH_HEADER_TYPES</em> 这里值为 <em>Bearer</em> 就是刚才提到 <em>Authorization</em> 开头要加的字符串，可以根据自己喜好设置。</p>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><p>如果想让所有的路由都需要 jwt 认证，那么可以在 <em>drf</em> 配置中增加全局配置：</p>\n<pre><code># DRF config\nREST_FRAMEWORK = &#123;\n    # 其他内容\t\t\t\n    &quot;DEFAULT_PERMISSION_CLASSES&quot;:[\n        &#39;rest_framework.permissions.IsAuthenticated&#39;\n    ]\n&#125;\n</code></pre>\n<p>如果有的路由，比如用户注册的时候并没有办法获取 <em>token</em> ，那么该函数就跳过登陆验证，就是说该请求并不需要在 <em>header</em> 中添加 <em>Authorization</em>，那么我们可以这样：</p>\n<pre><code>from rest_framework import mixins\nfrom rest_framework.viewsets import GenericViewSet\nfrom django.contrib.auth import get_user_model\nfrom .serializers import UserSerializer\n\nUser = get_user_model()\n\nclass CreateUserView(GenericViewSet, mixins.CreateModelMixin):\n    &quot;&quot;&quot;\n    用户注册\n    &quot;&quot;&quot;\n    permission_classes = []\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n</code></pre>\n<p>把 <em>permission_classes</em> 赋值为空列表即可。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>原本 <em>github</em> 上有一个和 <em>drf</em> 版本对应的开源项目，最近在做项目的时候由于用的是新版本 <em>drf</em> ，特地到网上仓库看了一下之前使用的 <a href=\"https://github.com/jpadilla/django-rest-framework-jwt\">django-rest-framework-jwt</a> 已经停止维护了，幸运的是在该仓库的 <em>issues</em> 里发现了另一个持续维护的项目，<a href=\"https://github.com/davesque/django-rest-framework-simplejwt\">django-rest-framework-simplejwt</a>，目前已经支持 <em>django3.0</em>了。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>首先使用pip进行安装:</p>\n<pre><code>pip install djangorestframework-simplejwt\n</code></pre>\n<p>然后在 DRF 配置加入以下内容</p>\n<pre><code>REST_FRAMEWORK = &#123;\n    ...\n    &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: (\n        ...\n        &#39;rest_framework_simplejwt.authentication.JWTAuthentication&#39;,\n    )\n    ...\n&#125;\n</code></pre>\n<p>那么我们如何获取 <em>token</em> 呢？这时候需要配置一个路由来获取 <em>token</em>，直接配置到项目根目录下的 <em>urls.py</em> 里就好</p>\n<pre><code># urls.py\nfrom rest_framework_simplejwt.views import (\n    TokenObtainPairView,\n    TokenRefreshView,\n)\n\nurlpatterns = [\n    ...\n    path(&#39;api/token/&#39;, TokenObtainPairView.as_view(), name=&#39;token_obtain_pair&#39;),\n    path(&#39;api/token/refresh/&#39;, TokenRefreshView.as_view(), name=&#39;token_refresh&#39;),\n    ...\n]\n</code></pre>\n<p>然后就可以使用 <em>postman</em> 来测试获取token了</p>\n<p><img src=\"http://img.ginta.top/markdownx/2019/12/02/dc885b29-d663-49cb-9d68-3b9906e3e319.png\"></p>\n<p>之后发送请求的时候使用上面的 <strong>access</strong>就好，不用每次请求都输入用户名密码</p>\n<p><img src=\"http://img.ginta.top/markdownx/2019/12/02/0a7bb631-0a12-4cbb-8bbc-2e58c06b4251.png\"></p>\n<p>请求的方式没有太多变化，就是在请求头中多了一个 <em>Authorization</em> ，对应的值格式是 Bearer+一个空格+access。<br><strong>Bearer</strong> 也可以改为其他的名字，这个是官方配置的值，比如我习惯用 <strong>jwt</strong> 开头，在项目的 <em>settings.py</em> 文件中加入如下配置</p>\n<pre><code># settings.py\n# simple_jwt config\nSIMPLE_JWT = &#123;\n    &#39;ACCESS_TOKEN_LIFETIME&#39;: timedelta(minutes=5),\n    &#39;REFRESH_TOKEN_LIFETIME&#39;: timedelta(days=1),\n    &#39;ROTATE_REFRESH_TOKENS&#39;: False,\n    &#39;BLACKLIST_AFTER_ROTATION&#39;: True,\n\n    &#39;ALGORITHM&#39;: &#39;HS256&#39;,\n    &#39;SIGNING_KEY&#39;: SECRET_KEY,\n    &#39;VERIFYING_KEY&#39;: None,\n    &#39;AUDIENCE&#39;: None,\n    &#39;ISSUER&#39;: None,\n\n    &#39;AUTH_HEADER_TYPES&#39;: (&#39;Bearer&#39;,),\n    &#39;USER_ID_FIELD&#39;: &#39;id&#39;,\n    &#39;USER_ID_CLAIM&#39;: &#39;user_id&#39;,\n\n    &#39;AUTH_TOKEN_CLASSES&#39;: (&#39;rest_framework_simplejwt.tokens.AccessToken&#39;,),\n    &#39;TOKEN_TYPE_CLAIM&#39;: &#39;token_type&#39;,\n\n    &#39;JTI_CLAIM&#39;: &#39;jti&#39;,\n\n    &#39;SLIDING_TOKEN_REFRESH_EXP_CLAIM&#39;: &#39;refresh_exp&#39;,\n    &#39;SLIDING_TOKEN_LIFETIME&#39;: timedelta(minutes=5),\n    &#39;SLIDING_TOKEN_REFRESH_LIFETIME&#39;: timedelta(days=1),\n&#125;\n</code></pre>\n<p>其他的参数看官方文档，这里举一个例子 <em>AUTH_HEADER_TYPES</em> 这里值为 <em>Bearer</em> 就是刚才提到 <em>Authorization</em> 开头要加的字符串，可以根据自己喜好设置。</p>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><p>如果想让所有的路由都需要 jwt 认证，那么可以在 <em>drf</em> 配置中增加全局配置：</p>\n<pre><code># DRF config\nREST_FRAMEWORK = &#123;\n    # 其他内容\t\t\t\n    &quot;DEFAULT_PERMISSION_CLASSES&quot;:[\n        &#39;rest_framework.permissions.IsAuthenticated&#39;\n    ]\n&#125;\n</code></pre>\n<p>如果有的路由，比如用户注册的时候并没有办法获取 <em>token</em> ，那么该函数就跳过登陆验证，就是说该请求并不需要在 <em>header</em> 中添加 <em>Authorization</em>，那么我们可以这样：</p>\n<pre><code>from rest_framework import mixins\nfrom rest_framework.viewsets import GenericViewSet\nfrom django.contrib.auth import get_user_model\nfrom .serializers import UserSerializer\n\nUser = get_user_model()\n\nclass CreateUserView(GenericViewSet, mixins.CreateModelMixin):\n    &quot;&quot;&quot;\n    用户注册\n    &quot;&quot;&quot;\n    permission_classes = []\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n</code></pre>\n<p>把 <em>permission_classes</em> 赋值为空列表即可。</p>\n"},{"title":"Django ORM 机制","date":"2020-02-18T19:35:32.000Z","author":"Ginta","img":"http://img.ginta.top/qinshi2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/qinshi2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## *ORM*是什么\r\n目前大多数互联网项目都涉及到数据库，不同的数据库有着自己的优势，用的时候就需要查询它们的 *sql* 语句，学习成本高；另外一段很长的 *sql* 语句很容易存在被注入的风险。\r\n\r\n**对象关系映射**（Object Relational Mapping，简称**ORM**）模式是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术。\r\n\r\n该技术让我们可以使用面向对象的方法来进行数据库的操作，从而不必理会不同数据库之间 *sql* 语句的差异。\r\n\r\n\r\n![ORM示意图](http://img.ginta.top/markdownx/2019/12/02/23d52908-3a2b-45ae-a4b2-f761781d870e.png)\r\n\r\n如上图所示，类对应的就是数据库中的表，类中的属性对应数据表中的字段，类的实例对象就是数据库中的一条条数据了。\r\n\r\n```\r\nfrom django.db import models\r\n\r\nclass Person(models.Model):\r\n    first_name = models.CharField(max_length=30)\r\n    last_name = models.CharField(max_length=30)\r\n```\r\n这里的 **Person** 在数据库中就是一张表，表名可以自定义。*first_name* 和 *last_name* 就是其中的两个字段，*max_length* 就是长度约束，比如 *MySQL* 数据库中对于字符字段可以设置其最大长度。\r\n如果我们想新建一条数据，可以通过以下方法：\r\n```\r\nfrom .models import Person\r\nperson = Person(first_name=\"泷谷\", last_name=\"源治\")\r\nperson.save()\r\n```\r\n\r\n## 总结\r\n**ORM** 让开发人员大大减少了工作量，使得代码更加清晰，方便维护。当然每个技术有优点就有缺陷，**ORM** 虽然使开发效率提高了，但是缺牺牲了一些性能；另外一些复杂的 *sql* 语句并不能通过 **ORM** 来实现。不过对于大多开发者来说还是利大于弊。","source":"_posts/Django ORM 机制.md","raw":"---\ntitle: Django ORM 机制\ndate: 2020-02-19 03:35:32\nauthor: Ginta\nimg: http://img.ginta.top/qinshi2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/qinshi2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - Django\ncategories: 数据库\n---\n## *ORM*是什么\r\n目前大多数互联网项目都涉及到数据库，不同的数据库有着自己的优势，用的时候就需要查询它们的 *sql* 语句，学习成本高；另外一段很长的 *sql* 语句很容易存在被注入的风险。\r\n\r\n**对象关系映射**（Object Relational Mapping，简称**ORM**）模式是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术。\r\n\r\n该技术让我们可以使用面向对象的方法来进行数据库的操作，从而不必理会不同数据库之间 *sql* 语句的差异。\r\n\r\n\r\n![ORM示意图](http://img.ginta.top/markdownx/2019/12/02/23d52908-3a2b-45ae-a4b2-f761781d870e.png)\r\n\r\n如上图所示，类对应的就是数据库中的表，类中的属性对应数据表中的字段，类的实例对象就是数据库中的一条条数据了。\r\n\r\n```\r\nfrom django.db import models\r\n\r\nclass Person(models.Model):\r\n    first_name = models.CharField(max_length=30)\r\n    last_name = models.CharField(max_length=30)\r\n```\r\n这里的 **Person** 在数据库中就是一张表，表名可以自定义。*first_name* 和 *last_name* 就是其中的两个字段，*max_length* 就是长度约束，比如 *MySQL* 数据库中对于字符字段可以设置其最大长度。\r\n如果我们想新建一条数据，可以通过以下方法：\r\n```\r\nfrom .models import Person\r\nperson = Person(first_name=\"泷谷\", last_name=\"源治\")\r\nperson.save()\r\n```\r\n\r\n## 总结\r\n**ORM** 让开发人员大大减少了工作量，使得代码更加清晰，方便维护。当然每个技术有优点就有缺陷，**ORM** 虽然使开发效率提高了，但是缺牺牲了一些性能；另外一些复杂的 *sql* 语句并不能通过 **ORM** 来实现。不过对于大多开发者来说还是利大于弊。","slug":"Django ORM 机制","published":1,"updated":"2022-08-11T12:49:48.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6180t000ktkscel9y3p0k","content":"<h2 id=\"ORM是什么\"><a href=\"#ORM是什么\" class=\"headerlink\" title=\"ORM是什么\"></a><em>ORM</em>是什么</h2><p>目前大多数互联网项目都涉及到数据库，不同的数据库有着自己的优势，用的时候就需要查询它们的 <em>sql</em> 语句，学习成本高；另外一段很长的 <em>sql</em> 语句很容易存在被注入的风险。</p>\n<p><strong>对象关系映射</strong>（Object Relational Mapping，简称<strong>ORM</strong>）模式是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术。</p>\n<p>该技术让我们可以使用面向对象的方法来进行数据库的操作，从而不必理会不同数据库之间 <em>sql</em> 语句的差异。</p>\n<p><img src=\"http://img.ginta.top/markdownx/2019/12/02/23d52908-3a2b-45ae-a4b2-f761781d870e.png\" alt=\"ORM示意图\"></p>\n<p>如上图所示，类对应的就是数据库中的表，类中的属性对应数据表中的字段，类的实例对象就是数据库中的一条条数据了。</p>\n<pre><code>from django.db import models\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n</code></pre>\n<p>这里的 <strong>Person</strong> 在数据库中就是一张表，表名可以自定义。<em>first_name</em> 和 <em>last_name</em> 就是其中的两个字段，<em>max_length</em> 就是长度约束，比如 <em>MySQL</em> 数据库中对于字符字段可以设置其最大长度。<br>如果我们想新建一条数据，可以通过以下方法：</p>\n<pre><code>from .models import Person\nperson = Person(first_name=&quot;泷谷&quot;, last_name=&quot;源治&quot;)\nperson.save()\n</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>ORM</strong> 让开发人员大大减少了工作量，使得代码更加清晰，方便维护。当然每个技术有优点就有缺陷，<strong>ORM</strong> 虽然使开发效率提高了，但是缺牺牲了一些性能；另外一些复杂的 <em>sql</em> 语句并不能通过 <strong>ORM</strong> 来实现。不过对于大多开发者来说还是利大于弊。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"ORM是什么\"><a href=\"#ORM是什么\" class=\"headerlink\" title=\"ORM是什么\"></a><em>ORM</em>是什么</h2><p>目前大多数互联网项目都涉及到数据库，不同的数据库有着自己的优势，用的时候就需要查询它们的 <em>sql</em> 语句，学习成本高；另外一段很长的 <em>sql</em> 语句很容易存在被注入的风险。</p>\n<p><strong>对象关系映射</strong>（Object Relational Mapping，简称<strong>ORM</strong>）模式是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术。</p>\n<p>该技术让我们可以使用面向对象的方法来进行数据库的操作，从而不必理会不同数据库之间 <em>sql</em> 语句的差异。</p>\n<p><img src=\"http://img.ginta.top/markdownx/2019/12/02/23d52908-3a2b-45ae-a4b2-f761781d870e.png\" alt=\"ORM示意图\"></p>\n<p>如上图所示，类对应的就是数据库中的表，类中的属性对应数据表中的字段，类的实例对象就是数据库中的一条条数据了。</p>\n<pre><code>from django.db import models\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n</code></pre>\n<p>这里的 <strong>Person</strong> 在数据库中就是一张表，表名可以自定义。<em>first_name</em> 和 <em>last_name</em> 就是其中的两个字段，<em>max_length</em> 就是长度约束，比如 <em>MySQL</em> 数据库中对于字符字段可以设置其最大长度。<br>如果我们想新建一条数据，可以通过以下方法：</p>\n<pre><code>from .models import Person\nperson = Person(first_name=&quot;泷谷&quot;, last_name=&quot;源治&quot;)\nperson.save()\n</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>ORM</strong> 让开发人员大大减少了工作量，使得代码更加清晰，方便维护。当然每个技术有优点就有缺陷，<strong>ORM</strong> 虽然使开发效率提高了，但是缺牺牲了一些性能；另外一些复杂的 <em>sql</em> 语句并不能通过 <strong>ORM</strong> 来实现。不过对于大多开发者来说还是利大于弊。</p>\n"},{"title":"Django 使用 logging 模块的一次记录","date":"2019-11-26T18:03:20.000Z","author":"Ginta","img":"http://img.ginta.top/sky1.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/sky1.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 起因\r\n偶尔浏览 [Stack overflow](https://stackoverflow.com/) 看到有人提出的关于日志记录的问题，比较感兴趣就尝试了一下，问题截图如下:\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191030170258391.png)\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191030170206321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191030170226488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\r\n意思是他想把不同的日志等级分别记录在不同的文件中，比如 *INFO* 和 *ERROR* 分别记录到 *info.log* 以及 *error.log* 文件中，然而经过上图的尝试发现只有 *ERROR* 级别的错误记录到 *error.log* 的文件中了，而 *INFO* 级别的却没有记录，有一条解答算是比较清晰的 **In your settings you have two entries for django, and django is writing logs based on the last entry.** 意思是： **当你设置两个 *django*  的 *loggers*，那么默认会执行最后一个，也就是倒数第二章图的这部分有效\r\n```python\r\n 'django': {\r\n     'handlers': ['file.ERROR'],\r\n     'level': 'ERROR',\r\n     'propagate': True,\r\n },\r\n```\r\n解决办法也同样给出了：\r\n```python\r\n'loggers': {\r\n        'django.request': {\r\n            'handlers': ['file.DEBUG'],\r\n            'level': 'DEBUG',\r\n            'propagate': True,\r\n        },\r\n        'django': {\r\n            'handlers': ['file.INFO', 'file.ERROR'],  # <-- Here\r\n            'level': 'INFO',\r\n            'propagate': True,\r\n        }\r\n}\r\n```\r\n本着 **实践是检验真理的唯一标准** ，忍不住写了个小的demo试了一下：\r\n```python\r\n# views.py\r\nclass IndexView(View):\r\n    def get(self, request):\r\n        log.info('info log file')\r\n        log.error('error log file')\r\n\r\n        return HttpResponse('return')\r\n\r\n```\r\n```python\r\n# settings.py\r\n'handlers': {\r\n    'info.file': {\r\n        'level': 'INFO',\r\n        'class': 'logging.handlers.RotatingFileHandler',\r\n        # 日志位置,日志文件名,日志保存目录必须手动创建\r\n        'filename': os.path.join(os.path.dirname(BASE_DIR), \"logs/info.log\"),\r\n        # 日志格式:详细格式\r\n        'formatter': 'verbose'\r\n    },\r\n    'error.file': {\r\n        'level': 'ERROR',\r\n        'class': 'logging.handlers.RotatingFileHandler',\r\n        # 日志位置,日志文件名,日志保存目录必须手动创建\r\n        'filename': os.path.join(os.path.dirname(BASE_DIR), \"logs/error.log\"),\r\n        # 日志格式:详细格式\r\n        'formatter': 'verbose',\r\n    },\r\n},\r\n\r\n\r\n# 日志对象，第一次\r\n'loggers': {\r\n    'django': {\r\n        'handlers': ['info.file'],\r\n        'propagate': False,  # 是否让日志信息继续冒泡给其他的日志处理系统\r\n        'level': 'INFO',\r\n    },\r\n    'django': {\r\n        'handlers': ['error.file'],\r\n        'propagate': False,  # 是否让日志信息继续冒泡给其他的日志处理系统\r\n        'level': 'ERROR',\r\n    },\r\n}\r\n```\r\n第一次的结果就是，*level* 为 *INFO* 的 *loggers* 没有记录，也就是只记录了 *error* 的日志\r\n```python\r\n# 日志对象，第二次\r\n'loggers': {\r\n    'django': {\r\n        'handlers': ['error.file'],\r\n        'propagate': False,  # 是否让日志信息继续冒泡给其他的日志处理系统\r\n        'level': 'ERROR',\r\n    },\r\n    'django': {\r\n        'handlers': ['info.file'],\r\n        'propagate': False,  # 是否让日志信息继续冒泡给其他的日志处理系统\r\n        'level': 'INFO',\r\n    },\r\n}\r\n```\r\n第二次结果相反，只有 *info.log* 文件中保存有记录。说明回答问题的这位还是很负责的！\r\n最后测试了一下正确的方式：\r\n```python\r\n'loggers': {\r\n    'django': {\r\n        'handlers': ['info.file', 'error.file'],\r\n        'propagate': False,  # 是否让日志信息继续冒泡给其他的日志处理系统\r\n        'level': 'INFO',\r\n    },\r\n}\r\n```\r\n最终结果是 *INFO* 级别以及比它更低级别的日志都记录到了 *info.log* 中，就是说 *error* 等级别也一块进去了，而 *error* 以及比他更低级别的日志会记录到 *error.log* 文件中，也就是说 *error* 以及比它低级别的日志会保存两份。这符合 **logging** 库的说明。\r\n\r\n## 后记\r\n虽然找到了问题所在，不过提问者貌似想把不同级别的分别存储到一个文件中，就是 *info.log* 只保存 *INFO* 级别的日志，而不会保留 *error* 的日志。虽然这种需求不是很常见，毕竟 *ERROR* 以下级别的日志同样重要，也许有的公司人员比较充足，可以分2个人来分别解决 *ERROR* 以及 *CRITICAL*(严重错误，比如项目根本无法启动)也说不定~","source":"_posts/Django 使用 logging 模块的一次记录.md","raw":"---\ntitle: Django 使用 logging 模块的一次记录\ndate: 2019-11-27 02:03:20\nauthor: Ginta\nimg: http://img.ginta.top/sky1.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/sky1.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - python\n  - Django\ncategories: Django\n---\n## 起因\r\n偶尔浏览 [Stack overflow](https://stackoverflow.com/) 看到有人提出的关于日志记录的问题，比较感兴趣就尝试了一下，问题截图如下:\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191030170258391.png)\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191030170206321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191030170226488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\r\n意思是他想把不同的日志等级分别记录在不同的文件中，比如 *INFO* 和 *ERROR* 分别记录到 *info.log* 以及 *error.log* 文件中，然而经过上图的尝试发现只有 *ERROR* 级别的错误记录到 *error.log* 的文件中了，而 *INFO* 级别的却没有记录，有一条解答算是比较清晰的 **In your settings you have two entries for django, and django is writing logs based on the last entry.** 意思是： **当你设置两个 *django*  的 *loggers*，那么默认会执行最后一个，也就是倒数第二章图的这部分有效\r\n```python\r\n 'django': {\r\n     'handlers': ['file.ERROR'],\r\n     'level': 'ERROR',\r\n     'propagate': True,\r\n },\r\n```\r\n解决办法也同样给出了：\r\n```python\r\n'loggers': {\r\n        'django.request': {\r\n            'handlers': ['file.DEBUG'],\r\n            'level': 'DEBUG',\r\n            'propagate': True,\r\n        },\r\n        'django': {\r\n            'handlers': ['file.INFO', 'file.ERROR'],  # <-- Here\r\n            'level': 'INFO',\r\n            'propagate': True,\r\n        }\r\n}\r\n```\r\n本着 **实践是检验真理的唯一标准** ，忍不住写了个小的demo试了一下：\r\n```python\r\n# views.py\r\nclass IndexView(View):\r\n    def get(self, request):\r\n        log.info('info log file')\r\n        log.error('error log file')\r\n\r\n        return HttpResponse('return')\r\n\r\n```\r\n```python\r\n# settings.py\r\n'handlers': {\r\n    'info.file': {\r\n        'level': 'INFO',\r\n        'class': 'logging.handlers.RotatingFileHandler',\r\n        # 日志位置,日志文件名,日志保存目录必须手动创建\r\n        'filename': os.path.join(os.path.dirname(BASE_DIR), \"logs/info.log\"),\r\n        # 日志格式:详细格式\r\n        'formatter': 'verbose'\r\n    },\r\n    'error.file': {\r\n        'level': 'ERROR',\r\n        'class': 'logging.handlers.RotatingFileHandler',\r\n        # 日志位置,日志文件名,日志保存目录必须手动创建\r\n        'filename': os.path.join(os.path.dirname(BASE_DIR), \"logs/error.log\"),\r\n        # 日志格式:详细格式\r\n        'formatter': 'verbose',\r\n    },\r\n},\r\n\r\n\r\n# 日志对象，第一次\r\n'loggers': {\r\n    'django': {\r\n        'handlers': ['info.file'],\r\n        'propagate': False,  # 是否让日志信息继续冒泡给其他的日志处理系统\r\n        'level': 'INFO',\r\n    },\r\n    'django': {\r\n        'handlers': ['error.file'],\r\n        'propagate': False,  # 是否让日志信息继续冒泡给其他的日志处理系统\r\n        'level': 'ERROR',\r\n    },\r\n}\r\n```\r\n第一次的结果就是，*level* 为 *INFO* 的 *loggers* 没有记录，也就是只记录了 *error* 的日志\r\n```python\r\n# 日志对象，第二次\r\n'loggers': {\r\n    'django': {\r\n        'handlers': ['error.file'],\r\n        'propagate': False,  # 是否让日志信息继续冒泡给其他的日志处理系统\r\n        'level': 'ERROR',\r\n    },\r\n    'django': {\r\n        'handlers': ['info.file'],\r\n        'propagate': False,  # 是否让日志信息继续冒泡给其他的日志处理系统\r\n        'level': 'INFO',\r\n    },\r\n}\r\n```\r\n第二次结果相反，只有 *info.log* 文件中保存有记录。说明回答问题的这位还是很负责的！\r\n最后测试了一下正确的方式：\r\n```python\r\n'loggers': {\r\n    'django': {\r\n        'handlers': ['info.file', 'error.file'],\r\n        'propagate': False,  # 是否让日志信息继续冒泡给其他的日志处理系统\r\n        'level': 'INFO',\r\n    },\r\n}\r\n```\r\n最终结果是 *INFO* 级别以及比它更低级别的日志都记录到了 *info.log* 中，就是说 *error* 等级别也一块进去了，而 *error* 以及比他更低级别的日志会记录到 *error.log* 文件中，也就是说 *error* 以及比它低级别的日志会保存两份。这符合 **logging** 库的说明。\r\n\r\n## 后记\r\n虽然找到了问题所在，不过提问者貌似想把不同级别的分别存储到一个文件中，就是 *info.log* 只保存 *INFO* 级别的日志，而不会保留 *error* 的日志。虽然这种需求不是很常见，毕竟 *ERROR* 以下级别的日志同样重要，也许有的公司人员比较充足，可以分2个人来分别解决 *ERROR* 以及 *CRITICAL*(严重错误，比如项目根本无法启动)也说不定~","slug":"Django 使用 logging 模块的一次记录","published":1,"updated":"2022-08-11T12:49:48.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6180u000ntksccmh29ip0","content":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>偶尔浏览 <a href=\"https://stackoverflow.com/\">Stack overflow</a> 看到有人提出的关于日志记录的问题，比较感兴趣就尝试了一下，问题截图如下:<br><img src=\"https://img-blog.csdnimg.cn/20191030170258391.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20191030170206321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20191030170226488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>意思是他想把不同的日志等级分别记录在不同的文件中，比如 <em>INFO</em> 和 <em>ERROR</em> 分别记录到 <em>info.log</em> 以及 <em>error.log</em> 文件中，然而经过上图的尝试发现只有 <em>ERROR</em> 级别的错误记录到 <em>error.log</em> 的文件中了，而 <em>INFO</em> 级别的却没有记录，有一条解答算是比较清晰的 <strong>In your settings you have two entries for django, and django is writing logs based on the last entry.</strong> 意思是： **当你设置两个 <em>django</em>  的 <em>loggers</em>，那么默认会执行最后一个，也就是倒数第二章图的这部分有效</p>\n<pre><code class=\"python\"> &#39;django&#39;: &#123;\n     &#39;handlers&#39;: [&#39;file.ERROR&#39;],\n     &#39;level&#39;: &#39;ERROR&#39;,\n     &#39;propagate&#39;: True,\n &#125;,\n</code></pre>\n<p>解决办法也同样给出了：</p>\n<pre><code class=\"python\">&#39;loggers&#39;: &#123;\n        &#39;django.request&#39;: &#123;\n            &#39;handlers&#39;: [&#39;file.DEBUG&#39;],\n            &#39;level&#39;: &#39;DEBUG&#39;,\n            &#39;propagate&#39;: True,\n        &#125;,\n        &#39;django&#39;: &#123;\n            &#39;handlers&#39;: [&#39;file.INFO&#39;, &#39;file.ERROR&#39;],  # &lt;-- Here\n            &#39;level&#39;: &#39;INFO&#39;,\n            &#39;propagate&#39;: True,\n        &#125;\n&#125;\n</code></pre>\n<p>本着 <strong>实践是检验真理的唯一标准</strong> ，忍不住写了个小的demo试了一下：</p>\n<pre><code class=\"python\"># views.py\nclass IndexView(View):\n    def get(self, request):\n        log.info(&#39;info log file&#39;)\n        log.error(&#39;error log file&#39;)\n\n        return HttpResponse(&#39;return&#39;)\n</code></pre>\n<pre><code class=\"python\"># settings.py\n&#39;handlers&#39;: &#123;\n    &#39;info.file&#39;: &#123;\n        &#39;level&#39;: &#39;INFO&#39;,\n        &#39;class&#39;: &#39;logging.handlers.RotatingFileHandler&#39;,\n        # 日志位置,日志文件名,日志保存目录必须手动创建\n        &#39;filename&#39;: os.path.join(os.path.dirname(BASE_DIR), &quot;logs/info.log&quot;),\n        # 日志格式:详细格式\n        &#39;formatter&#39;: &#39;verbose&#39;\n    &#125;,\n    &#39;error.file&#39;: &#123;\n        &#39;level&#39;: &#39;ERROR&#39;,\n        &#39;class&#39;: &#39;logging.handlers.RotatingFileHandler&#39;,\n        # 日志位置,日志文件名,日志保存目录必须手动创建\n        &#39;filename&#39;: os.path.join(os.path.dirname(BASE_DIR), &quot;logs/error.log&quot;),\n        # 日志格式:详细格式\n        &#39;formatter&#39;: &#39;verbose&#39;,\n    &#125;,\n&#125;,\n\n\n# 日志对象，第一次\n&#39;loggers&#39;: &#123;\n    &#39;django&#39;: &#123;\n        &#39;handlers&#39;: [&#39;info.file&#39;],\n        &#39;propagate&#39;: False,  # 是否让日志信息继续冒泡给其他的日志处理系统\n        &#39;level&#39;: &#39;INFO&#39;,\n    &#125;,\n    &#39;django&#39;: &#123;\n        &#39;handlers&#39;: [&#39;error.file&#39;],\n        &#39;propagate&#39;: False,  # 是否让日志信息继续冒泡给其他的日志处理系统\n        &#39;level&#39;: &#39;ERROR&#39;,\n    &#125;,\n&#125;\n</code></pre>\n<p>第一次的结果就是，<em>level</em> 为 <em>INFO</em> 的 <em>loggers</em> 没有记录，也就是只记录了 <em>error</em> 的日志</p>\n<pre><code class=\"python\"># 日志对象，第二次\n&#39;loggers&#39;: &#123;\n    &#39;django&#39;: &#123;\n        &#39;handlers&#39;: [&#39;error.file&#39;],\n        &#39;propagate&#39;: False,  # 是否让日志信息继续冒泡给其他的日志处理系统\n        &#39;level&#39;: &#39;ERROR&#39;,\n    &#125;,\n    &#39;django&#39;: &#123;\n        &#39;handlers&#39;: [&#39;info.file&#39;],\n        &#39;propagate&#39;: False,  # 是否让日志信息继续冒泡给其他的日志处理系统\n        &#39;level&#39;: &#39;INFO&#39;,\n    &#125;,\n&#125;\n</code></pre>\n<p>第二次结果相反，只有 <em>info.log</em> 文件中保存有记录。说明回答问题的这位还是很负责的！<br>最后测试了一下正确的方式：</p>\n<pre><code class=\"python\">&#39;loggers&#39;: &#123;\n    &#39;django&#39;: &#123;\n        &#39;handlers&#39;: [&#39;info.file&#39;, &#39;error.file&#39;],\n        &#39;propagate&#39;: False,  # 是否让日志信息继续冒泡给其他的日志处理系统\n        &#39;level&#39;: &#39;INFO&#39;,\n    &#125;,\n&#125;\n</code></pre>\n<p>最终结果是 <em>INFO</em> 级别以及比它更低级别的日志都记录到了 <em>info.log</em> 中，就是说 <em>error</em> 等级别也一块进去了，而 <em>error</em> 以及比他更低级别的日志会记录到 <em>error.log</em> 文件中，也就是说 <em>error</em> 以及比它低级别的日志会保存两份。这符合 <strong>logging</strong> 库的说明。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>虽然找到了问题所在，不过提问者貌似想把不同级别的分别存储到一个文件中，就是 <em>info.log</em> 只保存 <em>INFO</em> 级别的日志，而不会保留 <em>error</em> 的日志。虽然这种需求不是很常见，毕竟 <em>ERROR</em> 以下级别的日志同样重要，也许有的公司人员比较充足，可以分2个人来分别解决 <em>ERROR</em> 以及 <em>CRITICAL</em>(严重错误，比如项目根本无法启动)也说不定~</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>偶尔浏览 <a href=\"https://stackoverflow.com/\">Stack overflow</a> 看到有人提出的关于日志记录的问题，比较感兴趣就尝试了一下，问题截图如下:<br><img src=\"https://img-blog.csdnimg.cn/20191030170258391.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20191030170206321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20191030170226488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>意思是他想把不同的日志等级分别记录在不同的文件中，比如 <em>INFO</em> 和 <em>ERROR</em> 分别记录到 <em>info.log</em> 以及 <em>error.log</em> 文件中，然而经过上图的尝试发现只有 <em>ERROR</em> 级别的错误记录到 <em>error.log</em> 的文件中了，而 <em>INFO</em> 级别的却没有记录，有一条解答算是比较清晰的 <strong>In your settings you have two entries for django, and django is writing logs based on the last entry.</strong> 意思是： **当你设置两个 <em>django</em>  的 <em>loggers</em>，那么默认会执行最后一个，也就是倒数第二章图的这部分有效</p>\n<pre><code class=\"python\"> &#39;django&#39;: &#123;\n     &#39;handlers&#39;: [&#39;file.ERROR&#39;],\n     &#39;level&#39;: &#39;ERROR&#39;,\n     &#39;propagate&#39;: True,\n &#125;,\n</code></pre>\n<p>解决办法也同样给出了：</p>\n<pre><code class=\"python\">&#39;loggers&#39;: &#123;\n        &#39;django.request&#39;: &#123;\n            &#39;handlers&#39;: [&#39;file.DEBUG&#39;],\n            &#39;level&#39;: &#39;DEBUG&#39;,\n            &#39;propagate&#39;: True,\n        &#125;,\n        &#39;django&#39;: &#123;\n            &#39;handlers&#39;: [&#39;file.INFO&#39;, &#39;file.ERROR&#39;],  # &lt;-- Here\n            &#39;level&#39;: &#39;INFO&#39;,\n            &#39;propagate&#39;: True,\n        &#125;\n&#125;\n</code></pre>\n<p>本着 <strong>实践是检验真理的唯一标准</strong> ，忍不住写了个小的demo试了一下：</p>\n<pre><code class=\"python\"># views.py\nclass IndexView(View):\n    def get(self, request):\n        log.info(&#39;info log file&#39;)\n        log.error(&#39;error log file&#39;)\n\n        return HttpResponse(&#39;return&#39;)\n</code></pre>\n<pre><code class=\"python\"># settings.py\n&#39;handlers&#39;: &#123;\n    &#39;info.file&#39;: &#123;\n        &#39;level&#39;: &#39;INFO&#39;,\n        &#39;class&#39;: &#39;logging.handlers.RotatingFileHandler&#39;,\n        # 日志位置,日志文件名,日志保存目录必须手动创建\n        &#39;filename&#39;: os.path.join(os.path.dirname(BASE_DIR), &quot;logs/info.log&quot;),\n        # 日志格式:详细格式\n        &#39;formatter&#39;: &#39;verbose&#39;\n    &#125;,\n    &#39;error.file&#39;: &#123;\n        &#39;level&#39;: &#39;ERROR&#39;,\n        &#39;class&#39;: &#39;logging.handlers.RotatingFileHandler&#39;,\n        # 日志位置,日志文件名,日志保存目录必须手动创建\n        &#39;filename&#39;: os.path.join(os.path.dirname(BASE_DIR), &quot;logs/error.log&quot;),\n        # 日志格式:详细格式\n        &#39;formatter&#39;: &#39;verbose&#39;,\n    &#125;,\n&#125;,\n\n\n# 日志对象，第一次\n&#39;loggers&#39;: &#123;\n    &#39;django&#39;: &#123;\n        &#39;handlers&#39;: [&#39;info.file&#39;],\n        &#39;propagate&#39;: False,  # 是否让日志信息继续冒泡给其他的日志处理系统\n        &#39;level&#39;: &#39;INFO&#39;,\n    &#125;,\n    &#39;django&#39;: &#123;\n        &#39;handlers&#39;: [&#39;error.file&#39;],\n        &#39;propagate&#39;: False,  # 是否让日志信息继续冒泡给其他的日志处理系统\n        &#39;level&#39;: &#39;ERROR&#39;,\n    &#125;,\n&#125;\n</code></pre>\n<p>第一次的结果就是，<em>level</em> 为 <em>INFO</em> 的 <em>loggers</em> 没有记录，也就是只记录了 <em>error</em> 的日志</p>\n<pre><code class=\"python\"># 日志对象，第二次\n&#39;loggers&#39;: &#123;\n    &#39;django&#39;: &#123;\n        &#39;handlers&#39;: [&#39;error.file&#39;],\n        &#39;propagate&#39;: False,  # 是否让日志信息继续冒泡给其他的日志处理系统\n        &#39;level&#39;: &#39;ERROR&#39;,\n    &#125;,\n    &#39;django&#39;: &#123;\n        &#39;handlers&#39;: [&#39;info.file&#39;],\n        &#39;propagate&#39;: False,  # 是否让日志信息继续冒泡给其他的日志处理系统\n        &#39;level&#39;: &#39;INFO&#39;,\n    &#125;,\n&#125;\n</code></pre>\n<p>第二次结果相反，只有 <em>info.log</em> 文件中保存有记录。说明回答问题的这位还是很负责的！<br>最后测试了一下正确的方式：</p>\n<pre><code class=\"python\">&#39;loggers&#39;: &#123;\n    &#39;django&#39;: &#123;\n        &#39;handlers&#39;: [&#39;info.file&#39;, &#39;error.file&#39;],\n        &#39;propagate&#39;: False,  # 是否让日志信息继续冒泡给其他的日志处理系统\n        &#39;level&#39;: &#39;INFO&#39;,\n    &#125;,\n&#125;\n</code></pre>\n<p>最终结果是 <em>INFO</em> 级别以及比它更低级别的日志都记录到了 <em>info.log</em> 中，就是说 <em>error</em> 等级别也一块进去了，而 <em>error</em> 以及比他更低级别的日志会记录到 <em>error.log</em> 文件中，也就是说 <em>error</em> 以及比它低级别的日志会保存两份。这符合 <strong>logging</strong> 库的说明。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>虽然找到了问题所在，不过提问者貌似想把不同级别的分别存储到一个文件中，就是 <em>info.log</em> 只保存 <em>INFO</em> 级别的日志，而不会保留 <em>error</em> 的日志。虽然这种需求不是很常见，毕竟 <em>ERROR</em> 以下级别的日志同样重要，也许有的公司人员比较充足，可以分2个人来分别解决 <em>ERROR</em> 以及 <em>CRITICAL</em>(严重错误，比如项目根本无法启动)也说不定~</p>\n"},{"title":"Django2.0 重写用户模型","date":"2019-11-26T19:00:59.000Z","author":"Ginta","img":"http://img.ginta.top/lc3.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/lc3.jpg","toc":false,"mathjax":false,"summary":null,"_content":"前言\r\n现有的 django 自带的用户模型已经不满足我们的需求了，比如用户有头像以及性别等字段，于是乎我们需要自定义一个新的用户模型，但是有一部分字段还是可以用以前的，比如邮箱什么的，所以采用继承关系就好。\r\n\r\n步骤\r\n重写用户模型，继承 django.contrib.auth.models.AbstractUser 类\r\n```\r\n# users.py\r\nfrom django.db import models\r\nfrom django.contrib.auth.models import AbstractUser\r\n# Create your models here.\r\nclass User(AbstractUser):\r\n    mobiles = models.CharField(verbose_name=\"手机号码\", max_length=15, unique=True)\r\n    avatar = models.ImageField(upload_to='avatar', verbose_name='头像', null=True,\r\n                               blank=True, help_text=\"头像图片的大小规格：256*256，或者对应的比例的图片\")\r\n\r\n    class Meta:\r\n        db_table = 'blog_users'\r\n        verbose_name = '用户'\r\n        verbose_name_plural = verbose_name\r\n```\r\n在 settings.py 中更改用户认证模型的指向\r\n\r\n```\r\n# settings.py\r\n# ...其他代码\r\n# 配置让Django的Auth模块调用users子应用下的User模型\r\nAUTH_USER_MODEL = \"users.User\"\r\n# ...其他代码\r\n```\r\n最后迁移一下数据即可！","source":"_posts/Django2.0 重写用户模型.md","raw":"---\ntitle: Django2.0 重写用户模型\ndate: 2019-11-27 03:00:59\nauthor: Ginta\nimg: http://img.ginta.top/lc3.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/lc3.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: Django\n---\n前言\r\n现有的 django 自带的用户模型已经不满足我们的需求了，比如用户有头像以及性别等字段，于是乎我们需要自定义一个新的用户模型，但是有一部分字段还是可以用以前的，比如邮箱什么的，所以采用继承关系就好。\r\n\r\n步骤\r\n重写用户模型，继承 django.contrib.auth.models.AbstractUser 类\r\n```\r\n# users.py\r\nfrom django.db import models\r\nfrom django.contrib.auth.models import AbstractUser\r\n# Create your models here.\r\nclass User(AbstractUser):\r\n    mobiles = models.CharField(verbose_name=\"手机号码\", max_length=15, unique=True)\r\n    avatar = models.ImageField(upload_to='avatar', verbose_name='头像', null=True,\r\n                               blank=True, help_text=\"头像图片的大小规格：256*256，或者对应的比例的图片\")\r\n\r\n    class Meta:\r\n        db_table = 'blog_users'\r\n        verbose_name = '用户'\r\n        verbose_name_plural = verbose_name\r\n```\r\n在 settings.py 中更改用户认证模型的指向\r\n\r\n```\r\n# settings.py\r\n# ...其他代码\r\n# 配置让Django的Auth模块调用users子应用下的User模型\r\nAUTH_USER_MODEL = \"users.User\"\r\n# ...其他代码\r\n```\r\n最后迁移一下数据即可！","slug":"Django2.0 重写用户模型","published":1,"updated":"2022-08-11T12:49:48.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6180v000rtksc3hur601m","content":"<p>前言<br>现有的 django 自带的用户模型已经不满足我们的需求了，比如用户有头像以及性别等字段，于是乎我们需要自定义一个新的用户模型，但是有一部分字段还是可以用以前的，比如邮箱什么的，所以采用继承关系就好。</p>\n<p>步骤<br>重写用户模型，继承 django.contrib.auth.models.AbstractUser 类</p>\n<pre><code># users.py\nfrom django.db import models\nfrom django.contrib.auth.models import AbstractUser\n# Create your models here.\nclass User(AbstractUser):\n    mobiles = models.CharField(verbose_name=&quot;手机号码&quot;, max_length=15, unique=True)\n    avatar = models.ImageField(upload_to=&#39;avatar&#39;, verbose_name=&#39;头像&#39;, null=True,\n                               blank=True, help_text=&quot;头像图片的大小规格：256*256，或者对应的比例的图片&quot;)\n\n    class Meta:\n        db_table = &#39;blog_users&#39;\n        verbose_name = &#39;用户&#39;\n        verbose_name_plural = verbose_name\n</code></pre>\n<p>在 settings.py 中更改用户认证模型的指向</p>\n<pre><code># settings.py\n# ...其他代码\n# 配置让Django的Auth模块调用users子应用下的User模型\nAUTH_USER_MODEL = &quot;users.User&quot;\n# ...其他代码\n</code></pre>\n<p>最后迁移一下数据即可！</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<p>前言<br>现有的 django 自带的用户模型已经不满足我们的需求了，比如用户有头像以及性别等字段，于是乎我们需要自定义一个新的用户模型，但是有一部分字段还是可以用以前的，比如邮箱什么的，所以采用继承关系就好。</p>\n<p>步骤<br>重写用户模型，继承 django.contrib.auth.models.AbstractUser 类</p>\n<pre><code># users.py\nfrom django.db import models\nfrom django.contrib.auth.models import AbstractUser\n# Create your models here.\nclass User(AbstractUser):\n    mobiles = models.CharField(verbose_name=&quot;手机号码&quot;, max_length=15, unique=True)\n    avatar = models.ImageField(upload_to=&#39;avatar&#39;, verbose_name=&#39;头像&#39;, null=True,\n                               blank=True, help_text=&quot;头像图片的大小规格：256*256，或者对应的比例的图片&quot;)\n\n    class Meta:\n        db_table = &#39;blog_users&#39;\n        verbose_name = &#39;用户&#39;\n        verbose_name_plural = verbose_name\n</code></pre>\n<p>在 settings.py 中更改用户认证模型的指向</p>\n<pre><code># settings.py\n# ...其他代码\n# 配置让Django的Auth模块调用users子应用下的User模型\nAUTH_USER_MODEL = &quot;users.User&quot;\n# ...其他代码\n</code></pre>\n<p>最后迁移一下数据即可！</p>\n"},{"title":"Docker 指令","date":"2019-12-19T20:24:55.000Z","author":"Ginta","img":"http://img.ginta.top/fantasy2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/fantasy2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"1. docker images 显示所有镜像\r\n2. docker build -t image_name .  (点就是从当前路径查找Dockerfile)\r\n3. docker container ls 列举当前运行的容器\r\n4. docker run -it image_name 交互式运行image\r\n5. docker rm/docker container rm container_id 删除container\r\n6. docker rmi/docker image rm image_id 删除image\r\n7. docker container -aq 列出所有container_id (-q代表只列出id)\r\n8. docker rm $(docker container -aq)    ($，删除所有列表中的元素)\r\n9. docker rm $(docker container ls -f \"status=exited\" -q) 删除退出的容器\r\n10. docker commit container_name new_container_name\r\n    \r\n    `docker commit frozty_jeew caesar123/centos-vim`\r\n11. Dockerfile 用来build一个一模一样的image\r\n\r\n\r\n\r\n### Dokerfile\r\n- FROM strach # 制作base image\r\n- FROM centos # 使用base image\r\n- FROM ubuntu:14.04\r\n- LABEL maintainer = \"775650117@qq.com\" (METADATA:注释)\r\n- LABEL version = \"1.0\"\r\n- RUN yum update && yun install -y vim \\\r\n  python-dev\r\n- 每次运行RUN都会生成新的image，所以尽量合并成一行\r\n- WORKDIR /root # 设定工作目录\r\n\r\n```\r\nWORKDIR /test # 如果没有会自动创建test目录     \r\nWORKDIR demo\r\nRUN pwd # 输出结果应该是/test/demo\r\n```\r\n- 用WORKDIR, 不要使用 RUN cd,尽量使用绝对目录\r\n- ADD(COPY)\r\n- ADD hello /\r\n- ADD test.tar.gz / # 添加到根目录并解压\r\n```\r\nWORKDIR /root\r\nADD hello test/ # /root/test/hello\r\n```\r\n```\r\nWORKDIR /root\r\nCOPY hello test/ # /root/test/hello\r\n```\r\n- 大部分情况，COPY优于ADD，ADD除了COPY还有解压功能\r\n- 添加远程文件/目录请使用curl或者wget\r\n- ENV MYSQL_VERSION 5.6 # 设置常量\r\n```\r\nENV MYSQL_VERSION 5.6 # 设置常量\r\nRUN apt-get install -y mysql-server= \"${MYSQL_VERSION}\" \\\r\n   && rm -rf /var/lib/apt/lists/* 引用常量\r\n```\r\n- 尽量使用ENV增加可维护性","source":"_posts/Docker 指令.md","raw":"---\ntitle: Docker 指令\ndate: 2019-12-20 04:24:55\nauthor: Ginta\nimg: http://img.ginta.top/fantasy2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/fantasy2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: docker\n---\n1. docker images 显示所有镜像\r\n2. docker build -t image_name .  (点就是从当前路径查找Dockerfile)\r\n3. docker container ls 列举当前运行的容器\r\n4. docker run -it image_name 交互式运行image\r\n5. docker rm/docker container rm container_id 删除container\r\n6. docker rmi/docker image rm image_id 删除image\r\n7. docker container -aq 列出所有container_id (-q代表只列出id)\r\n8. docker rm $(docker container -aq)    ($，删除所有列表中的元素)\r\n9. docker rm $(docker container ls -f \"status=exited\" -q) 删除退出的容器\r\n10. docker commit container_name new_container_name\r\n    \r\n    `docker commit frozty_jeew caesar123/centos-vim`\r\n11. Dockerfile 用来build一个一模一样的image\r\n\r\n\r\n\r\n### Dokerfile\r\n- FROM strach # 制作base image\r\n- FROM centos # 使用base image\r\n- FROM ubuntu:14.04\r\n- LABEL maintainer = \"775650117@qq.com\" (METADATA:注释)\r\n- LABEL version = \"1.0\"\r\n- RUN yum update && yun install -y vim \\\r\n  python-dev\r\n- 每次运行RUN都会生成新的image，所以尽量合并成一行\r\n- WORKDIR /root # 设定工作目录\r\n\r\n```\r\nWORKDIR /test # 如果没有会自动创建test目录     \r\nWORKDIR demo\r\nRUN pwd # 输出结果应该是/test/demo\r\n```\r\n- 用WORKDIR, 不要使用 RUN cd,尽量使用绝对目录\r\n- ADD(COPY)\r\n- ADD hello /\r\n- ADD test.tar.gz / # 添加到根目录并解压\r\n```\r\nWORKDIR /root\r\nADD hello test/ # /root/test/hello\r\n```\r\n```\r\nWORKDIR /root\r\nCOPY hello test/ # /root/test/hello\r\n```\r\n- 大部分情况，COPY优于ADD，ADD除了COPY还有解压功能\r\n- 添加远程文件/目录请使用curl或者wget\r\n- ENV MYSQL_VERSION 5.6 # 设置常量\r\n```\r\nENV MYSQL_VERSION 5.6 # 设置常量\r\nRUN apt-get install -y mysql-server= \"${MYSQL_VERSION}\" \\\r\n   && rm -rf /var/lib/apt/lists/* 引用常量\r\n```\r\n- 尽量使用ENV增加可维护性","slug":"Docker 指令","published":1,"updated":"2022-08-11T12:49:48.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6180v000utkscdl4j158s","content":"<ol>\n<li><p>docker images 显示所有镜像</p>\n</li>\n<li><p>docker build -t image_name .  (点就是从当前路径查找Dockerfile)</p>\n</li>\n<li><p>docker container ls 列举当前运行的容器</p>\n</li>\n<li><p>docker run -it image_name 交互式运行image</p>\n</li>\n<li><p>docker rm&#x2F;docker container rm container_id 删除container</p>\n</li>\n<li><p>docker rmi&#x2F;docker image rm image_id 删除image</p>\n</li>\n<li><p>docker container -aq 列出所有container_id (-q代表只列出id)</p>\n</li>\n<li><p>docker rm $(docker container -aq)    ($，删除所有列表中的元素)</p>\n</li>\n<li><p>docker rm $(docker container ls -f “status&#x3D;exited” -q) 删除退出的容器</p>\n</li>\n<li><p>docker commit container_name new_container_name</p>\n<p><code>docker commit frozty_jeew caesar123/centos-vim</code></p>\n</li>\n<li><p>Dockerfile 用来build一个一模一样的image</p>\n</li>\n</ol>\n<h3 id=\"Dokerfile\"><a href=\"#Dokerfile\" class=\"headerlink\" title=\"Dokerfile\"></a>Dokerfile</h3><ul>\n<li>FROM strach # 制作base image</li>\n<li>FROM centos # 使用base image</li>\n<li>FROM ubuntu:14.04</li>\n<li>LABEL maintainer &#x3D; “<a href=\"mailto:&#x37;&#55;&#53;&#x36;&#53;&#x30;&#x31;&#x31;&#55;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#109;\">&#x37;&#55;&#53;&#x36;&#53;&#x30;&#x31;&#x31;&#55;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#109;</a>“ (METADATA:注释)</li>\n<li>LABEL version &#x3D; “1.0”</li>\n<li>RUN yum update &amp;&amp; yun install -y vim <br>python-dev</li>\n<li>每次运行RUN都会生成新的image，所以尽量合并成一行</li>\n<li>WORKDIR &#x2F;root # 设定工作目录</li>\n</ul>\n<pre><code>WORKDIR /test # 如果没有会自动创建test目录     \nWORKDIR demo\nRUN pwd # 输出结果应该是/test/demo\n</code></pre>\n<ul>\n<li>用WORKDIR, 不要使用 RUN cd,尽量使用绝对目录</li>\n<li>ADD(COPY)</li>\n<li>ADD hello &#x2F;</li>\n<li>ADD test.tar.gz &#x2F; # 添加到根目录并解压</li>\n</ul>\n<pre><code>WORKDIR /root\nADD hello test/ # /root/test/hello\n</code></pre>\n<pre><code>WORKDIR /root\nCOPY hello test/ # /root/test/hello\n</code></pre>\n<ul>\n<li>大部分情况，COPY优于ADD，ADD除了COPY还有解压功能</li>\n<li>添加远程文件&#x2F;目录请使用curl或者wget</li>\n<li>ENV MYSQL_VERSION 5.6 # 设置常量</li>\n</ul>\n<pre><code>ENV MYSQL_VERSION 5.6 # 设置常量\nRUN apt-get install -y mysql-server= &quot;$&#123;MYSQL_VERSION&#125;&quot; \\\n   &amp;&amp; rm -rf /var/lib/apt/lists/* 引用常量\n</code></pre>\n<ul>\n<li>尽量使用ENV增加可维护性</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<ol>\n<li><p>docker images 显示所有镜像</p>\n</li>\n<li><p>docker build -t image_name .  (点就是从当前路径查找Dockerfile)</p>\n</li>\n<li><p>docker container ls 列举当前运行的容器</p>\n</li>\n<li><p>docker run -it image_name 交互式运行image</p>\n</li>\n<li><p>docker rm&#x2F;docker container rm container_id 删除container</p>\n</li>\n<li><p>docker rmi&#x2F;docker image rm image_id 删除image</p>\n</li>\n<li><p>docker container -aq 列出所有container_id (-q代表只列出id)</p>\n</li>\n<li><p>docker rm $(docker container -aq)    ($，删除所有列表中的元素)</p>\n</li>\n<li><p>docker rm $(docker container ls -f “status&#x3D;exited” -q) 删除退出的容器</p>\n</li>\n<li><p>docker commit container_name new_container_name</p>\n<p><code>docker commit frozty_jeew caesar123/centos-vim</code></p>\n</li>\n<li><p>Dockerfile 用来build一个一模一样的image</p>\n</li>\n</ol>\n<h3 id=\"Dokerfile\"><a href=\"#Dokerfile\" class=\"headerlink\" title=\"Dokerfile\"></a>Dokerfile</h3><ul>\n<li>FROM strach # 制作base image</li>\n<li>FROM centos # 使用base image</li>\n<li>FROM ubuntu:14.04</li>\n<li>LABEL maintainer &#x3D; “<a href=\"mailto:&#x37;&#55;&#53;&#x36;&#53;&#x30;&#x31;&#x31;&#55;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#109;\">&#x37;&#55;&#53;&#x36;&#53;&#x30;&#x31;&#x31;&#55;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#109;</a>“ (METADATA:注释)</li>\n<li>LABEL version &#x3D; “1.0”</li>\n<li>RUN yum update &amp;&amp; yun install -y vim <br>python-dev</li>\n<li>每次运行RUN都会生成新的image，所以尽量合并成一行</li>\n<li>WORKDIR &#x2F;root # 设定工作目录</li>\n</ul>\n<pre><code>WORKDIR /test # 如果没有会自动创建test目录     \nWORKDIR demo\nRUN pwd # 输出结果应该是/test/demo\n</code></pre>\n<ul>\n<li>用WORKDIR, 不要使用 RUN cd,尽量使用绝对目录</li>\n<li>ADD(COPY)</li>\n<li>ADD hello &#x2F;</li>\n<li>ADD test.tar.gz &#x2F; # 添加到根目录并解压</li>\n</ul>\n<pre><code>WORKDIR /root\nADD hello test/ # /root/test/hello\n</code></pre>\n<pre><code>WORKDIR /root\nCOPY hello test/ # /root/test/hello\n</code></pre>\n<ul>\n<li>大部分情况，COPY优于ADD，ADD除了COPY还有解压功能</li>\n<li>添加远程文件&#x2F;目录请使用curl或者wget</li>\n<li>ENV MYSQL_VERSION 5.6 # 设置常量</li>\n</ul>\n<pre><code>ENV MYSQL_VERSION 5.6 # 设置常量\nRUN apt-get install -y mysql-server= &quot;$&#123;MYSQL_VERSION&#125;&quot; \\\n   &amp;&amp; rm -rf /var/lib/apt/lists/* 引用常量\n</code></pre>\n<ul>\n<li>尽量使用ENV增加可维护性</li>\n</ul>\n"},{"title":"Docker 指令2","date":"2019-12-19T20:26:42.000Z","author":"Ginta","img":"http://img.ginta.top/fantasy1.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/fantasy1.jpg","toc":false,"mathjax":false,"summary":null,"_content":"- RUN 执行命令并创建新的Image layer\r\n- CMD 设置容器启动后默认执行的命令和参数\r\n- ENTRYPOINT 设置容器启动时执行的命令\r\n\r\n+ shell 格式\r\n```\r\nRUN apt-get install -y vim \r\nCMD echo \"hello docker\"\r\nENTRYPOINT echo \"hello docker\"\r\n```\r\n\r\n+ Exec格式\r\n```\r\nRUN [\"apt-get\", \"install\", \"-y\", \"vim\"]\r\nCMD [\"/bin/echo\", \"hello docker\"]\r\nENTRYPOINT [\"/bin/echo\", \"hello docker\"]\r\n```","source":"_posts/Docker 指令2.md","raw":"---\ntitle: Docker 指令2\ndate: 2019-12-20 04:26:42\nauthor: Ginta\nimg: http://img.ginta.top/fantasy1.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/fantasy1.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: docker\n---\n- RUN 执行命令并创建新的Image layer\r\n- CMD 设置容器启动后默认执行的命令和参数\r\n- ENTRYPOINT 设置容器启动时执行的命令\r\n\r\n+ shell 格式\r\n```\r\nRUN apt-get install -y vim \r\nCMD echo \"hello docker\"\r\nENTRYPOINT echo \"hello docker\"\r\n```\r\n\r\n+ Exec格式\r\n```\r\nRUN [\"apt-get\", \"install\", \"-y\", \"vim\"]\r\nCMD [\"/bin/echo\", \"hello docker\"]\r\nENTRYPOINT [\"/bin/echo\", \"hello docker\"]\r\n```","slug":"Docker 指令2","published":1,"updated":"2022-08-11T12:49:48.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6180v000wtksc0qtectb5","content":"<ul>\n<li>RUN 执行命令并创建新的Image layer</li>\n<li>CMD 设置容器启动后默认执行的命令和参数</li>\n<li>ENTRYPOINT 设置容器启动时执行的命令</li>\n</ul>\n<ul>\n<li>shell 格式</li>\n</ul>\n<pre><code>RUN apt-get install -y vim \nCMD echo &quot;hello docker&quot;\nENTRYPOINT echo &quot;hello docker&quot;\n</code></pre>\n<ul>\n<li>Exec格式</li>\n</ul>\n<pre><code>RUN [&quot;apt-get&quot;, &quot;install&quot;, &quot;-y&quot;, &quot;vim&quot;]\nCMD [&quot;/bin/echo&quot;, &quot;hello docker&quot;]\nENTRYPOINT [&quot;/bin/echo&quot;, &quot;hello docker&quot;]\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<ul>\n<li>RUN 执行命令并创建新的Image layer</li>\n<li>CMD 设置容器启动后默认执行的命令和参数</li>\n<li>ENTRYPOINT 设置容器启动时执行的命令</li>\n</ul>\n<ul>\n<li>shell 格式</li>\n</ul>\n<pre><code>RUN apt-get install -y vim \nCMD echo &quot;hello docker&quot;\nENTRYPOINT echo &quot;hello docker&quot;\n</code></pre>\n<ul>\n<li>Exec格式</li>\n</ul>\n<pre><code>RUN [&quot;apt-get&quot;, &quot;install&quot;, &quot;-y&quot;, &quot;vim&quot;]\nCMD [&quot;/bin/echo&quot;, &quot;hello docker&quot;]\nENTRYPOINT [&quot;/bin/echo&quot;, &quot;hello docker&quot;]\n</code></pre>\n"},{"title":"Elasticsearch基本查询","date":"2019-12-28T06:26:20.000Z","author":"Ginta","img":"http://img.ginta.top/qinshi2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/qinshi2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"### 准备数据\r\n```\r\n# 添加映射  \r\nPUT lagou\r\n{\r\n  \"mappings\": {\r\n    \"job\":{\r\n      \"properties\": {\r\n        \"title\":{\r\n          \"store\": true,\r\n          \"type\": \"text\",\r\n          \"analyzer\": \"ik_max_word\"\r\n        },\r\n        \"company_name\":{\r\n          \"store\": true,\r\n          \"type\": \"keyword\"\r\n        },\r\n        \"desc\":{\r\n          \"type\": \"text\"\r\n        },\r\n        \"comments\":{\r\n          \"type\": \"integer\"\r\n        },\r\n        \"add_time\":{\r\n          \"type\": \"date\",\r\n          \"format\": \"yyyy-MM-dd\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nPOST lagou/job/\r\n{\r\n    \"title\":\"python django 开发工程师\",\r\n    \"company_name\":\"美团科技有限公司\",\r\n    \"desc\":\"对django的概念熟悉，熟悉python基础知识\",\r\n    \"comments\":20,\r\n    \"add_time\":\"2019-5-30\"\r\n}\r\n\r\nPOST lagou/job/\r\n{\r\n    \"title\":\"python scrapy redis分布式爬虫基本\",\r\n    \"company_name\":\"百度科技有限公司\",\r\n    \"desc\":\"scrapy的概念熟悉，熟悉redis基础知识\",\r\n    \"comments\":5,\r\n    \"add_time\":\"2019-5-1\"\r\n}\r\n\r\nPOST lagou/job/\r\n{\r\n    \"title\":\"elasticsearch打造搜索引擎\",\r\n    \"company_name\":\"阿里巴巴科技有限公司\",\r\n    \"desc\":\"熟悉数据结构算法，熟悉python基础开发\",\r\n    \"comments\":60,\r\n    \"add_time\":\"2019-4-15\"\r\n}\r\n\r\nPOST lagou/job/\r\n{\r\n    \"title\":\"python打造推荐引擎系统\",\r\n    \"company_name\":\"阿里巴巴科技有限公司\",\r\n    \"desc\":\"熟悉推荐引擎的原理以及算法，掌握C语言\",\r\n    \"comments\":60,\r\n    \"add_time\":\"2019-1-22\"\r\n}\r\n\r\n```\r\n\r\n## 查询\r\n### 基本查询\r\n1. match(会对输入进行分词)\r\n```\r\nGET lagou/_search\r\n{\r\n  \"query\": {\r\n    \"match\": {\r\n      \"title\": \"爬取\"\r\n    }\r\n  }\r\n}\r\n\r\nGET lagou/_search\r\n{\r\n  \"query\": {\r\n    \"match\": {\r\n      \"title\": \"爬取\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n2. term(不会分词)\r\n```\r\nGET lagou/_search\r\n{\r\n  \"query\": {\r\n    \"term\": {\r\n      \"title\": \"python爬虫\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n3. terms(满足任何一个)\r\n```\r\n# terms查询\r\nGET lagou/_search\r\n{\r\n  \"query\": {\r\n    \"terms\": {\r\n      \"title\": [\"工程师\", \"django\", \"系统\"]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n4. query查询(控制查询的返回数量)\r\n```\r\nGET lagou/_search\r\n{\r\n  \"query\": {\r\n    \"match\": {\r\n      \"title\": \"python\"\r\n    }\r\n  },\r\n  \"from\":1,\r\n  \"size\":2\r\n}\r\n```\r\n\r\n5. match_all查询\r\n```\r\nGET lagou/_search\r\n{\r\n  \"query\": {\r\n    \"match_all\": {}\r\n  }\r\n}\r\n```\r\n\r\n6. multi_match查询\r\n```\r\n# 比如可以指定多个字段\r\n# 比如查询title和desc这两个字段里面包含python的关键词文档\r\n# 可以设置权重\r\nGET lagou/_search\r\n{\r\n  \"query\": {\r\n    \"multi_match\": {\r\n      \"query\": \"python\",\r\n      \"fields\": [\"title^3\", \"desc\"]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n7. stored_fields指定返回的字段(mappings设置了store的)\r\n```\r\nGET lagou/_search\r\n{\r\n  \"stored_fields\": [\"title\"],\r\n  \"query\": {\r\n    \"match\": {\r\n      \"title\": \"python\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n8. sort(排序返回 asc,desc)\r\n```\r\nGET lagou/_search\r\n{\r\n  \"query\": {\r\n    \"match_all\": {}\r\n  },\r\n  \"sort\": [\r\n    {\r\n      \"comments\": {\r\n        \"order\": \"desc\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n9. range(范围查询)\r\nboost: 权重\r\n```\r\nGET lagou/_search\r\n{\r\n  \"query\": {\r\n    \"range\": {\r\n      \"comments\": {\r\n        \"gte\": 10,\r\n        \"lte\": 20,\r\n        \"boost\": 2.0\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nGET lagou/_search\r\n{\r\n  \"query\": {\r\n    \"range\": {\r\n      \"add_time\": {\r\n        \"gt\": \"2019-4-1\"\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\n10. match_phrase(短语查询，自动分词，满足所有则返回)\r\nslop: 两个词之前的距离\r\n```\r\nGET lagou/_search\r\n{\r\n  \"query\": {\r\n    \"match_phrase\": {\r\n      \"title\": {\r\n        \"query\": \"python系统\",\r\n        \"slop\": 6\r\n      }\r\n    }\r\n  }\r\n}\r\n```","source":"_posts/Elasticsearch基本查询.md","raw":"---\ntitle: Elasticsearch基本查询\ndate: 2019-12-28 14:26:20\nauthor: Ginta\nimg: http://img.ginta.top/qinshi2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/qinshi2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: 数据库\n---\n### 准备数据\r\n```\r\n# 添加映射  \r\nPUT lagou\r\n{\r\n  \"mappings\": {\r\n    \"job\":{\r\n      \"properties\": {\r\n        \"title\":{\r\n          \"store\": true,\r\n          \"type\": \"text\",\r\n          \"analyzer\": \"ik_max_word\"\r\n        },\r\n        \"company_name\":{\r\n          \"store\": true,\r\n          \"type\": \"keyword\"\r\n        },\r\n        \"desc\":{\r\n          \"type\": \"text\"\r\n        },\r\n        \"comments\":{\r\n          \"type\": \"integer\"\r\n        },\r\n        \"add_time\":{\r\n          \"type\": \"date\",\r\n          \"format\": \"yyyy-MM-dd\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nPOST lagou/job/\r\n{\r\n    \"title\":\"python django 开发工程师\",\r\n    \"company_name\":\"美团科技有限公司\",\r\n    \"desc\":\"对django的概念熟悉，熟悉python基础知识\",\r\n    \"comments\":20,\r\n    \"add_time\":\"2019-5-30\"\r\n}\r\n\r\nPOST lagou/job/\r\n{\r\n    \"title\":\"python scrapy redis分布式爬虫基本\",\r\n    \"company_name\":\"百度科技有限公司\",\r\n    \"desc\":\"scrapy的概念熟悉，熟悉redis基础知识\",\r\n    \"comments\":5,\r\n    \"add_time\":\"2019-5-1\"\r\n}\r\n\r\nPOST lagou/job/\r\n{\r\n    \"title\":\"elasticsearch打造搜索引擎\",\r\n    \"company_name\":\"阿里巴巴科技有限公司\",\r\n    \"desc\":\"熟悉数据结构算法，熟悉python基础开发\",\r\n    \"comments\":60,\r\n    \"add_time\":\"2019-4-15\"\r\n}\r\n\r\nPOST lagou/job/\r\n{\r\n    \"title\":\"python打造推荐引擎系统\",\r\n    \"company_name\":\"阿里巴巴科技有限公司\",\r\n    \"desc\":\"熟悉推荐引擎的原理以及算法，掌握C语言\",\r\n    \"comments\":60,\r\n    \"add_time\":\"2019-1-22\"\r\n}\r\n\r\n```\r\n\r\n## 查询\r\n### 基本查询\r\n1. match(会对输入进行分词)\r\n```\r\nGET lagou/_search\r\n{\r\n  \"query\": {\r\n    \"match\": {\r\n      \"title\": \"爬取\"\r\n    }\r\n  }\r\n}\r\n\r\nGET lagou/_search\r\n{\r\n  \"query\": {\r\n    \"match\": {\r\n      \"title\": \"爬取\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n2. term(不会分词)\r\n```\r\nGET lagou/_search\r\n{\r\n  \"query\": {\r\n    \"term\": {\r\n      \"title\": \"python爬虫\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n3. terms(满足任何一个)\r\n```\r\n# terms查询\r\nGET lagou/_search\r\n{\r\n  \"query\": {\r\n    \"terms\": {\r\n      \"title\": [\"工程师\", \"django\", \"系统\"]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n4. query查询(控制查询的返回数量)\r\n```\r\nGET lagou/_search\r\n{\r\n  \"query\": {\r\n    \"match\": {\r\n      \"title\": \"python\"\r\n    }\r\n  },\r\n  \"from\":1,\r\n  \"size\":2\r\n}\r\n```\r\n\r\n5. match_all查询\r\n```\r\nGET lagou/_search\r\n{\r\n  \"query\": {\r\n    \"match_all\": {}\r\n  }\r\n}\r\n```\r\n\r\n6. multi_match查询\r\n```\r\n# 比如可以指定多个字段\r\n# 比如查询title和desc这两个字段里面包含python的关键词文档\r\n# 可以设置权重\r\nGET lagou/_search\r\n{\r\n  \"query\": {\r\n    \"multi_match\": {\r\n      \"query\": \"python\",\r\n      \"fields\": [\"title^3\", \"desc\"]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n7. stored_fields指定返回的字段(mappings设置了store的)\r\n```\r\nGET lagou/_search\r\n{\r\n  \"stored_fields\": [\"title\"],\r\n  \"query\": {\r\n    \"match\": {\r\n      \"title\": \"python\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n8. sort(排序返回 asc,desc)\r\n```\r\nGET lagou/_search\r\n{\r\n  \"query\": {\r\n    \"match_all\": {}\r\n  },\r\n  \"sort\": [\r\n    {\r\n      \"comments\": {\r\n        \"order\": \"desc\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n9. range(范围查询)\r\nboost: 权重\r\n```\r\nGET lagou/_search\r\n{\r\n  \"query\": {\r\n    \"range\": {\r\n      \"comments\": {\r\n        \"gte\": 10,\r\n        \"lte\": 20,\r\n        \"boost\": 2.0\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nGET lagou/_search\r\n{\r\n  \"query\": {\r\n    \"range\": {\r\n      \"add_time\": {\r\n        \"gt\": \"2019-4-1\"\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\n10. match_phrase(短语查询，自动分词，满足所有则返回)\r\nslop: 两个词之前的距离\r\n```\r\nGET lagou/_search\r\n{\r\n  \"query\": {\r\n    \"match_phrase\": {\r\n      \"title\": {\r\n        \"query\": \"python系统\",\r\n        \"slop\": 6\r\n      }\r\n    }\r\n  }\r\n}\r\n```","slug":"Elasticsearch基本查询","published":1,"updated":"2022-08-11T12:49:48.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6180w0010tksc3uh94tom","content":"<h3 id=\"准备数据\"><a href=\"#准备数据\" class=\"headerlink\" title=\"准备数据\"></a>准备数据</h3><pre><code># 添加映射  \nPUT lagou\n&#123;\n  &quot;mappings&quot;: &#123;\n    &quot;job&quot;:&#123;\n      &quot;properties&quot;: &#123;\n        &quot;title&quot;:&#123;\n          &quot;store&quot;: true,\n          &quot;type&quot;: &quot;text&quot;,\n          &quot;analyzer&quot;: &quot;ik_max_word&quot;\n        &#125;,\n        &quot;company_name&quot;:&#123;\n          &quot;store&quot;: true,\n          &quot;type&quot;: &quot;keyword&quot;\n        &#125;,\n        &quot;desc&quot;:&#123;\n          &quot;type&quot;: &quot;text&quot;\n        &#125;,\n        &quot;comments&quot;:&#123;\n          &quot;type&quot;: &quot;integer&quot;\n        &#125;,\n        &quot;add_time&quot;:&#123;\n          &quot;type&quot;: &quot;date&quot;,\n          &quot;format&quot;: &quot;yyyy-MM-dd&quot;\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n\nPOST lagou/job/\n&#123;\n    &quot;title&quot;:&quot;python django 开发工程师&quot;,\n    &quot;company_name&quot;:&quot;美团科技有限公司&quot;,\n    &quot;desc&quot;:&quot;对django的概念熟悉，熟悉python基础知识&quot;,\n    &quot;comments&quot;:20,\n    &quot;add_time&quot;:&quot;2019-5-30&quot;\n&#125;\n\nPOST lagou/job/\n&#123;\n    &quot;title&quot;:&quot;python scrapy redis分布式爬虫基本&quot;,\n    &quot;company_name&quot;:&quot;百度科技有限公司&quot;,\n    &quot;desc&quot;:&quot;scrapy的概念熟悉，熟悉redis基础知识&quot;,\n    &quot;comments&quot;:5,\n    &quot;add_time&quot;:&quot;2019-5-1&quot;\n&#125;\n\nPOST lagou/job/\n&#123;\n    &quot;title&quot;:&quot;elasticsearch打造搜索引擎&quot;,\n    &quot;company_name&quot;:&quot;阿里巴巴科技有限公司&quot;,\n    &quot;desc&quot;:&quot;熟悉数据结构算法，熟悉python基础开发&quot;,\n    &quot;comments&quot;:60,\n    &quot;add_time&quot;:&quot;2019-4-15&quot;\n&#125;\n\nPOST lagou/job/\n&#123;\n    &quot;title&quot;:&quot;python打造推荐引擎系统&quot;,\n    &quot;company_name&quot;:&quot;阿里巴巴科技有限公司&quot;,\n    &quot;desc&quot;:&quot;熟悉推荐引擎的原理以及算法，掌握C语言&quot;,\n    &quot;comments&quot;:60,\n    &quot;add_time&quot;:&quot;2019-1-22&quot;\n&#125;\n</code></pre>\n<h2 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h2><h3 id=\"基本查询\"><a href=\"#基本查询\" class=\"headerlink\" title=\"基本查询\"></a>基本查询</h3><ol>\n<li>match(会对输入进行分词)</li>\n</ol>\n<pre><code>GET lagou/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;match&quot;: &#123;\n      &quot;title&quot;: &quot;爬取&quot;\n    &#125;\n  &#125;\n&#125;\n\nGET lagou/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;match&quot;: &#123;\n      &quot;title&quot;: &quot;爬取&quot;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<ol start=\"2\">\n<li>term(不会分词)</li>\n</ol>\n<pre><code>GET lagou/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;term&quot;: &#123;\n      &quot;title&quot;: &quot;python爬虫&quot;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<ol start=\"3\">\n<li>terms(满足任何一个)</li>\n</ol>\n<pre><code># terms查询\nGET lagou/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;terms&quot;: &#123;\n      &quot;title&quot;: [&quot;工程师&quot;, &quot;django&quot;, &quot;系统&quot;]\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<ol start=\"4\">\n<li>query查询(控制查询的返回数量)</li>\n</ol>\n<pre><code>GET lagou/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;match&quot;: &#123;\n      &quot;title&quot;: &quot;python&quot;\n    &#125;\n  &#125;,\n  &quot;from&quot;:1,\n  &quot;size&quot;:2\n&#125;\n</code></pre>\n<ol start=\"5\">\n<li>match_all查询</li>\n</ol>\n<pre><code>GET lagou/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;match_all&quot;: &#123;&#125;\n  &#125;\n&#125;\n</code></pre>\n<ol start=\"6\">\n<li>multi_match查询</li>\n</ol>\n<pre><code># 比如可以指定多个字段\n# 比如查询title和desc这两个字段里面包含python的关键词文档\n# 可以设置权重\nGET lagou/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;multi_match&quot;: &#123;\n      &quot;query&quot;: &quot;python&quot;,\n      &quot;fields&quot;: [&quot;title^3&quot;, &quot;desc&quot;]\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<ol start=\"7\">\n<li>stored_fields指定返回的字段(mappings设置了store的)</li>\n</ol>\n<pre><code>GET lagou/_search\n&#123;\n  &quot;stored_fields&quot;: [&quot;title&quot;],\n  &quot;query&quot;: &#123;\n    &quot;match&quot;: &#123;\n      &quot;title&quot;: &quot;python&quot;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<ol start=\"8\">\n<li>sort(排序返回 asc,desc)</li>\n</ol>\n<pre><code>GET lagou/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;match_all&quot;: &#123;&#125;\n  &#125;,\n  &quot;sort&quot;: [\n    &#123;\n      &quot;comments&quot;: &#123;\n        &quot;order&quot;: &quot;desc&quot;\n      &#125;\n    &#125;\n  ]\n&#125;\n</code></pre>\n<ol start=\"9\">\n<li>range(范围查询)<br>boost: 权重</li>\n</ol>\n<pre><code>GET lagou/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;range&quot;: &#123;\n      &quot;comments&quot;: &#123;\n        &quot;gte&quot;: 10,\n        &quot;lte&quot;: 20,\n        &quot;boost&quot;: 2.0\n      &#125;\n    &#125;\n  &#125;\n&#125;\n\nGET lagou/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;range&quot;: &#123;\n      &quot;add_time&quot;: &#123;\n        &quot;gt&quot;: &quot;2019-4-1&quot;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<ol start=\"10\">\n<li>match_phrase(短语查询，自动分词，满足所有则返回)<br>slop: 两个词之前的距离</li>\n</ol>\n<pre><code>GET lagou/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;match_phrase&quot;: &#123;\n      &quot;title&quot;: &#123;\n        &quot;query&quot;: &quot;python系统&quot;,\n        &quot;slop&quot;: 6\n      &#125;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h3 id=\"准备数据\"><a href=\"#准备数据\" class=\"headerlink\" title=\"准备数据\"></a>准备数据</h3><pre><code># 添加映射  \nPUT lagou\n&#123;\n  &quot;mappings&quot;: &#123;\n    &quot;job&quot;:&#123;\n      &quot;properties&quot;: &#123;\n        &quot;title&quot;:&#123;\n          &quot;store&quot;: true,\n          &quot;type&quot;: &quot;text&quot;,\n          &quot;analyzer&quot;: &quot;ik_max_word&quot;\n        &#125;,\n        &quot;company_name&quot;:&#123;\n          &quot;store&quot;: true,\n          &quot;type&quot;: &quot;keyword&quot;\n        &#125;,\n        &quot;desc&quot;:&#123;\n          &quot;type&quot;: &quot;text&quot;\n        &#125;,\n        &quot;comments&quot;:&#123;\n          &quot;type&quot;: &quot;integer&quot;\n        &#125;,\n        &quot;add_time&quot;:&#123;\n          &quot;type&quot;: &quot;date&quot;,\n          &quot;format&quot;: &quot;yyyy-MM-dd&quot;\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n\nPOST lagou/job/\n&#123;\n    &quot;title&quot;:&quot;python django 开发工程师&quot;,\n    &quot;company_name&quot;:&quot;美团科技有限公司&quot;,\n    &quot;desc&quot;:&quot;对django的概念熟悉，熟悉python基础知识&quot;,\n    &quot;comments&quot;:20,\n    &quot;add_time&quot;:&quot;2019-5-30&quot;\n&#125;\n\nPOST lagou/job/\n&#123;\n    &quot;title&quot;:&quot;python scrapy redis分布式爬虫基本&quot;,\n    &quot;company_name&quot;:&quot;百度科技有限公司&quot;,\n    &quot;desc&quot;:&quot;scrapy的概念熟悉，熟悉redis基础知识&quot;,\n    &quot;comments&quot;:5,\n    &quot;add_time&quot;:&quot;2019-5-1&quot;\n&#125;\n\nPOST lagou/job/\n&#123;\n    &quot;title&quot;:&quot;elasticsearch打造搜索引擎&quot;,\n    &quot;company_name&quot;:&quot;阿里巴巴科技有限公司&quot;,\n    &quot;desc&quot;:&quot;熟悉数据结构算法，熟悉python基础开发&quot;,\n    &quot;comments&quot;:60,\n    &quot;add_time&quot;:&quot;2019-4-15&quot;\n&#125;\n\nPOST lagou/job/\n&#123;\n    &quot;title&quot;:&quot;python打造推荐引擎系统&quot;,\n    &quot;company_name&quot;:&quot;阿里巴巴科技有限公司&quot;,\n    &quot;desc&quot;:&quot;熟悉推荐引擎的原理以及算法，掌握C语言&quot;,\n    &quot;comments&quot;:60,\n    &quot;add_time&quot;:&quot;2019-1-22&quot;\n&#125;\n</code></pre>\n<h2 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h2><h3 id=\"基本查询\"><a href=\"#基本查询\" class=\"headerlink\" title=\"基本查询\"></a>基本查询</h3><ol>\n<li>match(会对输入进行分词)</li>\n</ol>\n<pre><code>GET lagou/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;match&quot;: &#123;\n      &quot;title&quot;: &quot;爬取&quot;\n    &#125;\n  &#125;\n&#125;\n\nGET lagou/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;match&quot;: &#123;\n      &quot;title&quot;: &quot;爬取&quot;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<ol start=\"2\">\n<li>term(不会分词)</li>\n</ol>\n<pre><code>GET lagou/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;term&quot;: &#123;\n      &quot;title&quot;: &quot;python爬虫&quot;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<ol start=\"3\">\n<li>terms(满足任何一个)</li>\n</ol>\n<pre><code># terms查询\nGET lagou/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;terms&quot;: &#123;\n      &quot;title&quot;: [&quot;工程师&quot;, &quot;django&quot;, &quot;系统&quot;]\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<ol start=\"4\">\n<li>query查询(控制查询的返回数量)</li>\n</ol>\n<pre><code>GET lagou/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;match&quot;: &#123;\n      &quot;title&quot;: &quot;python&quot;\n    &#125;\n  &#125;,\n  &quot;from&quot;:1,\n  &quot;size&quot;:2\n&#125;\n</code></pre>\n<ol start=\"5\">\n<li>match_all查询</li>\n</ol>\n<pre><code>GET lagou/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;match_all&quot;: &#123;&#125;\n  &#125;\n&#125;\n</code></pre>\n<ol start=\"6\">\n<li>multi_match查询</li>\n</ol>\n<pre><code># 比如可以指定多个字段\n# 比如查询title和desc这两个字段里面包含python的关键词文档\n# 可以设置权重\nGET lagou/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;multi_match&quot;: &#123;\n      &quot;query&quot;: &quot;python&quot;,\n      &quot;fields&quot;: [&quot;title^3&quot;, &quot;desc&quot;]\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<ol start=\"7\">\n<li>stored_fields指定返回的字段(mappings设置了store的)</li>\n</ol>\n<pre><code>GET lagou/_search\n&#123;\n  &quot;stored_fields&quot;: [&quot;title&quot;],\n  &quot;query&quot;: &#123;\n    &quot;match&quot;: &#123;\n      &quot;title&quot;: &quot;python&quot;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<ol start=\"8\">\n<li>sort(排序返回 asc,desc)</li>\n</ol>\n<pre><code>GET lagou/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;match_all&quot;: &#123;&#125;\n  &#125;,\n  &quot;sort&quot;: [\n    &#123;\n      &quot;comments&quot;: &#123;\n        &quot;order&quot;: &quot;desc&quot;\n      &#125;\n    &#125;\n  ]\n&#125;\n</code></pre>\n<ol start=\"9\">\n<li>range(范围查询)<br>boost: 权重</li>\n</ol>\n<pre><code>GET lagou/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;range&quot;: &#123;\n      &quot;comments&quot;: &#123;\n        &quot;gte&quot;: 10,\n        &quot;lte&quot;: 20,\n        &quot;boost&quot;: 2.0\n      &#125;\n    &#125;\n  &#125;\n&#125;\n\nGET lagou/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;range&quot;: &#123;\n      &quot;add_time&quot;: &#123;\n        &quot;gt&quot;: &quot;2019-4-1&quot;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<ol start=\"10\">\n<li>match_phrase(短语查询，自动分词，满足所有则返回)<br>slop: 两个词之前的距离</li>\n</ol>\n<pre><code>GET lagou/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;match_phrase&quot;: &#123;\n      &quot;title&quot;: &#123;\n        &quot;query&quot;: &quot;python系统&quot;,\n        &quot;slop&quot;: 6\n      &#125;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n"},{"title":"Elasticsearch操作","date":"2019-12-28T06:25:47.000Z","author":"Ginta","img":"http://img.ginta.top/chaoshou2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/chaoshou2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"```\r\n# es的文档，索引的 CRUD 操作\r\n# 索引初始化操作\r\n# 指定分片和副本的数量\r\n# shards一旦设置不能修改（副本数量）\r\n\r\n# 设置索引  \r\nPUT lagou\r\n{\r\n  \"settings\": {\r\n    \"index\":{\r\n      \"number_of_shards\": 5,\r\n      \"number_of_replicas\": 2\r\n    }\r\n  }  \r\n}\r\n\r\nGET lagou/_settings\r\nGET _all/_settings\r\nGET .kibana,lagou/_settings\r\nGET lagou/job/1/_source\r\n\r\n# 修改settings\r\nPUT lagou/_settings\r\n{\r\n  \"number_of_shards\": 2\r\n}\r\n\r\n# 保存文档  \r\nPUT lagou/job/2\r\n{\r\n    \"title\": \"python分布式爬虫开发\",\r\n    \"salary_min\": 15000,\r\n    \"city\": \"北京\",\r\n    \"company\": {\r\n        \"name\": \"百度\",\r\n        \"company_addr\": \"北京市软件园\"\r\n    },\r\n    \"publish_data\": \"2019-5-30\",\r\n    \"comments\": 15\r\n}\r\n\r\nPOST lagou/job/1\r\n{\r\n    \"title\": \"python django 开发工程师\",\r\n    \"salary_min\": 3000,\r\n    \"city\": \"天猫\",\r\n    \"company\": {\r\n        \"name\": \"美团科技\",\r\n        \"company_addr\": \"北京市软件园A区\"\r\n    },\r\n    \"publish_data\": \"2019-5-30\",\r\n    \"comments\": 2\r\n}\r\n\r\n\r\nGET lagou/job/2?_source=city,company.name\r\n\r\n# 修改文章\r\nPUT lagou/job/2\r\n{\r\n    \"title\": \"python分布式爬虫开发\",\r\n    \"salary_min\": 15000,\r\n    \"city\": \"北京\",\r\n    \"company\": {\r\n        \"name\": \"百度\",\r\n        \"company_addr\": \"北京市软件园\"\r\n    },\r\n    \"publish_data\": \"2019-5-30\",\r\n    \"comments\": 23\r\n}\r\n\r\n# 修改文章2\r\nPOST lagou/job/2/_update\r\n{\r\n  \"doc\":{\r\n    \"comments\": 21\r\n  }\r\n}\r\n\r\n\r\nDELETE lagou/job/1\r\nDELETE lagou\r\n\r\n# 批量获取\r\nGET _mget\r\n{\r\n  \"docs\":[\r\n    { \r\n      \"_index\":\"lagou\",\r\n      \"_type\": \"job2\",\r\n      \"_id\": 2\r\n    },\r\n    { \r\n      \"_index\":\"lagou\",\r\n      \"_type\": \"job\",\r\n      \"_id\": 1\r\n    }\r\n  ]\r\n}\r\n\r\n# index一样\r\nGET lagou/_mget\r\n{\r\n  \"docs\":[\r\n    { \r\n      \"_type\": \"job2\",\r\n      \"_id\": 2\r\n    },\r\n    { \r\n      \"_type\": \"job\",\r\n      \"_id\": 1\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n# index,type一样\r\n\r\nGET lagou/job2/_mget\r\n{\r\n  \"docs\":[\r\n    { \r\n      \"_id\": 2\r\n    },\r\n    { \r\n      \"_id\": 1\r\n    }\r\n  ]\r\n}\r\n\r\nGET lagou/job2/_mget\r\n{\r\n  \"ids\": [1,2]\r\n}\r\n\r\n\r\n```\r\n### bulk批量操作\r\nbulk操作不能分行，json必需一行写完\r\n```\r\n{\"index\": {\"_index\": \"zhilian\", \"_type\": \"job\", \"_id\": \"1\"}}\r\n{\"title\": \"python分布式爬虫开发\",\"salary_min\": 15000,\"city\": \"北京\",\"company\": {\"name\": \"百度\",\"company_addr\": \"北京市软件园\"},\"publish_data\": \"2019-5-30\",\"comments\": 23}\r\n{\"index\": {\"_index\": \"zhilian\", \"_type\": \"job\", \"_id\": \"2\"}}\r\n{\"title\": \"爬虫开发\",\"salary_min\": 1500,\"city\": \"太原\",\"company\": {\"name\": \"阿里\",\"company_addr\": \"太原市软件园\"},\"publish_data\": \"2019-5-30\",\"comments\": 23}\r\n```\r\n\r\n### bulk其他操作\r\n```\r\n{\"index\": {\"_index\": \"test\", \"_type\": \"type1\", \"_id\": \"1\"}}\r\n{\"field1\" : \"value1\"}\r\n{\"delete\": {\"_index\": \"test\", \"_type\": \"type1\", \"_id\": \"2\"}}\r\n{\"create\": {\"_index\": \"test\", \"_type\": \"type1\", \"_id\": \"3\"}}\r\n{\"field1\" : \"value3\"}\r\n{\"update\": {\"_index\": \"index1\", \"_type\": \"type1\", \"_id\": \"1\"}}\r\n{\"doc\":{\"field2\": \"value2\"}\r\n```\r\n\r\n### elasticsearch映射\r\n```\r\n# 创建索引\r\nPUT lagou\r\n{\r\n  \"mappings\": {\r\n    \"job\":{\r\n      \"properties\": {\r\n        \"title\":{\r\n          \"type\": \"text\"\r\n        },\r\n        \"salary_min\":{\r\n          \"type\": \"integer\"\r\n        },\r\n        \"city\":{\r\n          \"type\":\"keyword\"\r\n        },\r\n        \"company\":{\r\n          \"properties\": {\r\n            \"name\":{\r\n              \"type\":\"text\"\r\n            },\r\n            \"company_addr\":{\r\n              \"type\":\"text\"\r\n            },\r\n            \"employee_count\":{\r\n              \"type\":\"integer\"\r\n            }\r\n          }\r\n        },\r\n        \"publish_date\":{\r\n          \"type\": \"date\",\r\n          \"format\": \"yyyy-MM-dd\"\r\n        },\r\n        \"comments\":{\r\n          \"type\": \"integer\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\nPUT lagou/job/3\r\n{\r\n    \"title\": \"python分布式爬虫开发\",\r\n    \"salary_min\": \"abc\",\r\n    \"city\": \"北京\",\r\n    \"company\": {\r\n        \"name\": \"百度\",\r\n        \"company_addr\": \"北京市软件园\",\r\n        \"employee_count\":50\r\n    },\r\n    \"publish_data\": \"2019-5-30\",\r\n    \"comments\": 15\r\n}\r\n\r\nGET lagou/_mapping/job\r\nGET _all/_mapping/job\r\n```","source":"_posts/Elasticsearch操作.md","raw":"---\ntitle: Elasticsearch操作\ndate: 2019-12-28 14:25:47\nauthor: Ginta\nimg: http://img.ginta.top/chaoshou2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/chaoshou2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: 数据库\n---\n```\r\n# es的文档，索引的 CRUD 操作\r\n# 索引初始化操作\r\n# 指定分片和副本的数量\r\n# shards一旦设置不能修改（副本数量）\r\n\r\n# 设置索引  \r\nPUT lagou\r\n{\r\n  \"settings\": {\r\n    \"index\":{\r\n      \"number_of_shards\": 5,\r\n      \"number_of_replicas\": 2\r\n    }\r\n  }  \r\n}\r\n\r\nGET lagou/_settings\r\nGET _all/_settings\r\nGET .kibana,lagou/_settings\r\nGET lagou/job/1/_source\r\n\r\n# 修改settings\r\nPUT lagou/_settings\r\n{\r\n  \"number_of_shards\": 2\r\n}\r\n\r\n# 保存文档  \r\nPUT lagou/job/2\r\n{\r\n    \"title\": \"python分布式爬虫开发\",\r\n    \"salary_min\": 15000,\r\n    \"city\": \"北京\",\r\n    \"company\": {\r\n        \"name\": \"百度\",\r\n        \"company_addr\": \"北京市软件园\"\r\n    },\r\n    \"publish_data\": \"2019-5-30\",\r\n    \"comments\": 15\r\n}\r\n\r\nPOST lagou/job/1\r\n{\r\n    \"title\": \"python django 开发工程师\",\r\n    \"salary_min\": 3000,\r\n    \"city\": \"天猫\",\r\n    \"company\": {\r\n        \"name\": \"美团科技\",\r\n        \"company_addr\": \"北京市软件园A区\"\r\n    },\r\n    \"publish_data\": \"2019-5-30\",\r\n    \"comments\": 2\r\n}\r\n\r\n\r\nGET lagou/job/2?_source=city,company.name\r\n\r\n# 修改文章\r\nPUT lagou/job/2\r\n{\r\n    \"title\": \"python分布式爬虫开发\",\r\n    \"salary_min\": 15000,\r\n    \"city\": \"北京\",\r\n    \"company\": {\r\n        \"name\": \"百度\",\r\n        \"company_addr\": \"北京市软件园\"\r\n    },\r\n    \"publish_data\": \"2019-5-30\",\r\n    \"comments\": 23\r\n}\r\n\r\n# 修改文章2\r\nPOST lagou/job/2/_update\r\n{\r\n  \"doc\":{\r\n    \"comments\": 21\r\n  }\r\n}\r\n\r\n\r\nDELETE lagou/job/1\r\nDELETE lagou\r\n\r\n# 批量获取\r\nGET _mget\r\n{\r\n  \"docs\":[\r\n    { \r\n      \"_index\":\"lagou\",\r\n      \"_type\": \"job2\",\r\n      \"_id\": 2\r\n    },\r\n    { \r\n      \"_index\":\"lagou\",\r\n      \"_type\": \"job\",\r\n      \"_id\": 1\r\n    }\r\n  ]\r\n}\r\n\r\n# index一样\r\nGET lagou/_mget\r\n{\r\n  \"docs\":[\r\n    { \r\n      \"_type\": \"job2\",\r\n      \"_id\": 2\r\n    },\r\n    { \r\n      \"_type\": \"job\",\r\n      \"_id\": 1\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n# index,type一样\r\n\r\nGET lagou/job2/_mget\r\n{\r\n  \"docs\":[\r\n    { \r\n      \"_id\": 2\r\n    },\r\n    { \r\n      \"_id\": 1\r\n    }\r\n  ]\r\n}\r\n\r\nGET lagou/job2/_mget\r\n{\r\n  \"ids\": [1,2]\r\n}\r\n\r\n\r\n```\r\n### bulk批量操作\r\nbulk操作不能分行，json必需一行写完\r\n```\r\n{\"index\": {\"_index\": \"zhilian\", \"_type\": \"job\", \"_id\": \"1\"}}\r\n{\"title\": \"python分布式爬虫开发\",\"salary_min\": 15000,\"city\": \"北京\",\"company\": {\"name\": \"百度\",\"company_addr\": \"北京市软件园\"},\"publish_data\": \"2019-5-30\",\"comments\": 23}\r\n{\"index\": {\"_index\": \"zhilian\", \"_type\": \"job\", \"_id\": \"2\"}}\r\n{\"title\": \"爬虫开发\",\"salary_min\": 1500,\"city\": \"太原\",\"company\": {\"name\": \"阿里\",\"company_addr\": \"太原市软件园\"},\"publish_data\": \"2019-5-30\",\"comments\": 23}\r\n```\r\n\r\n### bulk其他操作\r\n```\r\n{\"index\": {\"_index\": \"test\", \"_type\": \"type1\", \"_id\": \"1\"}}\r\n{\"field1\" : \"value1\"}\r\n{\"delete\": {\"_index\": \"test\", \"_type\": \"type1\", \"_id\": \"2\"}}\r\n{\"create\": {\"_index\": \"test\", \"_type\": \"type1\", \"_id\": \"3\"}}\r\n{\"field1\" : \"value3\"}\r\n{\"update\": {\"_index\": \"index1\", \"_type\": \"type1\", \"_id\": \"1\"}}\r\n{\"doc\":{\"field2\": \"value2\"}\r\n```\r\n\r\n### elasticsearch映射\r\n```\r\n# 创建索引\r\nPUT lagou\r\n{\r\n  \"mappings\": {\r\n    \"job\":{\r\n      \"properties\": {\r\n        \"title\":{\r\n          \"type\": \"text\"\r\n        },\r\n        \"salary_min\":{\r\n          \"type\": \"integer\"\r\n        },\r\n        \"city\":{\r\n          \"type\":\"keyword\"\r\n        },\r\n        \"company\":{\r\n          \"properties\": {\r\n            \"name\":{\r\n              \"type\":\"text\"\r\n            },\r\n            \"company_addr\":{\r\n              \"type\":\"text\"\r\n            },\r\n            \"employee_count\":{\r\n              \"type\":\"integer\"\r\n            }\r\n          }\r\n        },\r\n        \"publish_date\":{\r\n          \"type\": \"date\",\r\n          \"format\": \"yyyy-MM-dd\"\r\n        },\r\n        \"comments\":{\r\n          \"type\": \"integer\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\nPUT lagou/job/3\r\n{\r\n    \"title\": \"python分布式爬虫开发\",\r\n    \"salary_min\": \"abc\",\r\n    \"city\": \"北京\",\r\n    \"company\": {\r\n        \"name\": \"百度\",\r\n        \"company_addr\": \"北京市软件园\",\r\n        \"employee_count\":50\r\n    },\r\n    \"publish_data\": \"2019-5-30\",\r\n    \"comments\": 15\r\n}\r\n\r\nGET lagou/_mapping/job\r\nGET _all/_mapping/job\r\n```","slug":"Elasticsearch操作","published":1,"updated":"2022-08-11T12:49:48.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6180w0012tksc2wyj0wgx","content":"<pre><code># es的文档，索引的 CRUD 操作\n# 索引初始化操作\n# 指定分片和副本的数量\n# shards一旦设置不能修改（副本数量）\n\n# 设置索引  \nPUT lagou\n&#123;\n  &quot;settings&quot;: &#123;\n    &quot;index&quot;:&#123;\n      &quot;number_of_shards&quot;: 5,\n      &quot;number_of_replicas&quot;: 2\n    &#125;\n  &#125;  \n&#125;\n\nGET lagou/_settings\nGET _all/_settings\nGET .kibana,lagou/_settings\nGET lagou/job/1/_source\n\n# 修改settings\nPUT lagou/_settings\n&#123;\n  &quot;number_of_shards&quot;: 2\n&#125;\n\n# 保存文档  \nPUT lagou/job/2\n&#123;\n    &quot;title&quot;: &quot;python分布式爬虫开发&quot;,\n    &quot;salary_min&quot;: 15000,\n    &quot;city&quot;: &quot;北京&quot;,\n    &quot;company&quot;: &#123;\n        &quot;name&quot;: &quot;百度&quot;,\n        &quot;company_addr&quot;: &quot;北京市软件园&quot;\n    &#125;,\n    &quot;publish_data&quot;: &quot;2019-5-30&quot;,\n    &quot;comments&quot;: 15\n&#125;\n\nPOST lagou/job/1\n&#123;\n    &quot;title&quot;: &quot;python django 开发工程师&quot;,\n    &quot;salary_min&quot;: 3000,\n    &quot;city&quot;: &quot;天猫&quot;,\n    &quot;company&quot;: &#123;\n        &quot;name&quot;: &quot;美团科技&quot;,\n        &quot;company_addr&quot;: &quot;北京市软件园A区&quot;\n    &#125;,\n    &quot;publish_data&quot;: &quot;2019-5-30&quot;,\n    &quot;comments&quot;: 2\n&#125;\n\n\nGET lagou/job/2?_source=city,company.name\n\n# 修改文章\nPUT lagou/job/2\n&#123;\n    &quot;title&quot;: &quot;python分布式爬虫开发&quot;,\n    &quot;salary_min&quot;: 15000,\n    &quot;city&quot;: &quot;北京&quot;,\n    &quot;company&quot;: &#123;\n        &quot;name&quot;: &quot;百度&quot;,\n        &quot;company_addr&quot;: &quot;北京市软件园&quot;\n    &#125;,\n    &quot;publish_data&quot;: &quot;2019-5-30&quot;,\n    &quot;comments&quot;: 23\n&#125;\n\n# 修改文章2\nPOST lagou/job/2/_update\n&#123;\n  &quot;doc&quot;:&#123;\n    &quot;comments&quot;: 21\n  &#125;\n&#125;\n\n\nDELETE lagou/job/1\nDELETE lagou\n\n# 批量获取\nGET _mget\n&#123;\n  &quot;docs&quot;:[\n    &#123; \n      &quot;_index&quot;:&quot;lagou&quot;,\n      &quot;_type&quot;: &quot;job2&quot;,\n      &quot;_id&quot;: 2\n    &#125;,\n    &#123; \n      &quot;_index&quot;:&quot;lagou&quot;,\n      &quot;_type&quot;: &quot;job&quot;,\n      &quot;_id&quot;: 1\n    &#125;\n  ]\n&#125;\n\n# index一样\nGET lagou/_mget\n&#123;\n  &quot;docs&quot;:[\n    &#123; \n      &quot;_type&quot;: &quot;job2&quot;,\n      &quot;_id&quot;: 2\n    &#125;,\n    &#123; \n      &quot;_type&quot;: &quot;job&quot;,\n      &quot;_id&quot;: 1\n    &#125;\n  ]\n&#125;\n\n\n# index,type一样\n\nGET lagou/job2/_mget\n&#123;\n  &quot;docs&quot;:[\n    &#123; \n      &quot;_id&quot;: 2\n    &#125;,\n    &#123; \n      &quot;_id&quot;: 1\n    &#125;\n  ]\n&#125;\n\nGET lagou/job2/_mget\n&#123;\n  &quot;ids&quot;: [1,2]\n&#125;\n\n</code></pre>\n<h3 id=\"bulk批量操作\"><a href=\"#bulk批量操作\" class=\"headerlink\" title=\"bulk批量操作\"></a>bulk批量操作</h3><p>bulk操作不能分行，json必需一行写完</p>\n<pre><code>&#123;&quot;index&quot;: &#123;&quot;_index&quot;: &quot;zhilian&quot;, &quot;_type&quot;: &quot;job&quot;, &quot;_id&quot;: &quot;1&quot;&#125;&#125;\n&#123;&quot;title&quot;: &quot;python分布式爬虫开发&quot;,&quot;salary_min&quot;: 15000,&quot;city&quot;: &quot;北京&quot;,&quot;company&quot;: &#123;&quot;name&quot;: &quot;百度&quot;,&quot;company_addr&quot;: &quot;北京市软件园&quot;&#125;,&quot;publish_data&quot;: &quot;2019-5-30&quot;,&quot;comments&quot;: 23&#125;\n&#123;&quot;index&quot;: &#123;&quot;_index&quot;: &quot;zhilian&quot;, &quot;_type&quot;: &quot;job&quot;, &quot;_id&quot;: &quot;2&quot;&#125;&#125;\n&#123;&quot;title&quot;: &quot;爬虫开发&quot;,&quot;salary_min&quot;: 1500,&quot;city&quot;: &quot;太原&quot;,&quot;company&quot;: &#123;&quot;name&quot;: &quot;阿里&quot;,&quot;company_addr&quot;: &quot;太原市软件园&quot;&#125;,&quot;publish_data&quot;: &quot;2019-5-30&quot;,&quot;comments&quot;: 23&#125;\n</code></pre>\n<h3 id=\"bulk其他操作\"><a href=\"#bulk其他操作\" class=\"headerlink\" title=\"bulk其他操作\"></a>bulk其他操作</h3><pre><code>&#123;&quot;index&quot;: &#123;&quot;_index&quot;: &quot;test&quot;, &quot;_type&quot;: &quot;type1&quot;, &quot;_id&quot;: &quot;1&quot;&#125;&#125;\n&#123;&quot;field1&quot; : &quot;value1&quot;&#125;\n&#123;&quot;delete&quot;: &#123;&quot;_index&quot;: &quot;test&quot;, &quot;_type&quot;: &quot;type1&quot;, &quot;_id&quot;: &quot;2&quot;&#125;&#125;\n&#123;&quot;create&quot;: &#123;&quot;_index&quot;: &quot;test&quot;, &quot;_type&quot;: &quot;type1&quot;, &quot;_id&quot;: &quot;3&quot;&#125;&#125;\n&#123;&quot;field1&quot; : &quot;value3&quot;&#125;\n&#123;&quot;update&quot;: &#123;&quot;_index&quot;: &quot;index1&quot;, &quot;_type&quot;: &quot;type1&quot;, &quot;_id&quot;: &quot;1&quot;&#125;&#125;\n&#123;&quot;doc&quot;:&#123;&quot;field2&quot;: &quot;value2&quot;&#125;\n</code></pre>\n<h3 id=\"elasticsearch映射\"><a href=\"#elasticsearch映射\" class=\"headerlink\" title=\"elasticsearch映射\"></a>elasticsearch映射</h3><pre><code># 创建索引\nPUT lagou\n&#123;\n  &quot;mappings&quot;: &#123;\n    &quot;job&quot;:&#123;\n      &quot;properties&quot;: &#123;\n        &quot;title&quot;:&#123;\n          &quot;type&quot;: &quot;text&quot;\n        &#125;,\n        &quot;salary_min&quot;:&#123;\n          &quot;type&quot;: &quot;integer&quot;\n        &#125;,\n        &quot;city&quot;:&#123;\n          &quot;type&quot;:&quot;keyword&quot;\n        &#125;,\n        &quot;company&quot;:&#123;\n          &quot;properties&quot;: &#123;\n            &quot;name&quot;:&#123;\n              &quot;type&quot;:&quot;text&quot;\n            &#125;,\n            &quot;company_addr&quot;:&#123;\n              &quot;type&quot;:&quot;text&quot;\n            &#125;,\n            &quot;employee_count&quot;:&#123;\n              &quot;type&quot;:&quot;integer&quot;\n            &#125;\n          &#125;\n        &#125;,\n        &quot;publish_date&quot;:&#123;\n          &quot;type&quot;: &quot;date&quot;,\n          &quot;format&quot;: &quot;yyyy-MM-dd&quot;\n        &#125;,\n        &quot;comments&quot;:&#123;\n          &quot;type&quot;: &quot;integer&quot;\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n\n\nPUT lagou/job/3\n&#123;\n    &quot;title&quot;: &quot;python分布式爬虫开发&quot;,\n    &quot;salary_min&quot;: &quot;abc&quot;,\n    &quot;city&quot;: &quot;北京&quot;,\n    &quot;company&quot;: &#123;\n        &quot;name&quot;: &quot;百度&quot;,\n        &quot;company_addr&quot;: &quot;北京市软件园&quot;,\n        &quot;employee_count&quot;:50\n    &#125;,\n    &quot;publish_data&quot;: &quot;2019-5-30&quot;,\n    &quot;comments&quot;: 15\n&#125;\n\nGET lagou/_mapping/job\nGET _all/_mapping/job\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<pre><code># es的文档，索引的 CRUD 操作\n# 索引初始化操作\n# 指定分片和副本的数量\n# shards一旦设置不能修改（副本数量）\n\n# 设置索引  \nPUT lagou\n&#123;\n  &quot;settings&quot;: &#123;\n    &quot;index&quot;:&#123;\n      &quot;number_of_shards&quot;: 5,\n      &quot;number_of_replicas&quot;: 2\n    &#125;\n  &#125;  \n&#125;\n\nGET lagou/_settings\nGET _all/_settings\nGET .kibana,lagou/_settings\nGET lagou/job/1/_source\n\n# 修改settings\nPUT lagou/_settings\n&#123;\n  &quot;number_of_shards&quot;: 2\n&#125;\n\n# 保存文档  \nPUT lagou/job/2\n&#123;\n    &quot;title&quot;: &quot;python分布式爬虫开发&quot;,\n    &quot;salary_min&quot;: 15000,\n    &quot;city&quot;: &quot;北京&quot;,\n    &quot;company&quot;: &#123;\n        &quot;name&quot;: &quot;百度&quot;,\n        &quot;company_addr&quot;: &quot;北京市软件园&quot;\n    &#125;,\n    &quot;publish_data&quot;: &quot;2019-5-30&quot;,\n    &quot;comments&quot;: 15\n&#125;\n\nPOST lagou/job/1\n&#123;\n    &quot;title&quot;: &quot;python django 开发工程师&quot;,\n    &quot;salary_min&quot;: 3000,\n    &quot;city&quot;: &quot;天猫&quot;,\n    &quot;company&quot;: &#123;\n        &quot;name&quot;: &quot;美团科技&quot;,\n        &quot;company_addr&quot;: &quot;北京市软件园A区&quot;\n    &#125;,\n    &quot;publish_data&quot;: &quot;2019-5-30&quot;,\n    &quot;comments&quot;: 2\n&#125;\n\n\nGET lagou/job/2?_source=city,company.name\n\n# 修改文章\nPUT lagou/job/2\n&#123;\n    &quot;title&quot;: &quot;python分布式爬虫开发&quot;,\n    &quot;salary_min&quot;: 15000,\n    &quot;city&quot;: &quot;北京&quot;,\n    &quot;company&quot;: &#123;\n        &quot;name&quot;: &quot;百度&quot;,\n        &quot;company_addr&quot;: &quot;北京市软件园&quot;\n    &#125;,\n    &quot;publish_data&quot;: &quot;2019-5-30&quot;,\n    &quot;comments&quot;: 23\n&#125;\n\n# 修改文章2\nPOST lagou/job/2/_update\n&#123;\n  &quot;doc&quot;:&#123;\n    &quot;comments&quot;: 21\n  &#125;\n&#125;\n\n\nDELETE lagou/job/1\nDELETE lagou\n\n# 批量获取\nGET _mget\n&#123;\n  &quot;docs&quot;:[\n    &#123; \n      &quot;_index&quot;:&quot;lagou&quot;,\n      &quot;_type&quot;: &quot;job2&quot;,\n      &quot;_id&quot;: 2\n    &#125;,\n    &#123; \n      &quot;_index&quot;:&quot;lagou&quot;,\n      &quot;_type&quot;: &quot;job&quot;,\n      &quot;_id&quot;: 1\n    &#125;\n  ]\n&#125;\n\n# index一样\nGET lagou/_mget\n&#123;\n  &quot;docs&quot;:[\n    &#123; \n      &quot;_type&quot;: &quot;job2&quot;,\n      &quot;_id&quot;: 2\n    &#125;,\n    &#123; \n      &quot;_type&quot;: &quot;job&quot;,\n      &quot;_id&quot;: 1\n    &#125;\n  ]\n&#125;\n\n\n# index,type一样\n\nGET lagou/job2/_mget\n&#123;\n  &quot;docs&quot;:[\n    &#123; \n      &quot;_id&quot;: 2\n    &#125;,\n    &#123; \n      &quot;_id&quot;: 1\n    &#125;\n  ]\n&#125;\n\nGET lagou/job2/_mget\n&#123;\n  &quot;ids&quot;: [1,2]\n&#125;\n\n</code></pre>\n<h3 id=\"bulk批量操作\"><a href=\"#bulk批量操作\" class=\"headerlink\" title=\"bulk批量操作\"></a>bulk批量操作</h3><p>bulk操作不能分行，json必需一行写完</p>\n<pre><code>&#123;&quot;index&quot;: &#123;&quot;_index&quot;: &quot;zhilian&quot;, &quot;_type&quot;: &quot;job&quot;, &quot;_id&quot;: &quot;1&quot;&#125;&#125;\n&#123;&quot;title&quot;: &quot;python分布式爬虫开发&quot;,&quot;salary_min&quot;: 15000,&quot;city&quot;: &quot;北京&quot;,&quot;company&quot;: &#123;&quot;name&quot;: &quot;百度&quot;,&quot;company_addr&quot;: &quot;北京市软件园&quot;&#125;,&quot;publish_data&quot;: &quot;2019-5-30&quot;,&quot;comments&quot;: 23&#125;\n&#123;&quot;index&quot;: &#123;&quot;_index&quot;: &quot;zhilian&quot;, &quot;_type&quot;: &quot;job&quot;, &quot;_id&quot;: &quot;2&quot;&#125;&#125;\n&#123;&quot;title&quot;: &quot;爬虫开发&quot;,&quot;salary_min&quot;: 1500,&quot;city&quot;: &quot;太原&quot;,&quot;company&quot;: &#123;&quot;name&quot;: &quot;阿里&quot;,&quot;company_addr&quot;: &quot;太原市软件园&quot;&#125;,&quot;publish_data&quot;: &quot;2019-5-30&quot;,&quot;comments&quot;: 23&#125;\n</code></pre>\n<h3 id=\"bulk其他操作\"><a href=\"#bulk其他操作\" class=\"headerlink\" title=\"bulk其他操作\"></a>bulk其他操作</h3><pre><code>&#123;&quot;index&quot;: &#123;&quot;_index&quot;: &quot;test&quot;, &quot;_type&quot;: &quot;type1&quot;, &quot;_id&quot;: &quot;1&quot;&#125;&#125;\n&#123;&quot;field1&quot; : &quot;value1&quot;&#125;\n&#123;&quot;delete&quot;: &#123;&quot;_index&quot;: &quot;test&quot;, &quot;_type&quot;: &quot;type1&quot;, &quot;_id&quot;: &quot;2&quot;&#125;&#125;\n&#123;&quot;create&quot;: &#123;&quot;_index&quot;: &quot;test&quot;, &quot;_type&quot;: &quot;type1&quot;, &quot;_id&quot;: &quot;3&quot;&#125;&#125;\n&#123;&quot;field1&quot; : &quot;value3&quot;&#125;\n&#123;&quot;update&quot;: &#123;&quot;_index&quot;: &quot;index1&quot;, &quot;_type&quot;: &quot;type1&quot;, &quot;_id&quot;: &quot;1&quot;&#125;&#125;\n&#123;&quot;doc&quot;:&#123;&quot;field2&quot;: &quot;value2&quot;&#125;\n</code></pre>\n<h3 id=\"elasticsearch映射\"><a href=\"#elasticsearch映射\" class=\"headerlink\" title=\"elasticsearch映射\"></a>elasticsearch映射</h3><pre><code># 创建索引\nPUT lagou\n&#123;\n  &quot;mappings&quot;: &#123;\n    &quot;job&quot;:&#123;\n      &quot;properties&quot;: &#123;\n        &quot;title&quot;:&#123;\n          &quot;type&quot;: &quot;text&quot;\n        &#125;,\n        &quot;salary_min&quot;:&#123;\n          &quot;type&quot;: &quot;integer&quot;\n        &#125;,\n        &quot;city&quot;:&#123;\n          &quot;type&quot;:&quot;keyword&quot;\n        &#125;,\n        &quot;company&quot;:&#123;\n          &quot;properties&quot;: &#123;\n            &quot;name&quot;:&#123;\n              &quot;type&quot;:&quot;text&quot;\n            &#125;,\n            &quot;company_addr&quot;:&#123;\n              &quot;type&quot;:&quot;text&quot;\n            &#125;,\n            &quot;employee_count&quot;:&#123;\n              &quot;type&quot;:&quot;integer&quot;\n            &#125;\n          &#125;\n        &#125;,\n        &quot;publish_date&quot;:&#123;\n          &quot;type&quot;: &quot;date&quot;,\n          &quot;format&quot;: &quot;yyyy-MM-dd&quot;\n        &#125;,\n        &quot;comments&quot;:&#123;\n          &quot;type&quot;: &quot;integer&quot;\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n\n\nPUT lagou/job/3\n&#123;\n    &quot;title&quot;: &quot;python分布式爬虫开发&quot;,\n    &quot;salary_min&quot;: &quot;abc&quot;,\n    &quot;city&quot;: &quot;北京&quot;,\n    &quot;company&quot;: &#123;\n        &quot;name&quot;: &quot;百度&quot;,\n        &quot;company_addr&quot;: &quot;北京市软件园&quot;,\n        &quot;employee_count&quot;:50\n    &#125;,\n    &quot;publish_data&quot;: &quot;2019-5-30&quot;,\n    &quot;comments&quot;: 15\n&#125;\n\nGET lagou/_mapping/job\nGET _all/_mapping/job\n</code></pre>\n"},{"title":"Elasticsearch组合查询","date":"2019-12-28T06:26:45.000Z","author":"Ginta","img":"http://img.ginta.top/sky1.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/sky1.jpg","toc":false,"mathjax":false,"summary":null,"_content":"### 准备数据\r\n```\r\nPOST lagou/testjob/_bulk\r\n{\"index\":{\"_id\":1}}\r\n{\"salary\":10, \"title\": \"Python\"}\r\n{\"index\":{\"_id\":2}}\r\n{\"salary\":20, \"title\": \"Scrapy\"}\r\n{\"index\":{\"_id\":3}}\r\n{\"salary\":30, \"title\": \"Django\"}\r\n{\"index\":{\"_id\":4}}\r\n{\"salary\":40, \"title\": \"Elasticsearch\"}\r\n```\r\n## 组合查询\r\n### bool查询\r\n>用 bool 包括 must should must_not filter 来完成，\r\n格式如下\r\n- filter 过渡字段\r\n- must 所有都要有\r\n- should 满足一个或多个\r\n- must_not 一个都不能满足\r\n```\r\nbool: {\r\n    \"filter\": [],\r\n    \"must\": [],\r\n    \"should\": [],\r\n    \"must_not\"\r\n}\r\n```\r\n\r\n1. filter查询\r\n```\r\n\r\nselect * from testjob where salary=20\r\n薪资为20k的工作\r\nGET lagou/testjob/_search\r\n{\r\n  \"query\": {\r\n    \"bool\": {\r\n      \"must\": {\r\n        \"match_all\":{}\r\n      },\r\n      \"filter\": {\r\n        \"term\": {\r\n          \"salary\": \"20\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n# 多个\r\nGET lagou/testjob/_search\r\n{\r\n  \"query\": {\r\n    \"bool\": {\r\n      \"filter\": {\r\n        \"terms\": {\r\n          \"salary\": [\"10\", \"20\"]\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n# select * from testjob where title=\"Python\"\r\n# text字段会先分词，再全部转为小写入库\r\n# term不会预处理，直接大写查询，但是倒排索引已经全部小写了\r\n# 所以查不到，要不就用小写，要不就用match\r\nGET lagou/testjob/_search\r\n{\r\n  \"query\": {\r\n    \"bool\": {\r\n      \"filter\": {\r\n        \"term\": {\r\n          \"title\":\"Python\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### bool组合过滤查询\r\n```\r\n# 查询薪资等于20k或者工作为Python的工作，排除价格为30k的\r\n# select * from testjob where (salary=20 OR title=\"Python\") AND (salary !=30)\r\nGET lagou/testjob/_search\r\n{\r\n  \"query\": {\r\n    \"bool\": {\r\n      \"should\":[ \r\n        {\"term\": {\"salary\":20}},\r\n        {\"term\":{\"title\":\"python\"}}\r\n      ],\r\n      \"must_not\": [\r\n        {\"term\":{\"salary\":30}},\r\n        {\"term\":{\"salary\":10}}\r\n      ]\r\n    }\r\n  }\r\n}\r\n\r\n# 嵌套查询\r\n# select * from testjob where title=\"python\" or (title=\"django\" AND salary=40)\r\nGET lagou/testjob/_search\r\n{\r\n  \"query\": {\r\n    \"bool\": {\r\n      \"should\":[ \r\n        {\"term\": {\"title\":\"python\"}},\r\n        {\"bool\":{\r\n          \"must\": [\r\n            {\"term\": {\"title\":\"elasticsearch\"}},\r\n            {\"term\": {\"salary\": 40}}\r\n          ]}\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### 过滤空和非空\r\n```\r\n\r\n# 建立测试数据\r\nPOST lagou/testjob2/_bulk\r\n{\"index\":{\"_id\":\"1\"}}\r\n{\"tags\":[\"search\"]}\r\n{\"index\":{\"_id\":\"2\"}}\r\n{\"tags\":[\"search\", \"python\"]}\r\n{\"index\":{\"_id\":\"3\"}}\r\n{\"orther_field\":[\"some data\"]}\r\n{\"index\":{\"_id\":\"4\"}}\r\n{\"tags\":null}\r\n{\"index\":{\"_id\":\"5\"}}\r\n{\"tags\":[\"search\", null]}\r\n```\r\n\r\n```\r\n# 处理非空值的方法\r\n# select tags from testjob2 where tags is not NULL\r\nGET lagou/testjob2/_search\r\n{\r\n  \"query\": {\r\n    \"bool\": {\r\n      \"filter\": {\r\n        \"exists\": {\r\n          \"field\": \"tags\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```","source":"_posts/Elasticsearch组合查询.md","raw":"---\ntitle: Elasticsearch组合查询\ndate: 2019-12-28 14:26:45\nauthor: Ginta\nimg: http://img.ginta.top/sky1.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/sky1.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: 数据库\n---\n### 准备数据\r\n```\r\nPOST lagou/testjob/_bulk\r\n{\"index\":{\"_id\":1}}\r\n{\"salary\":10, \"title\": \"Python\"}\r\n{\"index\":{\"_id\":2}}\r\n{\"salary\":20, \"title\": \"Scrapy\"}\r\n{\"index\":{\"_id\":3}}\r\n{\"salary\":30, \"title\": \"Django\"}\r\n{\"index\":{\"_id\":4}}\r\n{\"salary\":40, \"title\": \"Elasticsearch\"}\r\n```\r\n## 组合查询\r\n### bool查询\r\n>用 bool 包括 must should must_not filter 来完成，\r\n格式如下\r\n- filter 过渡字段\r\n- must 所有都要有\r\n- should 满足一个或多个\r\n- must_not 一个都不能满足\r\n```\r\nbool: {\r\n    \"filter\": [],\r\n    \"must\": [],\r\n    \"should\": [],\r\n    \"must_not\"\r\n}\r\n```\r\n\r\n1. filter查询\r\n```\r\n\r\nselect * from testjob where salary=20\r\n薪资为20k的工作\r\nGET lagou/testjob/_search\r\n{\r\n  \"query\": {\r\n    \"bool\": {\r\n      \"must\": {\r\n        \"match_all\":{}\r\n      },\r\n      \"filter\": {\r\n        \"term\": {\r\n          \"salary\": \"20\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n# 多个\r\nGET lagou/testjob/_search\r\n{\r\n  \"query\": {\r\n    \"bool\": {\r\n      \"filter\": {\r\n        \"terms\": {\r\n          \"salary\": [\"10\", \"20\"]\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n# select * from testjob where title=\"Python\"\r\n# text字段会先分词，再全部转为小写入库\r\n# term不会预处理，直接大写查询，但是倒排索引已经全部小写了\r\n# 所以查不到，要不就用小写，要不就用match\r\nGET lagou/testjob/_search\r\n{\r\n  \"query\": {\r\n    \"bool\": {\r\n      \"filter\": {\r\n        \"term\": {\r\n          \"title\":\"Python\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### bool组合过滤查询\r\n```\r\n# 查询薪资等于20k或者工作为Python的工作，排除价格为30k的\r\n# select * from testjob where (salary=20 OR title=\"Python\") AND (salary !=30)\r\nGET lagou/testjob/_search\r\n{\r\n  \"query\": {\r\n    \"bool\": {\r\n      \"should\":[ \r\n        {\"term\": {\"salary\":20}},\r\n        {\"term\":{\"title\":\"python\"}}\r\n      ],\r\n      \"must_not\": [\r\n        {\"term\":{\"salary\":30}},\r\n        {\"term\":{\"salary\":10}}\r\n      ]\r\n    }\r\n  }\r\n}\r\n\r\n# 嵌套查询\r\n# select * from testjob where title=\"python\" or (title=\"django\" AND salary=40)\r\nGET lagou/testjob/_search\r\n{\r\n  \"query\": {\r\n    \"bool\": {\r\n      \"should\":[ \r\n        {\"term\": {\"title\":\"python\"}},\r\n        {\"bool\":{\r\n          \"must\": [\r\n            {\"term\": {\"title\":\"elasticsearch\"}},\r\n            {\"term\": {\"salary\": 40}}\r\n          ]}\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### 过滤空和非空\r\n```\r\n\r\n# 建立测试数据\r\nPOST lagou/testjob2/_bulk\r\n{\"index\":{\"_id\":\"1\"}}\r\n{\"tags\":[\"search\"]}\r\n{\"index\":{\"_id\":\"2\"}}\r\n{\"tags\":[\"search\", \"python\"]}\r\n{\"index\":{\"_id\":\"3\"}}\r\n{\"orther_field\":[\"some data\"]}\r\n{\"index\":{\"_id\":\"4\"}}\r\n{\"tags\":null}\r\n{\"index\":{\"_id\":\"5\"}}\r\n{\"tags\":[\"search\", null]}\r\n```\r\n\r\n```\r\n# 处理非空值的方法\r\n# select tags from testjob2 where tags is not NULL\r\nGET lagou/testjob2/_search\r\n{\r\n  \"query\": {\r\n    \"bool\": {\r\n      \"filter\": {\r\n        \"exists\": {\r\n          \"field\": \"tags\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```","slug":"Elasticsearch组合查询","published":1,"updated":"2022-08-11T12:49:48.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6180x0016tkschzh38y0n","content":"<h3 id=\"准备数据\"><a href=\"#准备数据\" class=\"headerlink\" title=\"准备数据\"></a>准备数据</h3><pre><code>POST lagou/testjob/_bulk\n&#123;&quot;index&quot;:&#123;&quot;_id&quot;:1&#125;&#125;\n&#123;&quot;salary&quot;:10, &quot;title&quot;: &quot;Python&quot;&#125;\n&#123;&quot;index&quot;:&#123;&quot;_id&quot;:2&#125;&#125;\n&#123;&quot;salary&quot;:20, &quot;title&quot;: &quot;Scrapy&quot;&#125;\n&#123;&quot;index&quot;:&#123;&quot;_id&quot;:3&#125;&#125;\n&#123;&quot;salary&quot;:30, &quot;title&quot;: &quot;Django&quot;&#125;\n&#123;&quot;index&quot;:&#123;&quot;_id&quot;:4&#125;&#125;\n&#123;&quot;salary&quot;:40, &quot;title&quot;: &quot;Elasticsearch&quot;&#125;\n</code></pre>\n<h2 id=\"组合查询\"><a href=\"#组合查询\" class=\"headerlink\" title=\"组合查询\"></a>组合查询</h2><h3 id=\"bool查询\"><a href=\"#bool查询\" class=\"headerlink\" title=\"bool查询\"></a>bool查询</h3><blockquote>\n<p>用 bool 包括 must should must_not filter 来完成，<br>格式如下</p>\n</blockquote>\n<ul>\n<li>filter 过渡字段</li>\n<li>must 所有都要有</li>\n<li>should 满足一个或多个</li>\n<li>must_not 一个都不能满足</li>\n</ul>\n<pre><code>bool: &#123;\n    &quot;filter&quot;: [],\n    &quot;must&quot;: [],\n    &quot;should&quot;: [],\n    &quot;must_not&quot;\n&#125;\n</code></pre>\n<ol>\n<li>filter查询</li>\n</ol>\n<pre><code>\nselect * from testjob where salary=20\n薪资为20k的工作\nGET lagou/testjob/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;bool&quot;: &#123;\n      &quot;must&quot;: &#123;\n        &quot;match_all&quot;:&#123;&#125;\n      &#125;,\n      &quot;filter&quot;: &#123;\n        &quot;term&quot;: &#123;\n          &quot;salary&quot;: &quot;20&quot;\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n\n# 多个\nGET lagou/testjob/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;bool&quot;: &#123;\n      &quot;filter&quot;: &#123;\n        &quot;terms&quot;: &#123;\n          &quot;salary&quot;: [&quot;10&quot;, &quot;20&quot;]\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n\n\n# select * from testjob where title=&quot;Python&quot;\n# text字段会先分词，再全部转为小写入库\n# term不会预处理，直接大写查询，但是倒排索引已经全部小写了\n# 所以查不到，要不就用小写，要不就用match\nGET lagou/testjob/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;bool&quot;: &#123;\n      &quot;filter&quot;: &#123;\n        &quot;term&quot;: &#123;\n          &quot;title&quot;:&quot;Python&quot;\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<h3 id=\"bool组合过滤查询\"><a href=\"#bool组合过滤查询\" class=\"headerlink\" title=\"bool组合过滤查询\"></a>bool组合过滤查询</h3><pre><code># 查询薪资等于20k或者工作为Python的工作，排除价格为30k的\n# select * from testjob where (salary=20 OR title=&quot;Python&quot;) AND (salary !=30)\nGET lagou/testjob/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;bool&quot;: &#123;\n      &quot;should&quot;:[ \n        &#123;&quot;term&quot;: &#123;&quot;salary&quot;:20&#125;&#125;,\n        &#123;&quot;term&quot;:&#123;&quot;title&quot;:&quot;python&quot;&#125;&#125;\n      ],\n      &quot;must_not&quot;: [\n        &#123;&quot;term&quot;:&#123;&quot;salary&quot;:30&#125;&#125;,\n        &#123;&quot;term&quot;:&#123;&quot;salary&quot;:10&#125;&#125;\n      ]\n    &#125;\n  &#125;\n&#125;\n\n# 嵌套查询\n# select * from testjob where title=&quot;python&quot; or (title=&quot;django&quot; AND salary=40)\nGET lagou/testjob/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;bool&quot;: &#123;\n      &quot;should&quot;:[ \n        &#123;&quot;term&quot;: &#123;&quot;title&quot;:&quot;python&quot;&#125;&#125;,\n        &#123;&quot;bool&quot;:&#123;\n          &quot;must&quot;: [\n            &#123;&quot;term&quot;: &#123;&quot;title&quot;:&quot;elasticsearch&quot;&#125;&#125;,\n            &#123;&quot;term&quot;: &#123;&quot;salary&quot;: 40&#125;&#125;\n          ]&#125;\n        &#125;\n      ]\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<h3 id=\"过滤空和非空\"><a href=\"#过滤空和非空\" class=\"headerlink\" title=\"过滤空和非空\"></a>过滤空和非空</h3><pre><code>\n# 建立测试数据\nPOST lagou/testjob2/_bulk\n&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;1&quot;&#125;&#125;\n&#123;&quot;tags&quot;:[&quot;search&quot;]&#125;\n&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;2&quot;&#125;&#125;\n&#123;&quot;tags&quot;:[&quot;search&quot;, &quot;python&quot;]&#125;\n&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;3&quot;&#125;&#125;\n&#123;&quot;orther_field&quot;:[&quot;some data&quot;]&#125;\n&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;4&quot;&#125;&#125;\n&#123;&quot;tags&quot;:null&#125;\n&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;5&quot;&#125;&#125;\n&#123;&quot;tags&quot;:[&quot;search&quot;, null]&#125;\n</code></pre>\n<pre><code># 处理非空值的方法\n# select tags from testjob2 where tags is not NULL\nGET lagou/testjob2/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;bool&quot;: &#123;\n      &quot;filter&quot;: &#123;\n        &quot;exists&quot;: &#123;\n          &quot;field&quot;: &quot;tags&quot;\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h3 id=\"准备数据\"><a href=\"#准备数据\" class=\"headerlink\" title=\"准备数据\"></a>准备数据</h3><pre><code>POST lagou/testjob/_bulk\n&#123;&quot;index&quot;:&#123;&quot;_id&quot;:1&#125;&#125;\n&#123;&quot;salary&quot;:10, &quot;title&quot;: &quot;Python&quot;&#125;\n&#123;&quot;index&quot;:&#123;&quot;_id&quot;:2&#125;&#125;\n&#123;&quot;salary&quot;:20, &quot;title&quot;: &quot;Scrapy&quot;&#125;\n&#123;&quot;index&quot;:&#123;&quot;_id&quot;:3&#125;&#125;\n&#123;&quot;salary&quot;:30, &quot;title&quot;: &quot;Django&quot;&#125;\n&#123;&quot;index&quot;:&#123;&quot;_id&quot;:4&#125;&#125;\n&#123;&quot;salary&quot;:40, &quot;title&quot;: &quot;Elasticsearch&quot;&#125;\n</code></pre>\n<h2 id=\"组合查询\"><a href=\"#组合查询\" class=\"headerlink\" title=\"组合查询\"></a>组合查询</h2><h3 id=\"bool查询\"><a href=\"#bool查询\" class=\"headerlink\" title=\"bool查询\"></a>bool查询</h3><blockquote>\n<p>用 bool 包括 must should must_not filter 来完成，<br>格式如下</p>\n</blockquote>\n<ul>\n<li>filter 过渡字段</li>\n<li>must 所有都要有</li>\n<li>should 满足一个或多个</li>\n<li>must_not 一个都不能满足</li>\n</ul>\n<pre><code>bool: &#123;\n    &quot;filter&quot;: [],\n    &quot;must&quot;: [],\n    &quot;should&quot;: [],\n    &quot;must_not&quot;\n&#125;\n</code></pre>\n<ol>\n<li>filter查询</li>\n</ol>\n<pre><code>\nselect * from testjob where salary=20\n薪资为20k的工作\nGET lagou/testjob/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;bool&quot;: &#123;\n      &quot;must&quot;: &#123;\n        &quot;match_all&quot;:&#123;&#125;\n      &#125;,\n      &quot;filter&quot;: &#123;\n        &quot;term&quot;: &#123;\n          &quot;salary&quot;: &quot;20&quot;\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n\n# 多个\nGET lagou/testjob/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;bool&quot;: &#123;\n      &quot;filter&quot;: &#123;\n        &quot;terms&quot;: &#123;\n          &quot;salary&quot;: [&quot;10&quot;, &quot;20&quot;]\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n\n\n# select * from testjob where title=&quot;Python&quot;\n# text字段会先分词，再全部转为小写入库\n# term不会预处理，直接大写查询，但是倒排索引已经全部小写了\n# 所以查不到，要不就用小写，要不就用match\nGET lagou/testjob/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;bool&quot;: &#123;\n      &quot;filter&quot;: &#123;\n        &quot;term&quot;: &#123;\n          &quot;title&quot;:&quot;Python&quot;\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<h3 id=\"bool组合过滤查询\"><a href=\"#bool组合过滤查询\" class=\"headerlink\" title=\"bool组合过滤查询\"></a>bool组合过滤查询</h3><pre><code># 查询薪资等于20k或者工作为Python的工作，排除价格为30k的\n# select * from testjob where (salary=20 OR title=&quot;Python&quot;) AND (salary !=30)\nGET lagou/testjob/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;bool&quot;: &#123;\n      &quot;should&quot;:[ \n        &#123;&quot;term&quot;: &#123;&quot;salary&quot;:20&#125;&#125;,\n        &#123;&quot;term&quot;:&#123;&quot;title&quot;:&quot;python&quot;&#125;&#125;\n      ],\n      &quot;must_not&quot;: [\n        &#123;&quot;term&quot;:&#123;&quot;salary&quot;:30&#125;&#125;,\n        &#123;&quot;term&quot;:&#123;&quot;salary&quot;:10&#125;&#125;\n      ]\n    &#125;\n  &#125;\n&#125;\n\n# 嵌套查询\n# select * from testjob where title=&quot;python&quot; or (title=&quot;django&quot; AND salary=40)\nGET lagou/testjob/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;bool&quot;: &#123;\n      &quot;should&quot;:[ \n        &#123;&quot;term&quot;: &#123;&quot;title&quot;:&quot;python&quot;&#125;&#125;,\n        &#123;&quot;bool&quot;:&#123;\n          &quot;must&quot;: [\n            &#123;&quot;term&quot;: &#123;&quot;title&quot;:&quot;elasticsearch&quot;&#125;&#125;,\n            &#123;&quot;term&quot;: &#123;&quot;salary&quot;: 40&#125;&#125;\n          ]&#125;\n        &#125;\n      ]\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<h3 id=\"过滤空和非空\"><a href=\"#过滤空和非空\" class=\"headerlink\" title=\"过滤空和非空\"></a>过滤空和非空</h3><pre><code>\n# 建立测试数据\nPOST lagou/testjob2/_bulk\n&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;1&quot;&#125;&#125;\n&#123;&quot;tags&quot;:[&quot;search&quot;]&#125;\n&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;2&quot;&#125;&#125;\n&#123;&quot;tags&quot;:[&quot;search&quot;, &quot;python&quot;]&#125;\n&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;3&quot;&#125;&#125;\n&#123;&quot;orther_field&quot;:[&quot;some data&quot;]&#125;\n&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;4&quot;&#125;&#125;\n&#123;&quot;tags&quot;:null&#125;\n&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;5&quot;&#125;&#125;\n&#123;&quot;tags&quot;:[&quot;search&quot;, null]&#125;\n</code></pre>\n<pre><code># 处理非空值的方法\n# select tags from testjob2 where tags is not NULL\nGET lagou/testjob2/_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;bool&quot;: &#123;\n      &quot;filter&quot;: &#123;\n        &quot;exists&quot;: &#123;\n          &quot;field&quot;: &quot;tags&quot;\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n"},{"title":"Elasticsearch配置","date":"2019-12-28T06:24:42.000Z","author":"Ginta","img":"http://img.ginta.top/fantasy2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/fantasy2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"### 安装\r\n1. Java环境\r\n2. Git 下载 elasticsearch-rtf  压缩包，解压 进入bin 运行 elasticsearch.bat\r\n3. Git clone elasticsearch-head 进入，npm install,npm run start\r\n4. 配置elasticsearch.yml\r\n```\r\nhttp.cors.enabled: true\r\nhttp.cors.allow-origin: \"*\"\r\nhttp.cors.allow-methods: OPTIONS, HEAD, GET, PUT, DELETE\r\nhttp.cors.allow-headers: \"X-Requested_With, Content-Type, Content_Length, X-User\"\r\n```\r\n5. 安装 kibana ,版本与 elasticsearch相对应\r\n\r\n### elasticsearch概念\r\n1. 集群\r\n2. 节点\r\n3. 分片\r\n4. 副本\r\n\r\n\r\nElasticsearch | Mysql\r\n---|---\r\nindex | 数据库\r\ntype | 表\r\ndocuments | 行(一条数据)\r\nfields | 列","source":"_posts/Elasticsearch配置.md","raw":"---\ntitle: Elasticsearch配置\ndate: 2019-12-28 14:24:42\nauthor: Ginta\nimg: http://img.ginta.top/fantasy2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/fantasy2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: 数据库\n---\n### 安装\r\n1. Java环境\r\n2. Git 下载 elasticsearch-rtf  压缩包，解压 进入bin 运行 elasticsearch.bat\r\n3. Git clone elasticsearch-head 进入，npm install,npm run start\r\n4. 配置elasticsearch.yml\r\n```\r\nhttp.cors.enabled: true\r\nhttp.cors.allow-origin: \"*\"\r\nhttp.cors.allow-methods: OPTIONS, HEAD, GET, PUT, DELETE\r\nhttp.cors.allow-headers: \"X-Requested_With, Content-Type, Content_Length, X-User\"\r\n```\r\n5. 安装 kibana ,版本与 elasticsearch相对应\r\n\r\n### elasticsearch概念\r\n1. 集群\r\n2. 节点\r\n3. 分片\r\n4. 副本\r\n\r\n\r\nElasticsearch | Mysql\r\n---|---\r\nindex | 数据库\r\ntype | 表\r\ndocuments | 行(一条数据)\r\nfields | 列","slug":"Elasticsearch配置","published":1,"updated":"2022-08-11T12:49:48.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6180x0018tksc8igm7hi3","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ol>\n<li>Java环境</li>\n<li>Git 下载 elasticsearch-rtf  压缩包，解压 进入bin 运行 elasticsearch.bat</li>\n<li>Git clone elasticsearch-head 进入，npm install,npm run start</li>\n<li>配置elasticsearch.yml</li>\n</ol>\n<pre><code>http.cors.enabled: true\nhttp.cors.allow-origin: &quot;*&quot;\nhttp.cors.allow-methods: OPTIONS, HEAD, GET, PUT, DELETE\nhttp.cors.allow-headers: &quot;X-Requested_With, Content-Type, Content_Length, X-User&quot;\n</code></pre>\n<ol start=\"5\">\n<li>安装 kibana ,版本与 elasticsearch相对应</li>\n</ol>\n<h3 id=\"elasticsearch概念\"><a href=\"#elasticsearch概念\" class=\"headerlink\" title=\"elasticsearch概念\"></a>elasticsearch概念</h3><ol>\n<li>集群</li>\n<li>节点</li>\n<li>分片</li>\n<li>副本</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>Elasticsearch</th>\n<th>Mysql</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>index</td>\n<td>数据库</td>\n</tr>\n<tr>\n<td>type</td>\n<td>表</td>\n</tr>\n<tr>\n<td>documents</td>\n<td>行(一条数据)</td>\n</tr>\n<tr>\n<td>fields</td>\n<td>列</td>\n</tr>\n</tbody></table>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ol>\n<li>Java环境</li>\n<li>Git 下载 elasticsearch-rtf  压缩包，解压 进入bin 运行 elasticsearch.bat</li>\n<li>Git clone elasticsearch-head 进入，npm install,npm run start</li>\n<li>配置elasticsearch.yml</li>\n</ol>\n<pre><code>http.cors.enabled: true\nhttp.cors.allow-origin: &quot;*&quot;\nhttp.cors.allow-methods: OPTIONS, HEAD, GET, PUT, DELETE\nhttp.cors.allow-headers: &quot;X-Requested_With, Content-Type, Content_Length, X-User&quot;\n</code></pre>\n<ol start=\"5\">\n<li>安装 kibana ,版本与 elasticsearch相对应</li>\n</ol>\n<h3 id=\"elasticsearch概念\"><a href=\"#elasticsearch概念\" class=\"headerlink\" title=\"elasticsearch概念\"></a>elasticsearch概念</h3><ol>\n<li>集群</li>\n<li>节点</li>\n<li>分片</li>\n<li>副本</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>Elasticsearch</th>\n<th>Mysql</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>index</td>\n<td>数据库</td>\n</tr>\n<tr>\n<td>type</td>\n<td>表</td>\n</tr>\n<tr>\n<td>documents</td>\n<td>行(一条数据)</td>\n</tr>\n<tr>\n<td>fields</td>\n<td>列</td>\n</tr>\n</tbody></table>\n"},{"title":"Git 更新fork代码的内容","date":"2020-05-09T00:36:50.000Z","author":"Ginta","img":"http://img.ginta.top/dragin1.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/dragin1.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 前言\r\n公司有个开源项目需要维护，之前在校的时候和同学开发一个项目双方都是admin权限可以直接 *push* 到主分支，但一般来说新的代码还是通过 *pr* 的方式提交比较稳妥。现在遇到的问题是：这次我 *pr* 了以后，下次又改动代码 *pr* 的时候就要兼顾 *fork* 源的代码有没有更新，\r\n如果更新了这边不 *pull* 下来直接提交会引起冲突。以往的操作是如果 *fork* 源更新了代码，我就把自己仓库删掉重新 *fork* 一次。。。一次两次还好，后来无法忍受这种低能操作了，决定重新做人。\r\n\r\n## 步骤\r\n其实解决这个问题很简单，只需要几个步骤即可：\r\n就拿我现在维护的项目来说 项目的地址是 [rqalpha](git@github.com:ricequant/rqalpha.git) , 我 *fork* 以后的地址是 [mar-heaven/rqalpha](https://github.com/mar-heaven/rqalpha)。\r\n\r\n这时我在本地的 *develop* 分支改好代码准备提交，但是发现和  [rqalpha](git@github.com:ricequant/rqalpha.git) 的 *develop* 分支是冲突的，因为在此期间又有了新的 *commit*。\r\n先看一下 *remote*\r\n```\r\n(base) tangxinyingdeiMac:rqalpha xinglitao$ git remote -v\r\norigin  https://github.com/mar-heaven/rqalpha.git (fetch)\r\norigin  https://github.com/mar-heaven/rqalpha.git (push)\r\n```\r\n执行  `git remote add upstream git@github.com:ricequant/rqalpha.git`\r\n再看一下\r\n```\r\n(base) tangxinyingdeiMac:rqalpha xinglitao$ git remote -v\r\norigin  https://github.com/mar-heaven/rqalpha.git (fetch)\r\norigin  https://github.com/mar-heaven/rqalpha.git (push)\r\nupstream        git@github.com:ricequant/rqalpha.git (fetch)\r\nupstream        git@github.com:ricequant/rqalpha.git (push)\r\n```\r\n*fetch* 一下\r\n```\r\n(base) tangxinyingdeiMac:rqalpha xinglitao$ git fetch upstream\r\nremote: Enumerating objects: 16, done.\r\nremote: Counting objects: 100% (16/16), done.\r\nremote: Compressing objects: 100% (10/10), done.\r\nremote: Total 16 (delta 10), reused 8 (delta 6), pack-reused 0\r\nUnpacking objects: 100% (16/16), done.\r\nFrom github.com:ricequant/rqalpha\r\n * [new branch]        0.3.x                    -> upstream/0.3.x\r\n * [new branch]        2.1.x                    -> upstream/2.1.x\r\n * [new branch]        2.2.x                    -> upstream/2.2.x\r\n * [new branch]        3.0.x                    -> upstream/3.0.x\r\n * [new branch]        3.1.1.x                  -> upstream/3.1.1.x\r\n * [new branch]        3.3.0.x                  -> upstream/3.3.0.x\r\n * [new branch]        3.3.x                    -> upstream/3.3.x\r\n * [new branch]        3.4.x                    -> upstream/3.4.x\r\n * [new branch]        develop                  -> upstream/develop\r\n * [new branch]        feature/broker_refactory -> upstream/feature/broker_refactory\r\n * [new branch]        feature/stat             -> upstream/feature/stat\r\n * [new branch]        master                   -> upstream/master\r\n```\r\n\r\n然后就可以 *merge* 了\r\n```\r\n(base) tangxinyingdeiMac:rqalpha xinglitao$ git merge upstream/develop\r\nMerge made by the 'recursive' strategy.\r\n rqalpha/mod/rqalpha_mod_sys_progress/mod.py | 8 ++++----\r\n rqalpha/model/bar.py                        | 2 ++\r\n rqalpha/utils/log_capture.py                | 1 +\r\n 3 files changed, 7 insertions(+), 4 deletions(-)\r\n```\r\n\r\n收工！","source":"_posts/Git 更新fork代码的内容.md","raw":"---\ntitle: Git 更新fork代码的内容\ndate: 2020-05-09 08:36:50\nauthor: Ginta\nimg: http://img.ginta.top/dragin1.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/dragin1.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: Git/Github\n---\n## 前言\r\n公司有个开源项目需要维护，之前在校的时候和同学开发一个项目双方都是admin权限可以直接 *push* 到主分支，但一般来说新的代码还是通过 *pr* 的方式提交比较稳妥。现在遇到的问题是：这次我 *pr* 了以后，下次又改动代码 *pr* 的时候就要兼顾 *fork* 源的代码有没有更新，\r\n如果更新了这边不 *pull* 下来直接提交会引起冲突。以往的操作是如果 *fork* 源更新了代码，我就把自己仓库删掉重新 *fork* 一次。。。一次两次还好，后来无法忍受这种低能操作了，决定重新做人。\r\n\r\n## 步骤\r\n其实解决这个问题很简单，只需要几个步骤即可：\r\n就拿我现在维护的项目来说 项目的地址是 [rqalpha](git@github.com:ricequant/rqalpha.git) , 我 *fork* 以后的地址是 [mar-heaven/rqalpha](https://github.com/mar-heaven/rqalpha)。\r\n\r\n这时我在本地的 *develop* 分支改好代码准备提交，但是发现和  [rqalpha](git@github.com:ricequant/rqalpha.git) 的 *develop* 分支是冲突的，因为在此期间又有了新的 *commit*。\r\n先看一下 *remote*\r\n```\r\n(base) tangxinyingdeiMac:rqalpha xinglitao$ git remote -v\r\norigin  https://github.com/mar-heaven/rqalpha.git (fetch)\r\norigin  https://github.com/mar-heaven/rqalpha.git (push)\r\n```\r\n执行  `git remote add upstream git@github.com:ricequant/rqalpha.git`\r\n再看一下\r\n```\r\n(base) tangxinyingdeiMac:rqalpha xinglitao$ git remote -v\r\norigin  https://github.com/mar-heaven/rqalpha.git (fetch)\r\norigin  https://github.com/mar-heaven/rqalpha.git (push)\r\nupstream        git@github.com:ricequant/rqalpha.git (fetch)\r\nupstream        git@github.com:ricequant/rqalpha.git (push)\r\n```\r\n*fetch* 一下\r\n```\r\n(base) tangxinyingdeiMac:rqalpha xinglitao$ git fetch upstream\r\nremote: Enumerating objects: 16, done.\r\nremote: Counting objects: 100% (16/16), done.\r\nremote: Compressing objects: 100% (10/10), done.\r\nremote: Total 16 (delta 10), reused 8 (delta 6), pack-reused 0\r\nUnpacking objects: 100% (16/16), done.\r\nFrom github.com:ricequant/rqalpha\r\n * [new branch]        0.3.x                    -> upstream/0.3.x\r\n * [new branch]        2.1.x                    -> upstream/2.1.x\r\n * [new branch]        2.2.x                    -> upstream/2.2.x\r\n * [new branch]        3.0.x                    -> upstream/3.0.x\r\n * [new branch]        3.1.1.x                  -> upstream/3.1.1.x\r\n * [new branch]        3.3.0.x                  -> upstream/3.3.0.x\r\n * [new branch]        3.3.x                    -> upstream/3.3.x\r\n * [new branch]        3.4.x                    -> upstream/3.4.x\r\n * [new branch]        develop                  -> upstream/develop\r\n * [new branch]        feature/broker_refactory -> upstream/feature/broker_refactory\r\n * [new branch]        feature/stat             -> upstream/feature/stat\r\n * [new branch]        master                   -> upstream/master\r\n```\r\n\r\n然后就可以 *merge* 了\r\n```\r\n(base) tangxinyingdeiMac:rqalpha xinglitao$ git merge upstream/develop\r\nMerge made by the 'recursive' strategy.\r\n rqalpha/mod/rqalpha_mod_sys_progress/mod.py | 8 ++++----\r\n rqalpha/model/bar.py                        | 2 ++\r\n rqalpha/utils/log_capture.py                | 1 +\r\n 3 files changed, 7 insertions(+), 4 deletions(-)\r\n```\r\n\r\n收工！","slug":"Git 更新fork代码的内容","published":1,"updated":"2022-08-11T12:49:48.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6180x001ctksc9h7iaago","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>公司有个开源项目需要维护，之前在校的时候和同学开发一个项目双方都是admin权限可以直接 <em>push</em> 到主分支，但一般来说新的代码还是通过 <em>pr</em> 的方式提交比较稳妥。现在遇到的问题是：这次我 <em>pr</em> 了以后，下次又改动代码 <em>pr</em> 的时候就要兼顾 <em>fork</em> 源的代码有没有更新，<br>如果更新了这边不 <em>pull</em> 下来直接提交会引起冲突。以往的操作是如果 <em>fork</em> 源更新了代码，我就把自己仓库删掉重新 <em>fork</em> 一次。。。一次两次还好，后来无法忍受这种低能操作了，决定重新做人。</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>其实解决这个问题很简单，只需要几个步骤即可：<br>就拿我现在维护的项目来说 项目的地址是 <a href=\"git@github.com:ricequant/rqalpha.git\">rqalpha</a> , 我 <em>fork</em> 以后的地址是 <a href=\"https://github.com/mar-heaven/rqalpha\">mar-heaven&#x2F;rqalpha</a>。</p>\n<p>这时我在本地的 <em>develop</em> 分支改好代码准备提交，但是发现和  <a href=\"git@github.com:ricequant/rqalpha.git\">rqalpha</a> 的 <em>develop</em> 分支是冲突的，因为在此期间又有了新的 <em>commit</em>。<br>先看一下 <em>remote</em></p>\n<pre><code>(base) tangxinyingdeiMac:rqalpha xinglitao$ git remote -v\norigin  https://github.com/mar-heaven/rqalpha.git (fetch)\norigin  https://github.com/mar-heaven/rqalpha.git (push)\n</code></pre>\n<p>执行  <code>git remote add upstream git@github.com:ricequant/rqalpha.git</code><br>再看一下</p>\n<pre><code>(base) tangxinyingdeiMac:rqalpha xinglitao$ git remote -v\norigin  https://github.com/mar-heaven/rqalpha.git (fetch)\norigin  https://github.com/mar-heaven/rqalpha.git (push)\nupstream        git@github.com:ricequant/rqalpha.git (fetch)\nupstream        git@github.com:ricequant/rqalpha.git (push)\n</code></pre>\n<p><em>fetch</em> 一下</p>\n<pre><code>(base) tangxinyingdeiMac:rqalpha xinglitao$ git fetch upstream\nremote: Enumerating objects: 16, done.\nremote: Counting objects: 100% (16/16), done.\nremote: Compressing objects: 100% (10/10), done.\nremote: Total 16 (delta 10), reused 8 (delta 6), pack-reused 0\nUnpacking objects: 100% (16/16), done.\nFrom github.com:ricequant/rqalpha\n * [new branch]        0.3.x                    -&gt; upstream/0.3.x\n * [new branch]        2.1.x                    -&gt; upstream/2.1.x\n * [new branch]        2.2.x                    -&gt; upstream/2.2.x\n * [new branch]        3.0.x                    -&gt; upstream/3.0.x\n * [new branch]        3.1.1.x                  -&gt; upstream/3.1.1.x\n * [new branch]        3.3.0.x                  -&gt; upstream/3.3.0.x\n * [new branch]        3.3.x                    -&gt; upstream/3.3.x\n * [new branch]        3.4.x                    -&gt; upstream/3.4.x\n * [new branch]        develop                  -&gt; upstream/develop\n * [new branch]        feature/broker_refactory -&gt; upstream/feature/broker_refactory\n * [new branch]        feature/stat             -&gt; upstream/feature/stat\n * [new branch]        master                   -&gt; upstream/master\n</code></pre>\n<p>然后就可以 <em>merge</em> 了</p>\n<pre><code>(base) tangxinyingdeiMac:rqalpha xinglitao$ git merge upstream/develop\nMerge made by the &#39;recursive&#39; strategy.\n rqalpha/mod/rqalpha_mod_sys_progress/mod.py | 8 ++++----\n rqalpha/model/bar.py                        | 2 ++\n rqalpha/utils/log_capture.py                | 1 +\n 3 files changed, 7 insertions(+), 4 deletions(-)\n</code></pre>\n<p>收工！</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>公司有个开源项目需要维护，之前在校的时候和同学开发一个项目双方都是admin权限可以直接 <em>push</em> 到主分支，但一般来说新的代码还是通过 <em>pr</em> 的方式提交比较稳妥。现在遇到的问题是：这次我 <em>pr</em> 了以后，下次又改动代码 <em>pr</em> 的时候就要兼顾 <em>fork</em> 源的代码有没有更新，<br>如果更新了这边不 <em>pull</em> 下来直接提交会引起冲突。以往的操作是如果 <em>fork</em> 源更新了代码，我就把自己仓库删掉重新 <em>fork</em> 一次。。。一次两次还好，后来无法忍受这种低能操作了，决定重新做人。</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>其实解决这个问题很简单，只需要几个步骤即可：<br>就拿我现在维护的项目来说 项目的地址是 <a href=\"git@github.com:ricequant/rqalpha.git\">rqalpha</a> , 我 <em>fork</em> 以后的地址是 <a href=\"https://github.com/mar-heaven/rqalpha\">mar-heaven&#x2F;rqalpha</a>。</p>\n<p>这时我在本地的 <em>develop</em> 分支改好代码准备提交，但是发现和  <a href=\"git@github.com:ricequant/rqalpha.git\">rqalpha</a> 的 <em>develop</em> 分支是冲突的，因为在此期间又有了新的 <em>commit</em>。<br>先看一下 <em>remote</em></p>\n<pre><code>(base) tangxinyingdeiMac:rqalpha xinglitao$ git remote -v\norigin  https://github.com/mar-heaven/rqalpha.git (fetch)\norigin  https://github.com/mar-heaven/rqalpha.git (push)\n</code></pre>\n<p>执行  <code>git remote add upstream git@github.com:ricequant/rqalpha.git</code><br>再看一下</p>\n<pre><code>(base) tangxinyingdeiMac:rqalpha xinglitao$ git remote -v\norigin  https://github.com/mar-heaven/rqalpha.git (fetch)\norigin  https://github.com/mar-heaven/rqalpha.git (push)\nupstream        git@github.com:ricequant/rqalpha.git (fetch)\nupstream        git@github.com:ricequant/rqalpha.git (push)\n</code></pre>\n<p><em>fetch</em> 一下</p>\n<pre><code>(base) tangxinyingdeiMac:rqalpha xinglitao$ git fetch upstream\nremote: Enumerating objects: 16, done.\nremote: Counting objects: 100% (16/16), done.\nremote: Compressing objects: 100% (10/10), done.\nremote: Total 16 (delta 10), reused 8 (delta 6), pack-reused 0\nUnpacking objects: 100% (16/16), done.\nFrom github.com:ricequant/rqalpha\n * [new branch]        0.3.x                    -&gt; upstream/0.3.x\n * [new branch]        2.1.x                    -&gt; upstream/2.1.x\n * [new branch]        2.2.x                    -&gt; upstream/2.2.x\n * [new branch]        3.0.x                    -&gt; upstream/3.0.x\n * [new branch]        3.1.1.x                  -&gt; upstream/3.1.1.x\n * [new branch]        3.3.0.x                  -&gt; upstream/3.3.0.x\n * [new branch]        3.3.x                    -&gt; upstream/3.3.x\n * [new branch]        3.4.x                    -&gt; upstream/3.4.x\n * [new branch]        develop                  -&gt; upstream/develop\n * [new branch]        feature/broker_refactory -&gt; upstream/feature/broker_refactory\n * [new branch]        feature/stat             -&gt; upstream/feature/stat\n * [new branch]        master                   -&gt; upstream/master\n</code></pre>\n<p>然后就可以 <em>merge</em> 了</p>\n<pre><code>(base) tangxinyingdeiMac:rqalpha xinglitao$ git merge upstream/develop\nMerge made by the &#39;recursive&#39; strategy.\n rqalpha/mod/rqalpha_mod_sys_progress/mod.py | 8 ++++----\n rqalpha/model/bar.py                        | 2 ++\n rqalpha/utils/log_capture.py                | 1 +\n 3 files changed, 7 insertions(+), 4 deletions(-)\n</code></pre>\n<p>收工！</p>\n"},{"title":"Github搜索开源项目方式","date":"2020-05-02T04:37:28.000Z","author":"Ginta","img":"http://img.ginta.top/sky2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/sky2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"### 前言\r\n作为全球最大的同性交友网站，**Github** 上有很多优秀的开源项目，使用正确的方式搜索可以很方便地找到自己需要的资源。\r\n\r\n### 使用\r\n筛选的语法非常简单\r\n```\r\n# 按照项目名/仓库名搜索（大小写不敏感）\r\nin:name xxx \r\n# 按照README搜索（大小写不敏感）\r\nin:readme xxx\r\n# 按照description搜索（大小写不敏感）\r\nin:description xxx\r\n# stars数大于xxx\r\nstars:>xxx\r\n# forks数大于xxx\r\nforks:>xxx\r\n# 编程语言为xxx\r\nlanguage:xxx\r\n# 最新更新时间晚于YYYY-MM-DD\r\npushed:>YYYY-MM-DD\r\n```\r\n举个例子，如果需要搜索一个基于 *Django* 的后台管理项目，可以通过以下方式，搜索仓库名包含 **django** 关键字并且项目描述中包含 **后台**  关键字。\r\n![](http://img.ginta.top/markdownx/2020/04/22/27c4d6a1-e8f3-40b1-8b14-93eb48715f1e.png)\r\n就是这么方便，当然可以通过更新时间来过滤一些不维护的项目。","source":"_posts/Github搜索开源项目方式.md","raw":"---\ntitle: Github搜索开源项目方式\ndate: 2020-05-02 12:37:28\nauthor: Ginta\nimg: http://img.ginta.top/sky2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/sky2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: Git/Github\n---\n### 前言\r\n作为全球最大的同性交友网站，**Github** 上有很多优秀的开源项目，使用正确的方式搜索可以很方便地找到自己需要的资源。\r\n\r\n### 使用\r\n筛选的语法非常简单\r\n```\r\n# 按照项目名/仓库名搜索（大小写不敏感）\r\nin:name xxx \r\n# 按照README搜索（大小写不敏感）\r\nin:readme xxx\r\n# 按照description搜索（大小写不敏感）\r\nin:description xxx\r\n# stars数大于xxx\r\nstars:>xxx\r\n# forks数大于xxx\r\nforks:>xxx\r\n# 编程语言为xxx\r\nlanguage:xxx\r\n# 最新更新时间晚于YYYY-MM-DD\r\npushed:>YYYY-MM-DD\r\n```\r\n举个例子，如果需要搜索一个基于 *Django* 的后台管理项目，可以通过以下方式，搜索仓库名包含 **django** 关键字并且项目描述中包含 **后台**  关键字。\r\n![](http://img.ginta.top/markdownx/2020/04/22/27c4d6a1-e8f3-40b1-8b14-93eb48715f1e.png)\r\n就是这么方便，当然可以通过更新时间来过滤一些不维护的项目。","slug":"Github搜索开源项目方式","published":1,"updated":"2022-08-11T12:49:48.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6180y001dtksc88nx17uk","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>作为全球最大的同性交友网站，<strong>Github</strong> 上有很多优秀的开源项目，使用正确的方式搜索可以很方便地找到自己需要的资源。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>筛选的语法非常简单</p>\n<pre><code># 按照项目名/仓库名搜索（大小写不敏感）\nin:name xxx \n# 按照README搜索（大小写不敏感）\nin:readme xxx\n# 按照description搜索（大小写不敏感）\nin:description xxx\n# stars数大于xxx\nstars:&gt;xxx\n# forks数大于xxx\nforks:&gt;xxx\n# 编程语言为xxx\nlanguage:xxx\n# 最新更新时间晚于YYYY-MM-DD\npushed:&gt;YYYY-MM-DD\n</code></pre>\n<p>举个例子，如果需要搜索一个基于 <em>Django</em> 的后台管理项目，可以通过以下方式，搜索仓库名包含 <strong>django</strong> 关键字并且项目描述中包含 <strong>后台</strong>  关键字。<br><img src=\"http://img.ginta.top/markdownx/2020/04/22/27c4d6a1-e8f3-40b1-8b14-93eb48715f1e.png\"><br>就是这么方便，当然可以通过更新时间来过滤一些不维护的项目。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>作为全球最大的同性交友网站，<strong>Github</strong> 上有很多优秀的开源项目，使用正确的方式搜索可以很方便地找到自己需要的资源。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>筛选的语法非常简单</p>\n<pre><code># 按照项目名/仓库名搜索（大小写不敏感）\nin:name xxx \n# 按照README搜索（大小写不敏感）\nin:readme xxx\n# 按照description搜索（大小写不敏感）\nin:description xxx\n# stars数大于xxx\nstars:&gt;xxx\n# forks数大于xxx\nforks:&gt;xxx\n# 编程语言为xxx\nlanguage:xxx\n# 最新更新时间晚于YYYY-MM-DD\npushed:&gt;YYYY-MM-DD\n</code></pre>\n<p>举个例子，如果需要搜索一个基于 <em>Django</em> 的后台管理项目，可以通过以下方式，搜索仓库名包含 <strong>django</strong> 关键字并且项目描述中包含 <strong>后台</strong>  关键字。<br><img src=\"http://img.ginta.top/markdownx/2020/04/22/27c4d6a1-e8f3-40b1-8b14-93eb48715f1e.png\"><br>就是这么方便，当然可以通过更新时间来过滤一些不维护的项目。</p>\n"},{"title":"Git设置代理","date":"2020-03-31T04:12:18.000Z","author":"Ginta","img":"http://img.ginta.top/lc3.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/lc3.jpg","toc":false,"mathjax":false,"summary":null,"_content":"### Git代理\r\n开了VPN以后发现执行 `git clone` 还是不够快，经大佬指点发现还需要配置 *git* 的代理。\r\n\r\n\r\n![](http://img.ginta.top/markdownx/2020/03/31/a4c201b6-9795-4e65-9c45-61c446acd63a.png)\r\n\r\n\r\nhttps://gist.github.com/evantoli/f8c23a37eb3558ab8765\r\n\r\ngit config --global http.proxy http://127.0.0.1:1087","source":"_posts/Git设置代理.md","raw":"---\ntitle: Git设置代理\ndate: 2020-03-31 12:12:18\nauthor: Ginta\nimg: http://img.ginta.top/lc3.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/lc3.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: 其他\n---\n### Git代理\r\n开了VPN以后发现执行 `git clone` 还是不够快，经大佬指点发现还需要配置 *git* 的代理。\r\n\r\n\r\n![](http://img.ginta.top/markdownx/2020/03/31/a4c201b6-9795-4e65-9c45-61c446acd63a.png)\r\n\r\n\r\nhttps://gist.github.com/evantoli/f8c23a37eb3558ab8765\r\n\r\ngit config --global http.proxy http://127.0.0.1:1087","slug":"Git设置代理","published":1,"updated":"2022-08-11T12:49:48.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6180y001htksc37df8i23","content":"<h3 id=\"Git代理\"><a href=\"#Git代理\" class=\"headerlink\" title=\"Git代理\"></a>Git代理</h3><p>开了VPN以后发现执行 <code>git clone</code> 还是不够快，经大佬指点发现还需要配置 <em>git</em> 的代理。</p>\n<p><img src=\"http://img.ginta.top/markdownx/2020/03/31/a4c201b6-9795-4e65-9c45-61c446acd63a.png\"></p>\n<p><a href=\"https://gist.github.com/evantoli/f8c23a37eb3558ab8765\">https://gist.github.com/evantoli/f8c23a37eb3558ab8765</a></p>\n<p>git config –global http.proxy <a href=\"http://127.0.0.1:1087/\">http://127.0.0.1:1087</a></p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h3 id=\"Git代理\"><a href=\"#Git代理\" class=\"headerlink\" title=\"Git代理\"></a>Git代理</h3><p>开了VPN以后发现执行 <code>git clone</code> 还是不够快，经大佬指点发现还需要配置 <em>git</em> 的代理。</p>\n<p><img src=\"http://img.ginta.top/markdownx/2020/03/31/a4c201b6-9795-4e65-9c45-61c446acd63a.png\"></p>\n<p><a href=\"https://gist.github.com/evantoli/f8c23a37eb3558ab8765\">https://gist.github.com/evantoli/f8c23a37eb3558ab8765</a></p>\n<p>git config –global http.proxy <a href=\"http://127.0.0.1:1087/\">http://127.0.0.1:1087</a></p>\n"},{"title":"Linux 文件隐藏属性","date":"2020-02-20T17:52:03.000Z","author":"Ginta","img":"http://img.ginta.top/dm3.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/dm3.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 前言\r\n我们都知道 **Linux** 系统文件都有 r(read)/w(write)/x(execute) 三个属性，但是文件系统还提供了隐藏属性，这些隐藏属性非常实用，可以进一步起到对文件的保护作用。\r\n\r\n### chattr(配置文件隐藏属性)\r\n配置文件隐藏属性的指令是 `chattr [+- - =][ASacdistu]  文件或目录名`\r\n其中选项和参数如下:\r\n\r\n选项与参数：\r\n\r\n- \\+ ：增加某一个特殊参数，其他原本存在参数则不动。\r\n- \\- ：移除某一个特殊参数，其他原本存在参数则不动。\r\n- = ：设定一定，且仅有后面接的参数\r\n- A ：当设定了 A 这个属性时，若你有存取此文件(或目录)时，他的访问时间 atime 将不会被修改，\r\n可避免 I/O 较慢的机器过度的存取磁盘。(目前建议使用文件系统挂载参数处理这个项目)\r\n- S ：一般文件是异步写入磁盘的(原理请参考前一章 sync 的说明)，如果加上 S 这个属性时，\r\n当你进行任何文件的修改，该更动会『同步』写入磁盘中。\r\n- a ：**当设定 a 之后，这个文件将只能增加数据，而不能删除也不能修改数据，只有 root 才能设定这属性**\r\n- c ：这个属性设定之后，将会自动的将此文件『压缩』，在读取的时候将会自动解压缩，\r\n但是在储存的时候，将会先进行压缩后再储存(看来对于大文件似乎蛮有用的！)\r\n- d ：当 dump 程序被执行的时候，设定 d 属性将可使该文件(或目录)不会被 dump 备份\r\n- i ：**这个 i 可就很厉害了！他可以让一个文件『不能被删除、改名、设定连结也无法写入或新增数据！』\r\n对于系统安全性有相当大的帮助！只有 root 能设定此属性**\r\n- s ：当文件设定了 s 属性时，如果这个文件被删除，他将会被完全的移除出这个硬盘空间，\r\n所以如果误删了，完全无法救回来了喔！\r\n- u ：与 s 相反的，当使用 u 来配置文件案时，如果该文件被删除了，则数据内容其实还存在磁盘中，\r\n可以使用来救援该文件喔！\r\n- 注意 1：属性设定常见的是 a 与 i 的设定值，而且很多设定值必须要身为 root 才能设定\r\n- 注意 2：xfs 文件系统仅支援 AadiS 而已\r\n\r\n```\r\nadmin@iZwz93u7y9mplneahfm5doZ:~$ cd /tmp/\r\nadmin@iZwz93u7y9mplneahfm5doZ:/tmp$ touch attrtest\r\nadmin@iZwz93u7y9mplneahfm5doZ:/tmp$ chattr +i attrtest \r\nchattr: Operation not permitted while setting flags on attrtest\r\nadmin@iZwz93u7y9mplneahfm5doZ:/tmp$ sudo chattr +i attrtest \r\nadmin@iZwz93u7y9mplneahfm5doZ:/tmp$ sudo rm attrtest   <=此时sudo也就是root都无法删除了\r\nrm: cannot remove 'attrtest': Operation not permitted\r\nadmin@iZwz93u7y9mplneahfm5doZ:/tmp$ chattr -i attrtest \r\nchattr: Operation not permitted while setting flags on attrtest\r\nadmin@iZwz93u7y9mplneahfm5doZ:/tmp$ sudo chattr -i attrtest  <=把i属性取消掉就可以删除了\r\nadmin@iZwz93u7y9mplneahfm5doZ:/tmp$ rm attrtest```\r\n\r\n其中最常用的就是 **i** 和 **a** 属性了，**i** 让一个文件无法修改，无法被删除，也不能被软链接，对系统安全性有很重要的意义。**a** 让一个文件只能增加数据，无法修改和删除数据。\r\n\t\t\r\n### lsattr(显示文件隐藏属性)\r\n显示隐藏属性的指令如下： `lsattr [- adR]  文件 或者 目录`\r\n选项与参数:\r\n\r\n- \\-a ：将隐藏文件的属性也秀出来\r\n- \\-d ：如果接的是目录，仅列出目录本身的属性而非目录内的文件名\r\n- \\-R ：连同子目录的数据也一并列出来","source":"_posts/Linux 文件隐藏属性.md","raw":"---\ntitle: Linux 文件隐藏属性\ndate: 2020-02-21 01:52:03\nauthor: Ginta\nimg: http://img.ginta.top/dm3.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/dm3.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: Linux\n---\n## 前言\r\n我们都知道 **Linux** 系统文件都有 r(read)/w(write)/x(execute) 三个属性，但是文件系统还提供了隐藏属性，这些隐藏属性非常实用，可以进一步起到对文件的保护作用。\r\n\r\n### chattr(配置文件隐藏属性)\r\n配置文件隐藏属性的指令是 `chattr [+- - =][ASacdistu]  文件或目录名`\r\n其中选项和参数如下:\r\n\r\n选项与参数：\r\n\r\n- \\+ ：增加某一个特殊参数，其他原本存在参数则不动。\r\n- \\- ：移除某一个特殊参数，其他原本存在参数则不动。\r\n- = ：设定一定，且仅有后面接的参数\r\n- A ：当设定了 A 这个属性时，若你有存取此文件(或目录)时，他的访问时间 atime 将不会被修改，\r\n可避免 I/O 较慢的机器过度的存取磁盘。(目前建议使用文件系统挂载参数处理这个项目)\r\n- S ：一般文件是异步写入磁盘的(原理请参考前一章 sync 的说明)，如果加上 S 这个属性时，\r\n当你进行任何文件的修改，该更动会『同步』写入磁盘中。\r\n- a ：**当设定 a 之后，这个文件将只能增加数据，而不能删除也不能修改数据，只有 root 才能设定这属性**\r\n- c ：这个属性设定之后，将会自动的将此文件『压缩』，在读取的时候将会自动解压缩，\r\n但是在储存的时候，将会先进行压缩后再储存(看来对于大文件似乎蛮有用的！)\r\n- d ：当 dump 程序被执行的时候，设定 d 属性将可使该文件(或目录)不会被 dump 备份\r\n- i ：**这个 i 可就很厉害了！他可以让一个文件『不能被删除、改名、设定连结也无法写入或新增数据！』\r\n对于系统安全性有相当大的帮助！只有 root 能设定此属性**\r\n- s ：当文件设定了 s 属性时，如果这个文件被删除，他将会被完全的移除出这个硬盘空间，\r\n所以如果误删了，完全无法救回来了喔！\r\n- u ：与 s 相反的，当使用 u 来配置文件案时，如果该文件被删除了，则数据内容其实还存在磁盘中，\r\n可以使用来救援该文件喔！\r\n- 注意 1：属性设定常见的是 a 与 i 的设定值，而且很多设定值必须要身为 root 才能设定\r\n- 注意 2：xfs 文件系统仅支援 AadiS 而已\r\n\r\n```\r\nadmin@iZwz93u7y9mplneahfm5doZ:~$ cd /tmp/\r\nadmin@iZwz93u7y9mplneahfm5doZ:/tmp$ touch attrtest\r\nadmin@iZwz93u7y9mplneahfm5doZ:/tmp$ chattr +i attrtest \r\nchattr: Operation not permitted while setting flags on attrtest\r\nadmin@iZwz93u7y9mplneahfm5doZ:/tmp$ sudo chattr +i attrtest \r\nadmin@iZwz93u7y9mplneahfm5doZ:/tmp$ sudo rm attrtest   <=此时sudo也就是root都无法删除了\r\nrm: cannot remove 'attrtest': Operation not permitted\r\nadmin@iZwz93u7y9mplneahfm5doZ:/tmp$ chattr -i attrtest \r\nchattr: Operation not permitted while setting flags on attrtest\r\nadmin@iZwz93u7y9mplneahfm5doZ:/tmp$ sudo chattr -i attrtest  <=把i属性取消掉就可以删除了\r\nadmin@iZwz93u7y9mplneahfm5doZ:/tmp$ rm attrtest```\r\n\r\n其中最常用的就是 **i** 和 **a** 属性了，**i** 让一个文件无法修改，无法被删除，也不能被软链接，对系统安全性有很重要的意义。**a** 让一个文件只能增加数据，无法修改和删除数据。\r\n\t\t\r\n### lsattr(显示文件隐藏属性)\r\n显示隐藏属性的指令如下： `lsattr [- adR]  文件 或者 目录`\r\n选项与参数:\r\n\r\n- \\-a ：将隐藏文件的属性也秀出来\r\n- \\-d ：如果接的是目录，仅列出目录本身的属性而非目录内的文件名\r\n- \\-R ：连同子目录的数据也一并列出来","slug":"Linux 文件隐藏属性","published":1,"updated":"2022-08-11T12:49:48.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6180y001ktksc6xumg0zt","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我们都知道 <strong>Linux</strong> 系统文件都有 r(read)&#x2F;w(write)&#x2F;x(execute) 三个属性，但是文件系统还提供了隐藏属性，这些隐藏属性非常实用，可以进一步起到对文件的保护作用。</p>\n<h3 id=\"chattr-配置文件隐藏属性\"><a href=\"#chattr-配置文件隐藏属性\" class=\"headerlink\" title=\"chattr(配置文件隐藏属性)\"></a>chattr(配置文件隐藏属性)</h3><p>配置文件隐藏属性的指令是 <code>chattr [+- - =][ASacdistu]  文件或目录名</code><br>其中选项和参数如下:</p>\n<p>选项与参数：</p>\n<ul>\n<li>+ ：增加某一个特殊参数，其他原本存在参数则不动。</li>\n<li>- ：移除某一个特殊参数，其他原本存在参数则不动。</li>\n<li>&#x3D; ：设定一定，且仅有后面接的参数</li>\n<li>A ：当设定了 A 这个属性时，若你有存取此文件(或目录)时，他的访问时间 atime 将不会被修改，<br>可避免 I&#x2F;O 较慢的机器过度的存取磁盘。(目前建议使用文件系统挂载参数处理这个项目)</li>\n<li>S ：一般文件是异步写入磁盘的(原理请参考前一章 sync 的说明)，如果加上 S 这个属性时，<br>当你进行任何文件的修改，该更动会『同步』写入磁盘中。</li>\n<li>a ：<strong>当设定 a 之后，这个文件将只能增加数据，而不能删除也不能修改数据，只有 root 才能设定这属性</strong></li>\n<li>c ：这个属性设定之后，将会自动的将此文件『压缩』，在读取的时候将会自动解压缩，<br>但是在储存的时候，将会先进行压缩后再储存(看来对于大文件似乎蛮有用的！)</li>\n<li>d ：当 dump 程序被执行的时候，设定 d 属性将可使该文件(或目录)不会被 dump 备份</li>\n<li>i ：<strong>这个 i 可就很厉害了！他可以让一个文件『不能被删除、改名、设定连结也无法写入或新增数据！』<br>对于系统安全性有相当大的帮助！只有 root 能设定此属性</strong></li>\n<li>s ：当文件设定了 s 属性时，如果这个文件被删除，他将会被完全的移除出这个硬盘空间，<br>所以如果误删了，完全无法救回来了喔！</li>\n<li>u ：与 s 相反的，当使用 u 来配置文件案时，如果该文件被删除了，则数据内容其实还存在磁盘中，<br>可以使用来救援该文件喔！</li>\n<li>注意 1：属性设定常见的是 a 与 i 的设定值，而且很多设定值必须要身为 root 才能设定</li>\n<li>注意 2：xfs 文件系统仅支援 AadiS 而已</li>\n</ul>\n<p><code> admin@iZwz93u7y9mplneahfm5doZ:~$ cd /tmp/ admin@iZwz93u7y9mplneahfm5doZ:/tmp$ touch attrtest admin@iZwz93u7y9mplneahfm5doZ:/tmp$ chattr +i attrtest  chattr: Operation not permitted while setting flags on attrtest admin@iZwz93u7y9mplneahfm5doZ:/tmp$ sudo chattr +i attrtest  admin@iZwz93u7y9mplneahfm5doZ:/tmp$ sudo rm attrtest   &lt;=此时sudo也就是root都无法删除了 rm: cannot remove &#39;attrtest&#39;: Operation not permitted admin@iZwz93u7y9mplneahfm5doZ:/tmp$ chattr -i attrtest  chattr: Operation not permitted while setting flags on attrtest admin@iZwz93u7y9mplneahfm5doZ:/tmp$ sudo chattr -i attrtest  &lt;=把i属性取消掉就可以删除了 admin@iZwz93u7y9mplneahfm5doZ:/tmp$ rm attrtest</code></p>\n<p>其中最常用的就是 <strong>i</strong> 和 <strong>a</strong> 属性了，<strong>i</strong> 让一个文件无法修改，无法被删除，也不能被软链接，对系统安全性有很重要的意义。<strong>a</strong> 让一个文件只能增加数据，无法修改和删除数据。</p>\n<h3 id=\"lsattr-显示文件隐藏属性\"><a href=\"#lsattr-显示文件隐藏属性\" class=\"headerlink\" title=\"lsattr(显示文件隐藏属性)\"></a>lsattr(显示文件隐藏属性)</h3><p>显示隐藏属性的指令如下： <code>lsattr [- adR]  文件 或者 目录</code><br>选项与参数:</p>\n<ul>\n<li>-a ：将隐藏文件的属性也秀出来</li>\n<li>-d ：如果接的是目录，仅列出目录本身的属性而非目录内的文件名</li>\n<li>-R ：连同子目录的数据也一并列出来</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我们都知道 <strong>Linux</strong> 系统文件都有 r(read)&#x2F;w(write)&#x2F;x(execute) 三个属性，但是文件系统还提供了隐藏属性，这些隐藏属性非常实用，可以进一步起到对文件的保护作用。</p>\n<h3 id=\"chattr-配置文件隐藏属性\"><a href=\"#chattr-配置文件隐藏属性\" class=\"headerlink\" title=\"chattr(配置文件隐藏属性)\"></a>chattr(配置文件隐藏属性)</h3><p>配置文件隐藏属性的指令是 <code>chattr [+- - =][ASacdistu]  文件或目录名</code><br>其中选项和参数如下:</p>\n<p>选项与参数：</p>\n<ul>\n<li>+ ：增加某一个特殊参数，其他原本存在参数则不动。</li>\n<li>- ：移除某一个特殊参数，其他原本存在参数则不动。</li>\n<li>&#x3D; ：设定一定，且仅有后面接的参数</li>\n<li>A ：当设定了 A 这个属性时，若你有存取此文件(或目录)时，他的访问时间 atime 将不会被修改，<br>可避免 I&#x2F;O 较慢的机器过度的存取磁盘。(目前建议使用文件系统挂载参数处理这个项目)</li>\n<li>S ：一般文件是异步写入磁盘的(原理请参考前一章 sync 的说明)，如果加上 S 这个属性时，<br>当你进行任何文件的修改，该更动会『同步』写入磁盘中。</li>\n<li>a ：<strong>当设定 a 之后，这个文件将只能增加数据，而不能删除也不能修改数据，只有 root 才能设定这属性</strong></li>\n<li>c ：这个属性设定之后，将会自动的将此文件『压缩』，在读取的时候将会自动解压缩，<br>但是在储存的时候，将会先进行压缩后再储存(看来对于大文件似乎蛮有用的！)</li>\n<li>d ：当 dump 程序被执行的时候，设定 d 属性将可使该文件(或目录)不会被 dump 备份</li>\n<li>i ：<strong>这个 i 可就很厉害了！他可以让一个文件『不能被删除、改名、设定连结也无法写入或新增数据！』<br>对于系统安全性有相当大的帮助！只有 root 能设定此属性</strong></li>\n<li>s ：当文件设定了 s 属性时，如果这个文件被删除，他将会被完全的移除出这个硬盘空间，<br>所以如果误删了，完全无法救回来了喔！</li>\n<li>u ：与 s 相反的，当使用 u 来配置文件案时，如果该文件被删除了，则数据内容其实还存在磁盘中，<br>可以使用来救援该文件喔！</li>\n<li>注意 1：属性设定常见的是 a 与 i 的设定值，而且很多设定值必须要身为 root 才能设定</li>\n<li>注意 2：xfs 文件系统仅支援 AadiS 而已</li>\n</ul>\n<p><code> admin@iZwz93u7y9mplneahfm5doZ:~$ cd /tmp/ admin@iZwz93u7y9mplneahfm5doZ:/tmp$ touch attrtest admin@iZwz93u7y9mplneahfm5doZ:/tmp$ chattr +i attrtest  chattr: Operation not permitted while setting flags on attrtest admin@iZwz93u7y9mplneahfm5doZ:/tmp$ sudo chattr +i attrtest  admin@iZwz93u7y9mplneahfm5doZ:/tmp$ sudo rm attrtest   &lt;=此时sudo也就是root都无法删除了 rm: cannot remove &#39;attrtest&#39;: Operation not permitted admin@iZwz93u7y9mplneahfm5doZ:/tmp$ chattr -i attrtest  chattr: Operation not permitted while setting flags on attrtest admin@iZwz93u7y9mplneahfm5doZ:/tmp$ sudo chattr -i attrtest  &lt;=把i属性取消掉就可以删除了 admin@iZwz93u7y9mplneahfm5doZ:/tmp$ rm attrtest</code></p>\n<p>其中最常用的就是 <strong>i</strong> 和 <strong>a</strong> 属性了，<strong>i</strong> 让一个文件无法修改，无法被删除，也不能被软链接，对系统安全性有很重要的意义。<strong>a</strong> 让一个文件只能增加数据，无法修改和删除数据。</p>\n<h3 id=\"lsattr-显示文件隐藏属性\"><a href=\"#lsattr-显示文件隐藏属性\" class=\"headerlink\" title=\"lsattr(显示文件隐藏属性)\"></a>lsattr(显示文件隐藏属性)</h3><p>显示隐藏属性的指令如下： <code>lsattr [- adR]  文件 或者 目录</code><br>选项与参数:</p>\n<ul>\n<li>-a ：将隐藏文件的属性也秀出来</li>\n<li>-d ：如果接的是目录，仅列出目录本身的属性而非目录内的文件名</li>\n<li>-R ：连同子目录的数据也一并列出来</li>\n</ul>\n"},{"title":"Linux文件属性","date":"2020-02-17T21:44:05.000Z","author":"Ginta","img":"http://img.ginta.top/dm3.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/dm3.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 前言\r\n以前一直只知道 *chmod + 777 文件或者目录* 就是把文件或者文件夹的权限提升到所有人都可以使用，至于为什么是 *777* 一直没有了解过，最近在看 《鸟叔的Linux私房菜-基础篇》，记录下这部分。\r\n## 查看文件属性\r\n执行 `ls -al` 来查看一个目录下的文件和文件夹（包含隐藏的）属性。\r\n\r\n![](http://img.ginta.top/markdownx/2019/12/02/89715ab9-d277-4c12-8f71-6cfa1b4bd987.png)\r\n\r\n分为七部分，以最后一行说明\r\n\r\n1.  -rw-r--r-- 文件的类型权限，一共十个字母。第一个字母是文件类型， *-* 表示是个文件，*d* 表示是个目录。后面九个每三个分为一组，表示执行权限,[rwx]分别表示可读，可写，可执行：第一组是文件所有者的权限，第二组是此所有者所在的组权限，第三组是非本人且没有加入本人所在组的权限。\r\n2. 第二个为连接到此节点的链接数，包括硬链接和软链接\r\n3. 第三个是文件（目录）所属用户 \r\n4. 第四个是文件所在的群组\r\n5. 第五个是文件大小\r\n6. 第六个是文件创建日期\r\n7. 第七个是文件名\r\n\r\n## 改变文件属性和权限\r\n1. chgrp: 改变文件所属群组\r\n2. chown: 改变文件拥有者\r\n3. chmod: 改变文件权限，SUID, SGID, SBIT 等等的特性\r\n\r\n### 改变文件所属组\r\n`chgrp users myblog.ini`\r\n把 *myblog.ini* 文件所在组改为 *uses*，如果组不存在则会报错\r\n\r\n### 改变文件的拥有者\r\n`chown ginta myblog.ini`\r\n把 *myblog.ini* 文件拥有者改为 *ginta*\r\n\r\n### 改变文件的权限 \r\nLinux文件一共有9个基本权限，分别是owner/group/others三个身份以及read/write/execute三个权限，三个三个为一组可以排列出9种权限。\r\n- r:4\r\n- w:2\r\n- e:1\r\n其中身份(owner/group/others)和权限(r/w/x)是累加的， 比如我们上边的 [-rw-r--r--] 就代表\r\n\r\n- owner = -rw = 0 + 4+2 =6\r\n- group = r-- = 4 +0 + 0 = 4\r\n- others = r-- = 4 + 0 + 0 = 4\r\n那么此文件的权限就是 644\r\n修改文件权限的命令是\r\n`chmod 777 myblog.ini`\r\n这条命令就是我之前无脑操作的，权限全开。\r\n\r\n## 总结\r\n以前的文件操作方式相当于把文件整个暴漏给了其他人，可读可写！！无知是多么可怕~","source":"_posts/Linux文件属性.md","raw":"---\ntitle: Linux文件属性\ndate: 2020-02-18 05:44:05\nauthor: Ginta\nimg: http://img.ginta.top/dm3.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/dm3.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: Linux\n---\n## 前言\r\n以前一直只知道 *chmod + 777 文件或者目录* 就是把文件或者文件夹的权限提升到所有人都可以使用，至于为什么是 *777* 一直没有了解过，最近在看 《鸟叔的Linux私房菜-基础篇》，记录下这部分。\r\n## 查看文件属性\r\n执行 `ls -al` 来查看一个目录下的文件和文件夹（包含隐藏的）属性。\r\n\r\n![](http://img.ginta.top/markdownx/2019/12/02/89715ab9-d277-4c12-8f71-6cfa1b4bd987.png)\r\n\r\n分为七部分，以最后一行说明\r\n\r\n1.  -rw-r--r-- 文件的类型权限，一共十个字母。第一个字母是文件类型， *-* 表示是个文件，*d* 表示是个目录。后面九个每三个分为一组，表示执行权限,[rwx]分别表示可读，可写，可执行：第一组是文件所有者的权限，第二组是此所有者所在的组权限，第三组是非本人且没有加入本人所在组的权限。\r\n2. 第二个为连接到此节点的链接数，包括硬链接和软链接\r\n3. 第三个是文件（目录）所属用户 \r\n4. 第四个是文件所在的群组\r\n5. 第五个是文件大小\r\n6. 第六个是文件创建日期\r\n7. 第七个是文件名\r\n\r\n## 改变文件属性和权限\r\n1. chgrp: 改变文件所属群组\r\n2. chown: 改变文件拥有者\r\n3. chmod: 改变文件权限，SUID, SGID, SBIT 等等的特性\r\n\r\n### 改变文件所属组\r\n`chgrp users myblog.ini`\r\n把 *myblog.ini* 文件所在组改为 *uses*，如果组不存在则会报错\r\n\r\n### 改变文件的拥有者\r\n`chown ginta myblog.ini`\r\n把 *myblog.ini* 文件拥有者改为 *ginta*\r\n\r\n### 改变文件的权限 \r\nLinux文件一共有9个基本权限，分别是owner/group/others三个身份以及read/write/execute三个权限，三个三个为一组可以排列出9种权限。\r\n- r:4\r\n- w:2\r\n- e:1\r\n其中身份(owner/group/others)和权限(r/w/x)是累加的， 比如我们上边的 [-rw-r--r--] 就代表\r\n\r\n- owner = -rw = 0 + 4+2 =6\r\n- group = r-- = 4 +0 + 0 = 4\r\n- others = r-- = 4 + 0 + 0 = 4\r\n那么此文件的权限就是 644\r\n修改文件权限的命令是\r\n`chmod 777 myblog.ini`\r\n这条命令就是我之前无脑操作的，权限全开。\r\n\r\n## 总结\r\n以前的文件操作方式相当于把文件整个暴漏给了其他人，可读可写！！无知是多么可怕~","slug":"Linux文件属性","published":1,"updated":"2022-08-11T12:49:48.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6180z001ntksc7oflblz4","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>以前一直只知道 <em>chmod + 777 文件或者目录</em> 就是把文件或者文件夹的权限提升到所有人都可以使用，至于为什么是 <em>777</em> 一直没有了解过，最近在看 《鸟叔的Linux私房菜-基础篇》，记录下这部分。</p>\n<h2 id=\"查看文件属性\"><a href=\"#查看文件属性\" class=\"headerlink\" title=\"查看文件属性\"></a>查看文件属性</h2><p>执行 <code>ls -al</code> 来查看一个目录下的文件和文件夹（包含隐藏的）属性。</p>\n<p><img src=\"http://img.ginta.top/markdownx/2019/12/02/89715ab9-d277-4c12-8f71-6cfa1b4bd987.png\"></p>\n<p>分为七部分，以最后一行说明</p>\n<ol>\n<li>-rw-r–r– 文件的类型权限，一共十个字母。第一个字母是文件类型， <em>-</em> 表示是个文件，<em>d</em> 表示是个目录。后面九个每三个分为一组，表示执行权限,[rwx]分别表示可读，可写，可执行：第一组是文件所有者的权限，第二组是此所有者所在的组权限，第三组是非本人且没有加入本人所在组的权限。</li>\n<li>第二个为连接到此节点的链接数，包括硬链接和软链接</li>\n<li>第三个是文件（目录）所属用户 </li>\n<li>第四个是文件所在的群组</li>\n<li>第五个是文件大小</li>\n<li>第六个是文件创建日期</li>\n<li>第七个是文件名</li>\n</ol>\n<h2 id=\"改变文件属性和权限\"><a href=\"#改变文件属性和权限\" class=\"headerlink\" title=\"改变文件属性和权限\"></a>改变文件属性和权限</h2><ol>\n<li>chgrp: 改变文件所属群组</li>\n<li>chown: 改变文件拥有者</li>\n<li>chmod: 改变文件权限，SUID, SGID, SBIT 等等的特性</li>\n</ol>\n<h3 id=\"改变文件所属组\"><a href=\"#改变文件所属组\" class=\"headerlink\" title=\"改变文件所属组\"></a>改变文件所属组</h3><p><code>chgrp users myblog.ini</code><br>把 <em>myblog.ini</em> 文件所在组改为 <em>uses</em>，如果组不存在则会报错</p>\n<h3 id=\"改变文件的拥有者\"><a href=\"#改变文件的拥有者\" class=\"headerlink\" title=\"改变文件的拥有者\"></a>改变文件的拥有者</h3><p><code>chown ginta myblog.ini</code><br>把 <em>myblog.ini</em> 文件拥有者改为 <em>ginta</em></p>\n<h3 id=\"改变文件的权限\"><a href=\"#改变文件的权限\" class=\"headerlink\" title=\"改变文件的权限\"></a>改变文件的权限</h3><p>Linux文件一共有9个基本权限，分别是owner&#x2F;group&#x2F;others三个身份以及read&#x2F;write&#x2F;execute三个权限，三个三个为一组可以排列出9种权限。</p>\n<ul>\n<li><p>r:4</p>\n</li>\n<li><p>w:2</p>\n</li>\n<li><p>e:1<br>其中身份(owner&#x2F;group&#x2F;others)和权限(r&#x2F;w&#x2F;x)是累加的， 比如我们上边的 [-rw-r–r–] 就代表</p>\n</li>\n<li><p>owner &#x3D; -rw &#x3D; 0 + 4+2 &#x3D;6</p>\n</li>\n<li><p>group &#x3D; r– &#x3D; 4 +0 + 0 &#x3D; 4</p>\n</li>\n<li><p>others &#x3D; r– &#x3D; 4 + 0 + 0 &#x3D; 4<br>那么此文件的权限就是 644<br>修改文件权限的命令是<br><code>chmod 777 myblog.ini</code><br>这条命令就是我之前无脑操作的，权限全开。</p>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以前的文件操作方式相当于把文件整个暴漏给了其他人，可读可写！！无知是多么可怕~</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>以前一直只知道 <em>chmod + 777 文件或者目录</em> 就是把文件或者文件夹的权限提升到所有人都可以使用，至于为什么是 <em>777</em> 一直没有了解过，最近在看 《鸟叔的Linux私房菜-基础篇》，记录下这部分。</p>\n<h2 id=\"查看文件属性\"><a href=\"#查看文件属性\" class=\"headerlink\" title=\"查看文件属性\"></a>查看文件属性</h2><p>执行 <code>ls -al</code> 来查看一个目录下的文件和文件夹（包含隐藏的）属性。</p>\n<p><img src=\"http://img.ginta.top/markdownx/2019/12/02/89715ab9-d277-4c12-8f71-6cfa1b4bd987.png\"></p>\n<p>分为七部分，以最后一行说明</p>\n<ol>\n<li>-rw-r–r– 文件的类型权限，一共十个字母。第一个字母是文件类型， <em>-</em> 表示是个文件，<em>d</em> 表示是个目录。后面九个每三个分为一组，表示执行权限,[rwx]分别表示可读，可写，可执行：第一组是文件所有者的权限，第二组是此所有者所在的组权限，第三组是非本人且没有加入本人所在组的权限。</li>\n<li>第二个为连接到此节点的链接数，包括硬链接和软链接</li>\n<li>第三个是文件（目录）所属用户 </li>\n<li>第四个是文件所在的群组</li>\n<li>第五个是文件大小</li>\n<li>第六个是文件创建日期</li>\n<li>第七个是文件名</li>\n</ol>\n<h2 id=\"改变文件属性和权限\"><a href=\"#改变文件属性和权限\" class=\"headerlink\" title=\"改变文件属性和权限\"></a>改变文件属性和权限</h2><ol>\n<li>chgrp: 改变文件所属群组</li>\n<li>chown: 改变文件拥有者</li>\n<li>chmod: 改变文件权限，SUID, SGID, SBIT 等等的特性</li>\n</ol>\n<h3 id=\"改变文件所属组\"><a href=\"#改变文件所属组\" class=\"headerlink\" title=\"改变文件所属组\"></a>改变文件所属组</h3><p><code>chgrp users myblog.ini</code><br>把 <em>myblog.ini</em> 文件所在组改为 <em>uses</em>，如果组不存在则会报错</p>\n<h3 id=\"改变文件的拥有者\"><a href=\"#改变文件的拥有者\" class=\"headerlink\" title=\"改变文件的拥有者\"></a>改变文件的拥有者</h3><p><code>chown ginta myblog.ini</code><br>把 <em>myblog.ini</em> 文件拥有者改为 <em>ginta</em></p>\n<h3 id=\"改变文件的权限\"><a href=\"#改变文件的权限\" class=\"headerlink\" title=\"改变文件的权限\"></a>改变文件的权限</h3><p>Linux文件一共有9个基本权限，分别是owner&#x2F;group&#x2F;others三个身份以及read&#x2F;write&#x2F;execute三个权限，三个三个为一组可以排列出9种权限。</p>\n<ul>\n<li><p>r:4</p>\n</li>\n<li><p>w:2</p>\n</li>\n<li><p>e:1<br>其中身份(owner&#x2F;group&#x2F;others)和权限(r&#x2F;w&#x2F;x)是累加的， 比如我们上边的 [-rw-r–r–] 就代表</p>\n</li>\n<li><p>owner &#x3D; -rw &#x3D; 0 + 4+2 &#x3D;6</p>\n</li>\n<li><p>group &#x3D; r– &#x3D; 4 +0 + 0 &#x3D; 4</p>\n</li>\n<li><p>others &#x3D; r– &#x3D; 4 + 0 + 0 &#x3D; 4<br>那么此文件的权限就是 644<br>修改文件权限的命令是<br><code>chmod 777 myblog.ini</code><br>这条命令就是我之前无脑操作的，权限全开。</p>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以前的文件操作方式相当于把文件整个暴漏给了其他人，可读可写！！无知是多么可怕~</p>\n"},{"title":"Python 线程池 ThreadPoolExecutor","date":"2019-12-19T20:31:05.000Z","author":"Ginta","img":"http://img.ginta.top/fantasy2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/fantasy2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 线程池\r\n以前我们定义多线程任务的时候都是通过循环来控制线程数量，很不优雅：\r\n```\r\nimport threading\r\n\r\n\r\nclass MyThread(threading.Thread):\r\n    def __init__(self, threadID, name, counter):\r\n        threading.Thread.__init__(self)\r\n        self.threadID = threadID\r\n        self.name = name\r\n        self.counter = counter\r\n\r\n    def run(self):\r\n        print(self.name)\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    t_list = []\r\n    for i in range(4):\r\n        name = \"线程-\" + str(i)\r\n        t = MyThread(i, name, i)\r\n        t.start()\r\n        t_list.append(t)\r\n    for t in t_list:\r\n        t.join()\r\n```\r\n这样做当然也是可以的，不过一方面是代码有些难看，虽然逻辑上是清晰的，另外一方面是我们无法知道哪个线程完成了，而且控制并发的方式也仅限于给循环的变量不同，说白了还是看起来不舒服。\r\n\r\n### 目标\r\n我们要寻求一种方式既可以实现多线程的效果，让代码看起来优雅一点。而且程序还可以知道哪些任务完成了\r\n\r\n### 线程池\r\n*Python3* 的线程池是在 **concurrent** 包下的 **ThreadPoolExecutor** 来实现的\r\n现在我们写一个简单的线程池例子\r\n```\r\nfrom concurrent.futures import ThreadPoolExecutor,\r\ndef get_html(times):\r\n    time.sleep(times)\r\n    print(\"get page {} success\".format(times))\r\n    return times\r\n    \r\nexecutor = ThreadPoolExecutor(max_workers=32)\r\ntask1 = executor.submit(get_html, (3))\r\ntask2 = executor.submit(get_html, (2))\r\ntask3 = executor.submit(get_html, (3))\r\n```\r\n如果我们想知道哪个任务执行完没有，可以用到 *done()* 方法\r\n>task1.done()\r\n>\r\n返回是 *True* 说明执行完了， *False* 说明没有执行完 \r\n\r\n在任务 **还未开始** 的时候我们可以使用 *cancel* 方法取消，如：`task2.cancel()`\r\n\r\n通过 *submit()* 函数提交执行的函数到线程池中, 是立即返回，也就是说主线程还是在向下进行的。*max_workers* 参数是控制同时执行的最大任务数，这里我们有三个任务，但是最大任务数为 2。*submit* 有两个参数，一个就是所要执行的函数，**一定不能加括号**，另一个就是函数参数，**这里哪怕只有一个参数也要像我这样括起来，不然会出问题！**。由于*max_workers*  是2，一开始有两个在执行，如果有一个先执行完毕了，第三个任务才会开始执行。比起之前的 *for*  循环要好看不少。\r\n\r\n如果有N个任务我们肯定不能一个个定义，用列表生成式就可以：\r\n```\r\n# ... 其他代码\r\ndef get_html(url):\r\n    time.sleep(times)\r\n    print(\"get page {} success\".format(times))\r\n    return times\r\nexecutor = ThreadPoolExecutor(max_workers=2)\r\nurls = [3,2,4]\r\nall_task = [executor.submit(get_html, (url) ) for url in urls]\r\n```\r\n\r\n### 高级\r\n我们想看看有多少个任务完成了，可以用 *concurrent.futures* 里的 *as_completed(task)* 方法，有一个参数可以是单独的 *task* 或者一个列表：\r\n```\r\n# ... 其他代码\r\nall_task = [executor.submit(get_html, (url) ) for url in urls]\r\n\r\nfor future in as_completed(all_task):\r\n    data = future.result()\r\n    print(\"get {} page\".format(data))\r\n```\r\n我们的 *task* 返回值在 *future.result()* 中 *as_completed* 在遍历的时候如果有函数执行完了就会返回执行完的结果，以后的任务执行完一个这里就会返回一个，可以理解为 *as_completed* 会等待任务执行，比如我们这里在遍历的时候只有一个执行完了，那就只会打印一个，如果有第二个执行完了，它就会打印第二个，而且这个也不会影响到主线程。\r\n\r\n### 等待\r\n如果我们想计算一下整个项目执行的时间，但是线程池不会阻塞主线程，就无法实现。\r\n```\r\n# ... 其他代码\r\n\r\nstart = time.time()\r\nall_task = [executor.submit(get_html, (url)) for url in urls]\r\nprint(\"all tasks have done,used {}s\".format(time.time()-start))\r\n```\r\n>all tasks have done,used 0.0010027885437011719s\r\nget page 2 success\r\nget page 3 success\r\nget page 4 success\r\n\r\n可以看到，任务开始以后主线程继续执行了，所以才会看到主线程的打印。\r\n\r\n不过 *concurrent.futures*  给我们提供了一个 *wait()* 方法，可以让我们等待一个任务执行完，否则一直阻塞在当前位置，当然他也可以传一个列表：\r\n```\r\nstart = time.time()\r\nall_task = [executor.submit(get_html, (url)) for url in urls]\r\nwait(all_task)\r\nprint(\"all tasks have done\")\r\n```\r\n>get page 2 success\r\nget page 3 success\r\nget page 4 success\r\nall tasks have done,used 6.002103328704834s\r\n\r\n可以看到，这里就会等待所有任务执行完主线程才会继续，至于为什么打印的是 *6s* 而不是最长线程所用的 *4s*，是因为我们前面设置了 `executor = ThreadPoolExecutor(max_workers=2)`，限制了它最大的并发数，也就是说 *2s* 后才会执行第三个任务所以用时就是 *2s + 4s = 6s*。","source":"_posts/Python 线程池 ThreadPoolExecutor.md","raw":"---\ntitle: Python 线程池 ThreadPoolExecutor\ndate: 2019-12-20 04:31:05\nauthor: Ginta\nimg: http://img.ginta.top/fantasy2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/fantasy2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - 多线程\ncategories: python\n---\n## 线程池\r\n以前我们定义多线程任务的时候都是通过循环来控制线程数量，很不优雅：\r\n```\r\nimport threading\r\n\r\n\r\nclass MyThread(threading.Thread):\r\n    def __init__(self, threadID, name, counter):\r\n        threading.Thread.__init__(self)\r\n        self.threadID = threadID\r\n        self.name = name\r\n        self.counter = counter\r\n\r\n    def run(self):\r\n        print(self.name)\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    t_list = []\r\n    for i in range(4):\r\n        name = \"线程-\" + str(i)\r\n        t = MyThread(i, name, i)\r\n        t.start()\r\n        t_list.append(t)\r\n    for t in t_list:\r\n        t.join()\r\n```\r\n这样做当然也是可以的，不过一方面是代码有些难看，虽然逻辑上是清晰的，另外一方面是我们无法知道哪个线程完成了，而且控制并发的方式也仅限于给循环的变量不同，说白了还是看起来不舒服。\r\n\r\n### 目标\r\n我们要寻求一种方式既可以实现多线程的效果，让代码看起来优雅一点。而且程序还可以知道哪些任务完成了\r\n\r\n### 线程池\r\n*Python3* 的线程池是在 **concurrent** 包下的 **ThreadPoolExecutor** 来实现的\r\n现在我们写一个简单的线程池例子\r\n```\r\nfrom concurrent.futures import ThreadPoolExecutor,\r\ndef get_html(times):\r\n    time.sleep(times)\r\n    print(\"get page {} success\".format(times))\r\n    return times\r\n    \r\nexecutor = ThreadPoolExecutor(max_workers=32)\r\ntask1 = executor.submit(get_html, (3))\r\ntask2 = executor.submit(get_html, (2))\r\ntask3 = executor.submit(get_html, (3))\r\n```\r\n如果我们想知道哪个任务执行完没有，可以用到 *done()* 方法\r\n>task1.done()\r\n>\r\n返回是 *True* 说明执行完了， *False* 说明没有执行完 \r\n\r\n在任务 **还未开始** 的时候我们可以使用 *cancel* 方法取消，如：`task2.cancel()`\r\n\r\n通过 *submit()* 函数提交执行的函数到线程池中, 是立即返回，也就是说主线程还是在向下进行的。*max_workers* 参数是控制同时执行的最大任务数，这里我们有三个任务，但是最大任务数为 2。*submit* 有两个参数，一个就是所要执行的函数，**一定不能加括号**，另一个就是函数参数，**这里哪怕只有一个参数也要像我这样括起来，不然会出问题！**。由于*max_workers*  是2，一开始有两个在执行，如果有一个先执行完毕了，第三个任务才会开始执行。比起之前的 *for*  循环要好看不少。\r\n\r\n如果有N个任务我们肯定不能一个个定义，用列表生成式就可以：\r\n```\r\n# ... 其他代码\r\ndef get_html(url):\r\n    time.sleep(times)\r\n    print(\"get page {} success\".format(times))\r\n    return times\r\nexecutor = ThreadPoolExecutor(max_workers=2)\r\nurls = [3,2,4]\r\nall_task = [executor.submit(get_html, (url) ) for url in urls]\r\n```\r\n\r\n### 高级\r\n我们想看看有多少个任务完成了，可以用 *concurrent.futures* 里的 *as_completed(task)* 方法，有一个参数可以是单独的 *task* 或者一个列表：\r\n```\r\n# ... 其他代码\r\nall_task = [executor.submit(get_html, (url) ) for url in urls]\r\n\r\nfor future in as_completed(all_task):\r\n    data = future.result()\r\n    print(\"get {} page\".format(data))\r\n```\r\n我们的 *task* 返回值在 *future.result()* 中 *as_completed* 在遍历的时候如果有函数执行完了就会返回执行完的结果，以后的任务执行完一个这里就会返回一个，可以理解为 *as_completed* 会等待任务执行，比如我们这里在遍历的时候只有一个执行完了，那就只会打印一个，如果有第二个执行完了，它就会打印第二个，而且这个也不会影响到主线程。\r\n\r\n### 等待\r\n如果我们想计算一下整个项目执行的时间，但是线程池不会阻塞主线程，就无法实现。\r\n```\r\n# ... 其他代码\r\n\r\nstart = time.time()\r\nall_task = [executor.submit(get_html, (url)) for url in urls]\r\nprint(\"all tasks have done,used {}s\".format(time.time()-start))\r\n```\r\n>all tasks have done,used 0.0010027885437011719s\r\nget page 2 success\r\nget page 3 success\r\nget page 4 success\r\n\r\n可以看到，任务开始以后主线程继续执行了，所以才会看到主线程的打印。\r\n\r\n不过 *concurrent.futures*  给我们提供了一个 *wait()* 方法，可以让我们等待一个任务执行完，否则一直阻塞在当前位置，当然他也可以传一个列表：\r\n```\r\nstart = time.time()\r\nall_task = [executor.submit(get_html, (url)) for url in urls]\r\nwait(all_task)\r\nprint(\"all tasks have done\")\r\n```\r\n>get page 2 success\r\nget page 3 success\r\nget page 4 success\r\nall tasks have done,used 6.002103328704834s\r\n\r\n可以看到，这里就会等待所有任务执行完主线程才会继续，至于为什么打印的是 *6s* 而不是最长线程所用的 *4s*，是因为我们前面设置了 `executor = ThreadPoolExecutor(max_workers=2)`，限制了它最大的并发数，也就是说 *2s* 后才会执行第三个任务所以用时就是 *2s + 4s = 6s*。","slug":"Python 线程池 ThreadPoolExecutor","published":1,"updated":"2022-08-11T12:49:48.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6180z001ptksc0hueegtj","content":"<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><p>以前我们定义多线程任务的时候都是通过循环来控制线程数量，很不优雅：</p>\n<pre><code>import threading\n\n\nclass MyThread(threading.Thread):\n    def __init__(self, threadID, name, counter):\n        threading.Thread.__init__(self)\n        self.threadID = threadID\n        self.name = name\n        self.counter = counter\n\n    def run(self):\n        print(self.name)\n\nif __name__ == &quot;__main__&quot;:\n\n    t_list = []\n    for i in range(4):\n        name = &quot;线程-&quot; + str(i)\n        t = MyThread(i, name, i)\n        t.start()\n        t_list.append(t)\n    for t in t_list:\n        t.join()\n</code></pre>\n<p>这样做当然也是可以的，不过一方面是代码有些难看，虽然逻辑上是清晰的，另外一方面是我们无法知道哪个线程完成了，而且控制并发的方式也仅限于给循环的变量不同，说白了还是看起来不舒服。</p>\n<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>我们要寻求一种方式既可以实现多线程的效果，让代码看起来优雅一点。而且程序还可以知道哪些任务完成了</p>\n<h3 id=\"线程池-1\"><a href=\"#线程池-1\" class=\"headerlink\" title=\"线程池\"></a>线程池</h3><p><em>Python3</em> 的线程池是在 <strong>concurrent</strong> 包下的 <strong>ThreadPoolExecutor</strong> 来实现的<br>现在我们写一个简单的线程池例子</p>\n<pre><code>from concurrent.futures import ThreadPoolExecutor,\ndef get_html(times):\n    time.sleep(times)\n    print(&quot;get page &#123;&#125; success&quot;.format(times))\n    return times\n    \nexecutor = ThreadPoolExecutor(max_workers=32)\ntask1 = executor.submit(get_html, (3))\ntask2 = executor.submit(get_html, (2))\ntask3 = executor.submit(get_html, (3))\n</code></pre>\n<p>如果我们想知道哪个任务执行完没有，可以用到 <em>done()</em> 方法</p>\n<blockquote>\n<p>task1.done()</p>\n</blockquote>\n<p>返回是 <em>True</em> 说明执行完了， <em>False</em> 说明没有执行完 </p>\n<p>在任务 <strong>还未开始</strong> 的时候我们可以使用 <em>cancel</em> 方法取消，如：<code>task2.cancel()</code></p>\n<p>通过 <em>submit()</em> 函数提交执行的函数到线程池中, 是立即返回，也就是说主线程还是在向下进行的。<em>max_workers</em> 参数是控制同时执行的最大任务数，这里我们有三个任务，但是最大任务数为 2。<em>submit</em> 有两个参数，一个就是所要执行的函数，<strong>一定不能加括号</strong>，另一个就是函数参数，<strong>这里哪怕只有一个参数也要像我这样括起来，不然会出问题！</strong>。由于<em>max_workers</em>  是2，一开始有两个在执行，如果有一个先执行完毕了，第三个任务才会开始执行。比起之前的 <em>for</em>  循环要好看不少。</p>\n<p>如果有N个任务我们肯定不能一个个定义，用列表生成式就可以：</p>\n<pre><code># ... 其他代码\ndef get_html(url):\n    time.sleep(times)\n    print(&quot;get page &#123;&#125; success&quot;.format(times))\n    return times\nexecutor = ThreadPoolExecutor(max_workers=2)\nurls = [3,2,4]\nall_task = [executor.submit(get_html, (url) ) for url in urls]\n</code></pre>\n<h3 id=\"高级\"><a href=\"#高级\" class=\"headerlink\" title=\"高级\"></a>高级</h3><p>我们想看看有多少个任务完成了，可以用 <em>concurrent.futures</em> 里的 <em>as_completed(task)</em> 方法，有一个参数可以是单独的 <em>task</em> 或者一个列表：</p>\n<pre><code># ... 其他代码\nall_task = [executor.submit(get_html, (url) ) for url in urls]\n\nfor future in as_completed(all_task):\n    data = future.result()\n    print(&quot;get &#123;&#125; page&quot;.format(data))\n</code></pre>\n<p>我们的 <em>task</em> 返回值在 <em>future.result()</em> 中 <em>as_completed</em> 在遍历的时候如果有函数执行完了就会返回执行完的结果，以后的任务执行完一个这里就会返回一个，可以理解为 <em>as_completed</em> 会等待任务执行，比如我们这里在遍历的时候只有一个执行完了，那就只会打印一个，如果有第二个执行完了，它就会打印第二个，而且这个也不会影响到主线程。</p>\n<h3 id=\"等待\"><a href=\"#等待\" class=\"headerlink\" title=\"等待\"></a>等待</h3><p>如果我们想计算一下整个项目执行的时间，但是线程池不会阻塞主线程，就无法实现。</p>\n<pre><code># ... 其他代码\n\nstart = time.time()\nall_task = [executor.submit(get_html, (url)) for url in urls]\nprint(&quot;all tasks have done,used &#123;&#125;s&quot;.format(time.time()-start))\n</code></pre>\n<blockquote>\n<p>all tasks have done,used 0.0010027885437011719s<br>get page 2 success<br>get page 3 success<br>get page 4 success</p>\n</blockquote>\n<p>可以看到，任务开始以后主线程继续执行了，所以才会看到主线程的打印。</p>\n<p>不过 <em>concurrent.futures</em>  给我们提供了一个 <em>wait()</em> 方法，可以让我们等待一个任务执行完，否则一直阻塞在当前位置，当然他也可以传一个列表：</p>\n<pre><code>start = time.time()\nall_task = [executor.submit(get_html, (url)) for url in urls]\nwait(all_task)\nprint(&quot;all tasks have done&quot;)\n</code></pre>\n<blockquote>\n<p>get page 2 success<br>get page 3 success<br>get page 4 success<br>all tasks have done,used 6.002103328704834s</p>\n</blockquote>\n<p>可以看到，这里就会等待所有任务执行完主线程才会继续，至于为什么打印的是 <em>6s</em> 而不是最长线程所用的 <em>4s</em>，是因为我们前面设置了 <code>executor = ThreadPoolExecutor(max_workers=2)</code>，限制了它最大的并发数，也就是说 <em>2s</em> 后才会执行第三个任务所以用时就是 <em>2s + 4s &#x3D; 6s</em>。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><p>以前我们定义多线程任务的时候都是通过循环来控制线程数量，很不优雅：</p>\n<pre><code>import threading\n\n\nclass MyThread(threading.Thread):\n    def __init__(self, threadID, name, counter):\n        threading.Thread.__init__(self)\n        self.threadID = threadID\n        self.name = name\n        self.counter = counter\n\n    def run(self):\n        print(self.name)\n\nif __name__ == &quot;__main__&quot;:\n\n    t_list = []\n    for i in range(4):\n        name = &quot;线程-&quot; + str(i)\n        t = MyThread(i, name, i)\n        t.start()\n        t_list.append(t)\n    for t in t_list:\n        t.join()\n</code></pre>\n<p>这样做当然也是可以的，不过一方面是代码有些难看，虽然逻辑上是清晰的，另外一方面是我们无法知道哪个线程完成了，而且控制并发的方式也仅限于给循环的变量不同，说白了还是看起来不舒服。</p>\n<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>我们要寻求一种方式既可以实现多线程的效果，让代码看起来优雅一点。而且程序还可以知道哪些任务完成了</p>\n<h3 id=\"线程池-1\"><a href=\"#线程池-1\" class=\"headerlink\" title=\"线程池\"></a>线程池</h3><p><em>Python3</em> 的线程池是在 <strong>concurrent</strong> 包下的 <strong>ThreadPoolExecutor</strong> 来实现的<br>现在我们写一个简单的线程池例子</p>\n<pre><code>from concurrent.futures import ThreadPoolExecutor,\ndef get_html(times):\n    time.sleep(times)\n    print(&quot;get page &#123;&#125; success&quot;.format(times))\n    return times\n    \nexecutor = ThreadPoolExecutor(max_workers=32)\ntask1 = executor.submit(get_html, (3))\ntask2 = executor.submit(get_html, (2))\ntask3 = executor.submit(get_html, (3))\n</code></pre>\n<p>如果我们想知道哪个任务执行完没有，可以用到 <em>done()</em> 方法</p>\n<blockquote>\n<p>task1.done()</p>\n</blockquote>\n<p>返回是 <em>True</em> 说明执行完了， <em>False</em> 说明没有执行完 </p>\n<p>在任务 <strong>还未开始</strong> 的时候我们可以使用 <em>cancel</em> 方法取消，如：<code>task2.cancel()</code></p>\n<p>通过 <em>submit()</em> 函数提交执行的函数到线程池中, 是立即返回，也就是说主线程还是在向下进行的。<em>max_workers</em> 参数是控制同时执行的最大任务数，这里我们有三个任务，但是最大任务数为 2。<em>submit</em> 有两个参数，一个就是所要执行的函数，<strong>一定不能加括号</strong>，另一个就是函数参数，<strong>这里哪怕只有一个参数也要像我这样括起来，不然会出问题！</strong>。由于<em>max_workers</em>  是2，一开始有两个在执行，如果有一个先执行完毕了，第三个任务才会开始执行。比起之前的 <em>for</em>  循环要好看不少。</p>\n<p>如果有N个任务我们肯定不能一个个定义，用列表生成式就可以：</p>\n<pre><code># ... 其他代码\ndef get_html(url):\n    time.sleep(times)\n    print(&quot;get page &#123;&#125; success&quot;.format(times))\n    return times\nexecutor = ThreadPoolExecutor(max_workers=2)\nurls = [3,2,4]\nall_task = [executor.submit(get_html, (url) ) for url in urls]\n</code></pre>\n<h3 id=\"高级\"><a href=\"#高级\" class=\"headerlink\" title=\"高级\"></a>高级</h3><p>我们想看看有多少个任务完成了，可以用 <em>concurrent.futures</em> 里的 <em>as_completed(task)</em> 方法，有一个参数可以是单独的 <em>task</em> 或者一个列表：</p>\n<pre><code># ... 其他代码\nall_task = [executor.submit(get_html, (url) ) for url in urls]\n\nfor future in as_completed(all_task):\n    data = future.result()\n    print(&quot;get &#123;&#125; page&quot;.format(data))\n</code></pre>\n<p>我们的 <em>task</em> 返回值在 <em>future.result()</em> 中 <em>as_completed</em> 在遍历的时候如果有函数执行完了就会返回执行完的结果，以后的任务执行完一个这里就会返回一个，可以理解为 <em>as_completed</em> 会等待任务执行，比如我们这里在遍历的时候只有一个执行完了，那就只会打印一个，如果有第二个执行完了，它就会打印第二个，而且这个也不会影响到主线程。</p>\n<h3 id=\"等待\"><a href=\"#等待\" class=\"headerlink\" title=\"等待\"></a>等待</h3><p>如果我们想计算一下整个项目执行的时间，但是线程池不会阻塞主线程，就无法实现。</p>\n<pre><code># ... 其他代码\n\nstart = time.time()\nall_task = [executor.submit(get_html, (url)) for url in urls]\nprint(&quot;all tasks have done,used &#123;&#125;s&quot;.format(time.time()-start))\n</code></pre>\n<blockquote>\n<p>all tasks have done,used 0.0010027885437011719s<br>get page 2 success<br>get page 3 success<br>get page 4 success</p>\n</blockquote>\n<p>可以看到，任务开始以后主线程继续执行了，所以才会看到主线程的打印。</p>\n<p>不过 <em>concurrent.futures</em>  给我们提供了一个 <em>wait()</em> 方法，可以让我们等待一个任务执行完，否则一直阻塞在当前位置，当然他也可以传一个列表：</p>\n<pre><code>start = time.time()\nall_task = [executor.submit(get_html, (url)) for url in urls]\nwait(all_task)\nprint(&quot;all tasks have done&quot;)\n</code></pre>\n<blockquote>\n<p>get page 2 success<br>get page 3 success<br>get page 4 success<br>all tasks have done,used 6.002103328704834s</p>\n</blockquote>\n<p>可以看到，这里就会等待所有任务执行完主线程才会继续，至于为什么打印的是 <em>6s</em> 而不是最长线程所用的 <em>4s</em>，是因为我们前面设置了 <code>executor = ThreadPoolExecutor(max_workers=2)</code>，限制了它最大的并发数，也就是说 <em>2s</em> 后才会执行第三个任务所以用时就是 <em>2s + 4s &#x3D; 6s</em>。</p>\n"},{"title":"Redis 数据保留","date":"2019-11-26T17:58:59.000Z","author":"Ginta","img":"http://img.ginta.top/qinshi2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/qinshi2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## Windows\r\n所谓数据丢失是因为 *redis* 有个专门保存数据的文件，而这个文件一开始是只读的，我直接把整个 *Redis* 文件夹的权限都开放给当前用户，这样退出时数据就会保留下来了。还有就是启动时要用`redis-server.exe redis.windows.conf`命令。","source":"_posts/Redis 数据保留.md","raw":"---\ntitle: Redis 数据保留\ndate: 2019-11-27 01:58:59\nauthor: Ginta\nimg: http://img.ginta.top/qinshi2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/qinshi2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: 数据库\n---\n## Windows\r\n所谓数据丢失是因为 *redis* 有个专门保存数据的文件，而这个文件一开始是只读的，我直接把整个 *Redis* 文件夹的权限都开放给当前用户，这样退出时数据就会保留下来了。还有就是启动时要用`redis-server.exe redis.windows.conf`命令。","slug":"Redis 数据保留","published":1,"updated":"2022-08-11T12:49:48.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6180z001rtkscdxnyefts","content":"<h2 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h2><p>所谓数据丢失是因为 <em>redis</em> 有个专门保存数据的文件，而这个文件一开始是只读的，我直接把整个 <em>Redis</em> 文件夹的权限都开放给当前用户，这样退出时数据就会保留下来了。还有就是启动时要用<code>redis-server.exe redis.windows.conf</code>命令。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h2><p>所谓数据丢失是因为 <em>redis</em> 有个专门保存数据的文件，而这个文件一开始是只读的，我直接把整个 <em>Redis</em> 文件夹的权限都开放给当前用户，这样退出时数据就会保留下来了。还有就是启动时要用<code>redis-server.exe redis.windows.conf</code>命令。</p>\n"},{"title":"Ubuntu系统安装redis","date":"2019-11-26T18:00:44.000Z","author":"Ginta","img":"http://img.ginta.top/dm3.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/dm3.jpg","toc":false,"mathjax":false,"summary":null,"_content":"### 前言\r\n一般爬虫是在 *Ubuntu* 系统下进行配置的，这次的任务就是在 *Ubuntu* 系统下安装 *redis*。\r\n\r\n### 步骤\r\n- `sudo apt-get install redis-server`，遇到依赖包输入 *Y* 回车即可\r\n- 启动，安装以后自动启动，可以查看 `ps aux|grep redis`\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190505003642237.png)\r\n- 手动启动， `sudo service redis-server start`\r\n- 停止， `sudo service redis-server stop`\r\n### 卸载\r\n`sudo apt-get purge --auto-remove redis-server`\r\n\r\n## Ubuntu连接Windows redis\r\n我这里 *Windows* 用的是本机 *redis* 服务，*ubuntu* 使用的虚拟机，也就是说是在同一个局域网下的，不同网络其实也差不多，连接其他服务器 *redis* 的命令是 `redis-cli -h host -p port`，比如我的 *Windows* 局域网 *ip* 是 *192.168.199.168* \r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190505011442356.png) \r\n*redis*端口是 *6379* ，那命令就是 `redis-cli -h 192.168.199.168 -p 6379`：\r\n**ubunu** 下：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190505010716614.png)\r\n我们用 *ubuntu* 系统连接 *Windows* 系统 *redis* ，这里显示失败了，我们开 *windows* 的 *redis* 配置文件 *redis.windows.conf* 有这么一行\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019050501090661.png)\r\n意思是其他人访问 *redis* 的时候地址是这个，我们都知道 *127.0.0.1* 永远指向本机，当然不能访问成功了，我们改成本机地址就可以，一定是当前局域网的 *ip*，也就是 *bind* 一定是**服务器**的 *ip* 地址，而不是客户端的 *ip*，如果是 **0.0.0.0** 表示其他机器可以通过本机的所有网卡（一台电脑可能有多个网卡） *ip* 地址连接本机 *redis*:\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190505011052738.png)\r\n保存之后重启 *windows* 的 *redis* 服务，再用 *ubuntu* 连接一下：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190505011205854.png)\r\n我们可以看到，成功了，并且访问 *username* 键，获得了它的值。","source":"_posts/Ubuntu系统安装redis.md","raw":"---\ntitle: Ubuntu系统安装redis\ndate: 2019-11-27 02:00:44\nauthor: Ginta\nimg: http://img.ginta.top/dm3.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/dm3.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - redis\ncategories: 数据库\n---\n### 前言\r\n一般爬虫是在 *Ubuntu* 系统下进行配置的，这次的任务就是在 *Ubuntu* 系统下安装 *redis*。\r\n\r\n### 步骤\r\n- `sudo apt-get install redis-server`，遇到依赖包输入 *Y* 回车即可\r\n- 启动，安装以后自动启动，可以查看 `ps aux|grep redis`\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190505003642237.png)\r\n- 手动启动， `sudo service redis-server start`\r\n- 停止， `sudo service redis-server stop`\r\n### 卸载\r\n`sudo apt-get purge --auto-remove redis-server`\r\n\r\n## Ubuntu连接Windows redis\r\n我这里 *Windows* 用的是本机 *redis* 服务，*ubuntu* 使用的虚拟机，也就是说是在同一个局域网下的，不同网络其实也差不多，连接其他服务器 *redis* 的命令是 `redis-cli -h host -p port`，比如我的 *Windows* 局域网 *ip* 是 *192.168.199.168* \r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190505011442356.png) \r\n*redis*端口是 *6379* ，那命令就是 `redis-cli -h 192.168.199.168 -p 6379`：\r\n**ubunu** 下：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190505010716614.png)\r\n我们用 *ubuntu* 系统连接 *Windows* 系统 *redis* ，这里显示失败了，我们开 *windows* 的 *redis* 配置文件 *redis.windows.conf* 有这么一行\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019050501090661.png)\r\n意思是其他人访问 *redis* 的时候地址是这个，我们都知道 *127.0.0.1* 永远指向本机，当然不能访问成功了，我们改成本机地址就可以，一定是当前局域网的 *ip*，也就是 *bind* 一定是**服务器**的 *ip* 地址，而不是客户端的 *ip*，如果是 **0.0.0.0** 表示其他机器可以通过本机的所有网卡（一台电脑可能有多个网卡） *ip* 地址连接本机 *redis*:\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190505011052738.png)\r\n保存之后重启 *windows* 的 *redis* 服务，再用 *ubuntu* 连接一下：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190505011205854.png)\r\n我们可以看到，成功了，并且访问 *username* 键，获得了它的值。","slug":"Ubuntu系统安装redis","published":1,"updated":"2022-08-11T12:49:48.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6180z001utksc77jt40sh","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>一般爬虫是在 <em>Ubuntu</em> 系统下进行配置的，这次的任务就是在 <em>Ubuntu</em> 系统下安装 <em>redis</em>。</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ul>\n<li><code>sudo apt-get install redis-server</code>，遇到依赖包输入 <em>Y</em> 回车即可</li>\n<li>启动，安装以后自动启动，可以查看 <code>ps aux|grep redis</code><br><img src=\"https://img-blog.csdnimg.cn/20190505003642237.png\" alt=\"在这里插入图片描述\"></li>\n<li>手动启动， <code>sudo service redis-server start</code></li>\n<li>停止， <code>sudo service redis-server stop</code></li>\n</ul>\n<h3 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h3><p><code>sudo apt-get purge --auto-remove redis-server</code></p>\n<h2 id=\"Ubuntu连接Windows-redis\"><a href=\"#Ubuntu连接Windows-redis\" class=\"headerlink\" title=\"Ubuntu连接Windows redis\"></a>Ubuntu连接Windows redis</h2><p>我这里 <em>Windows</em> 用的是本机 <em>redis</em> 服务，<em>ubuntu</em> 使用的虚拟机，也就是说是在同一个局域网下的，不同网络其实也差不多，连接其他服务器 <em>redis</em> 的命令是 <code>redis-cli -h host -p port</code>，比如我的 <em>Windows</em> 局域网 <em>ip</em> 是 <em>192.168.199.168</em><br><img src=\"https://img-blog.csdnimg.cn/20190505011442356.png\" alt=\"在这里插入图片描述\"><br><em>redis</em>端口是 <em>6379</em> ，那命令就是 <code>redis-cli -h 192.168.199.168 -p 6379</code>：<br><strong>ubunu</strong> 下：<br><img src=\"https://img-blog.csdnimg.cn/20190505010716614.png\" alt=\"在这里插入图片描述\"><br>我们用 <em>ubuntu</em> 系统连接 <em>Windows</em> 系统 <em>redis</em> ，这里显示失败了，我们开 <em>windows</em> 的 <em>redis</em> 配置文件 <em>redis.windows.conf</em> 有这么一行<br><img src=\"https://img-blog.csdnimg.cn/2019050501090661.png\" alt=\"在这里插入图片描述\"><br>意思是其他人访问 <em>redis</em> 的时候地址是这个，我们都知道 <em>127.0.0.1</em> 永远指向本机，当然不能访问成功了，我们改成本机地址就可以，一定是当前局域网的 <em>ip</em>，也就是 <em>bind</em> 一定是<strong>服务器</strong>的 <em>ip</em> 地址，而不是客户端的 <em>ip</em>，如果是 <strong>0.0.0.0</strong> 表示其他机器可以通过本机的所有网卡（一台电脑可能有多个网卡） <em>ip</em> 地址连接本机 <em>redis</em>:<br><img src=\"https://img-blog.csdnimg.cn/20190505011052738.png\" alt=\"在这里插入图片描述\"><br>保存之后重启 <em>windows</em> 的 <em>redis</em> 服务，再用 <em>ubuntu</em> 连接一下：<br><img src=\"https://img-blog.csdnimg.cn/20190505011205854.png\" alt=\"在这里插入图片描述\"><br>我们可以看到，成功了，并且访问 <em>username</em> 键，获得了它的值。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>一般爬虫是在 <em>Ubuntu</em> 系统下进行配置的，这次的任务就是在 <em>Ubuntu</em> 系统下安装 <em>redis</em>。</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ul>\n<li><code>sudo apt-get install redis-server</code>，遇到依赖包输入 <em>Y</em> 回车即可</li>\n<li>启动，安装以后自动启动，可以查看 <code>ps aux|grep redis</code><br><img src=\"https://img-blog.csdnimg.cn/20190505003642237.png\" alt=\"在这里插入图片描述\"></li>\n<li>手动启动， <code>sudo service redis-server start</code></li>\n<li>停止， <code>sudo service redis-server stop</code></li>\n</ul>\n<h3 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h3><p><code>sudo apt-get purge --auto-remove redis-server</code></p>\n<h2 id=\"Ubuntu连接Windows-redis\"><a href=\"#Ubuntu连接Windows-redis\" class=\"headerlink\" title=\"Ubuntu连接Windows redis\"></a>Ubuntu连接Windows redis</h2><p>我这里 <em>Windows</em> 用的是本机 <em>redis</em> 服务，<em>ubuntu</em> 使用的虚拟机，也就是说是在同一个局域网下的，不同网络其实也差不多，连接其他服务器 <em>redis</em> 的命令是 <code>redis-cli -h host -p port</code>，比如我的 <em>Windows</em> 局域网 <em>ip</em> 是 <em>192.168.199.168</em><br><img src=\"https://img-blog.csdnimg.cn/20190505011442356.png\" alt=\"在这里插入图片描述\"><br><em>redis</em>端口是 <em>6379</em> ，那命令就是 <code>redis-cli -h 192.168.199.168 -p 6379</code>：<br><strong>ubunu</strong> 下：<br><img src=\"https://img-blog.csdnimg.cn/20190505010716614.png\" alt=\"在这里插入图片描述\"><br>我们用 <em>ubuntu</em> 系统连接 <em>Windows</em> 系统 <em>redis</em> ，这里显示失败了，我们开 <em>windows</em> 的 <em>redis</em> 配置文件 <em>redis.windows.conf</em> 有这么一行<br><img src=\"https://img-blog.csdnimg.cn/2019050501090661.png\" alt=\"在这里插入图片描述\"><br>意思是其他人访问 <em>redis</em> 的时候地址是这个，我们都知道 <em>127.0.0.1</em> 永远指向本机，当然不能访问成功了，我们改成本机地址就可以，一定是当前局域网的 <em>ip</em>，也就是 <em>bind</em> 一定是<strong>服务器</strong>的 <em>ip</em> 地址，而不是客户端的 <em>ip</em>，如果是 <strong>0.0.0.0</strong> 表示其他机器可以通过本机的所有网卡（一台电脑可能有多个网卡） <em>ip</em> 地址连接本机 <em>redis</em>:<br><img src=\"https://img-blog.csdnimg.cn/20190505011052738.png\" alt=\"在这里插入图片描述\"><br>保存之后重启 <em>windows</em> 的 <em>redis</em> 服务，再用 <em>ubuntu</em> 连接一下：<br><img src=\"https://img-blog.csdnimg.cn/20190505011205854.png\" alt=\"在这里插入图片描述\"><br>我们可以看到，成功了，并且访问 <em>username</em> 键，获得了它的值。</p>\n"},{"title":"Windows10 docker desktop k8s","date":"2020-11-14T15:30:16.000Z","author":"Ginta","img":"http://img.ginta.top/lc3.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/lc3.jpg","toc":false,"mathjax":false,"summary":null,"_content":"##前言\n家里的台式机换了主板，cpu和内存之后流畅很多，图形化界面是 *Windows* 系统天然的优势，所以装了个 *docker desktop*，装完后发现可以一键安装k8s，果断开干。\n\n虽说是一键，但还是有个小问题。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201114232406748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70#pic_center)\n一起在启动中，等了很久都没反应，猜测是因为依赖都是外网，需要开代理。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201114232518138.png#pic_center)\n我的本机代理端口是1080。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201114232548120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70#pic_center)\n最终成功安装！\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201114232758702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70#pic_center)\n可能有细心的发现 *k8s* 版本变了，是因为我已经成功安装，看不到 *starting* 了，于是在网上找了一张，不过这不重要~\n\n## 2021.3.12\n`docker pull` 用的是https\n之前imac上的k8s一直无法启动，配置了 *https* 代理就好了。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210312164920909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\n","source":"_posts/Windows10 docker desktop k8s.md","raw":"---\ntitle: Windows10 docker desktop k8s\ndate: 2020-11-14 23:30:16\nauthor: Ginta\nimg: http://img.ginta.top/lc3.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/lc3.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - docker\n  - windows\n  - k8s\ncategories: 其他\n---\n##前言\n家里的台式机换了主板，cpu和内存之后流畅很多，图形化界面是 *Windows* 系统天然的优势，所以装了个 *docker desktop*，装完后发现可以一键安装k8s，果断开干。\n\n虽说是一键，但还是有个小问题。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201114232406748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70#pic_center)\n一起在启动中，等了很久都没反应，猜测是因为依赖都是外网，需要开代理。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201114232518138.png#pic_center)\n我的本机代理端口是1080。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201114232548120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70#pic_center)\n最终成功安装！\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201114232758702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70#pic_center)\n可能有细心的发现 *k8s* 版本变了，是因为我已经成功安装，看不到 *starting* 了，于是在网上找了一张，不过这不重要~\n\n## 2021.3.12\n`docker pull` 用的是https\n之前imac上的k8s一直无法启动，配置了 *https* 代理就好了。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210312164920909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\n","slug":"Windows10 docker desktop k8s","published":1,"updated":"2022-08-11T12:49:48.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6180z001vtksc2tq1cybv","content":"<p>##前言<br>家里的台式机换了主板，cpu和内存之后流畅很多，图形化界面是 <em>Windows</em> 系统天然的优势，所以装了个 <em>docker desktop</em>，装完后发现可以一键安装k8s，果断开干。</p>\n<p>虽说是一键，但还是有个小问题。<br><img src=\"https://img-blog.csdnimg.cn/20201114232406748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>一起在启动中，等了很久都没反应，猜测是因为依赖都是外网，需要开代理。<br><img src=\"https://img-blog.csdnimg.cn/20201114232518138.png#pic_center\" alt=\"在这里插入图片描述\"><br>我的本机代理端口是1080。<br><img src=\"https://img-blog.csdnimg.cn/20201114232548120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>最终成功安装！<br><img src=\"https://img-blog.csdnimg.cn/20201114232758702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>可能有细心的发现 <em>k8s</em> 版本变了，是因为我已经成功安装，看不到 <em>starting</em> 了，于是在网上找了一张，不过这不重要~</p>\n<h2 id=\"2021-3-12\"><a href=\"#2021-3-12\" class=\"headerlink\" title=\"2021.3.12\"></a>2021.3.12</h2><p><code>docker pull</code> 用的是https<br>之前imac上的k8s一直无法启动，配置了 <em>https</em> 代理就好了。<br><img src=\"https://img-blog.csdnimg.cn/20210312164920909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<p>##前言<br>家里的台式机换了主板，cpu和内存之后流畅很多，图形化界面是 <em>Windows</em> 系统天然的优势，所以装了个 <em>docker desktop</em>，装完后发现可以一键安装k8s，果断开干。</p>\n<p>虽说是一键，但还是有个小问题。<br><img src=\"https://img-blog.csdnimg.cn/20201114232406748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>一起在启动中，等了很久都没反应，猜测是因为依赖都是外网，需要开代理。<br><img src=\"https://img-blog.csdnimg.cn/20201114232518138.png#pic_center\" alt=\"在这里插入图片描述\"><br>我的本机代理端口是1080。<br><img src=\"https://img-blog.csdnimg.cn/20201114232548120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>最终成功安装！<br><img src=\"https://img-blog.csdnimg.cn/20201114232758702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>可能有细心的发现 <em>k8s</em> 版本变了，是因为我已经成功安装，看不到 <em>starting</em> 了，于是在网上找了一张，不过这不重要~</p>\n<h2 id=\"2021-3-12\"><a href=\"#2021-3-12\" class=\"headerlink\" title=\"2021.3.12\"></a>2021.3.12</h2><p><code>docker pull</code> 用的是https<br>之前imac上的k8s一直无法启动，配置了 <em>https</em> 代理就好了。<br><img src=\"https://img-blog.csdnimg.cn/20210312164920909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"apscheduler","date":"2020-03-28T08:45:55.000Z","author":"Ginta","img":"http://img.ginta.top/sky2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/sky2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 引言\r\n**apscheduler** 可以拆分成两部分：\r\n\r\n- **aps**: 进阶生产规划及排程系统\r\n- **scheduler**: 调度程序，日程安排程序\r\n\r\n当程序希望某个函数每隔一段时间执行一次，或者某个函数在某天（每天）的某个时间执行，就可以引入 **apscheduler** 库。\r\n\r\n```\r\nfrom apscheduler.schedulers.blocking import BlockingScheduler\r\nimport time\r\n\r\ndef doing():\r\n  print(\"do doing!!\")\r\n\r\nif __name__==\"__main__\":\r\n    sched = BlockingScheduler()  # 1\r\n    sched.add_job(doing, 'interval', seconds=10) # 2\r\n    sched.start() # 3\r\n```\r\n\r\n1. 实例化 *BlockingScheduler* 对象\r\n2. 添加任务\r\n\r\n*add_job()* 函数4个常用参数，第一个是所要执行的函数\r\n第二个是触发器，可以定时触发，或者间歇性触发\r\n\r\n- date 日期：触发任务运行的具体日期\r\n- interval 间隔：触发任务运行的时间间隔\r\n- cron 周期：触发任务运行的周期\r\n第三个参数是在选择触发器以后设置的，比如scconds=10就是10s执行一次\r\nargs用来给函数传参。args=['text']\r\n3. 启动日程\r\n可以通过sched.add_job()启动多个定时任务后再执行整个调度器\r\n比如\r\n```\r\nimport time\r\nfrom apscheduler.schedulers.background import BackgroundScheduler\r\ndef func1():\r\n    print(\"func1\")\r\n\r\ndef func2():\r\n    print(\"func2\")\r\n\r\ndef func3():\r\n    print(\"func3\")\r\n\r\n\r\nif __name__ == \"__main__\": \r\n    func_list = [func1, func2, func3] # 设置多个函数\r\n    sched = BackgroundScheduler()\r\n    for index, func in enumerate(func_list): \r\n        sched.add_job(func, 'interval', seconds=int(index)+1)\r\n    sched.start() # 最后一次性启动\r\n    while True:\r\n        time.sleep(1)\r\n        print('*'*50)\r\n```","source":"_posts/apscheduler.md","raw":"---\ntitle: apscheduler\ndate: 2020-03-28 16:45:55\nauthor: Ginta\nimg: http://img.ginta.top/sky2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/sky2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - python\ncategories: python\n---\n## 引言\r\n**apscheduler** 可以拆分成两部分：\r\n\r\n- **aps**: 进阶生产规划及排程系统\r\n- **scheduler**: 调度程序，日程安排程序\r\n\r\n当程序希望某个函数每隔一段时间执行一次，或者某个函数在某天（每天）的某个时间执行，就可以引入 **apscheduler** 库。\r\n\r\n```\r\nfrom apscheduler.schedulers.blocking import BlockingScheduler\r\nimport time\r\n\r\ndef doing():\r\n  print(\"do doing!!\")\r\n\r\nif __name__==\"__main__\":\r\n    sched = BlockingScheduler()  # 1\r\n    sched.add_job(doing, 'interval', seconds=10) # 2\r\n    sched.start() # 3\r\n```\r\n\r\n1. 实例化 *BlockingScheduler* 对象\r\n2. 添加任务\r\n\r\n*add_job()* 函数4个常用参数，第一个是所要执行的函数\r\n第二个是触发器，可以定时触发，或者间歇性触发\r\n\r\n- date 日期：触发任务运行的具体日期\r\n- interval 间隔：触发任务运行的时间间隔\r\n- cron 周期：触发任务运行的周期\r\n第三个参数是在选择触发器以后设置的，比如scconds=10就是10s执行一次\r\nargs用来给函数传参。args=['text']\r\n3. 启动日程\r\n可以通过sched.add_job()启动多个定时任务后再执行整个调度器\r\n比如\r\n```\r\nimport time\r\nfrom apscheduler.schedulers.background import BackgroundScheduler\r\ndef func1():\r\n    print(\"func1\")\r\n\r\ndef func2():\r\n    print(\"func2\")\r\n\r\ndef func3():\r\n    print(\"func3\")\r\n\r\n\r\nif __name__ == \"__main__\": \r\n    func_list = [func1, func2, func3] # 设置多个函数\r\n    sched = BackgroundScheduler()\r\n    for index, func in enumerate(func_list): \r\n        sched.add_job(func, 'interval', seconds=int(index)+1)\r\n    sched.start() # 最后一次性启动\r\n    while True:\r\n        time.sleep(1)\r\n        print('*'*50)\r\n```","slug":"apscheduler","published":1,"updated":"2022-08-11T12:49:48.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p61810001ytksc12kocx03","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p><strong>apscheduler</strong> 可以拆分成两部分：</p>\n<ul>\n<li><strong>aps</strong>: 进阶生产规划及排程系统</li>\n<li><strong>scheduler</strong>: 调度程序，日程安排程序</li>\n</ul>\n<p>当程序希望某个函数每隔一段时间执行一次，或者某个函数在某天（每天）的某个时间执行，就可以引入 <strong>apscheduler</strong> 库。</p>\n<pre><code>from apscheduler.schedulers.blocking import BlockingScheduler\nimport time\n\ndef doing():\n  print(&quot;do doing!!&quot;)\n\nif __name__==&quot;__main__&quot;:\n    sched = BlockingScheduler()  # 1\n    sched.add_job(doing, &#39;interval&#39;, seconds=10) # 2\n    sched.start() # 3\n</code></pre>\n<ol>\n<li>实例化 <em>BlockingScheduler</em> 对象</li>\n<li>添加任务</li>\n</ol>\n<p><em>add_job()</em> 函数4个常用参数，第一个是所要执行的函数<br>第二个是触发器，可以定时触发，或者间歇性触发</p>\n<ul>\n<li>date 日期：触发任务运行的具体日期</li>\n<li>interval 间隔：触发任务运行的时间间隔</li>\n<li>cron 周期：触发任务运行的周期<br>第三个参数是在选择触发器以后设置的，比如scconds&#x3D;10就是10s执行一次<br>args用来给函数传参。args&#x3D;[‘text’]</li>\n</ul>\n<ol start=\"3\">\n<li>启动日程<br>可以通过sched.add_job()启动多个定时任务后再执行整个调度器<br>比如</li>\n</ol>\n<pre><code>import time\nfrom apscheduler.schedulers.background import BackgroundScheduler\ndef func1():\n    print(&quot;func1&quot;)\n\ndef func2():\n    print(&quot;func2&quot;)\n\ndef func3():\n    print(&quot;func3&quot;)\n\n\nif __name__ == &quot;__main__&quot;: \n    func_list = [func1, func2, func3] # 设置多个函数\n    sched = BackgroundScheduler()\n    for index, func in enumerate(func_list): \n        sched.add_job(func, &#39;interval&#39;, seconds=int(index)+1)\n    sched.start() # 最后一次性启动\n    while True:\n        time.sleep(1)\n        print(&#39;*&#39;*50)\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p><strong>apscheduler</strong> 可以拆分成两部分：</p>\n<ul>\n<li><strong>aps</strong>: 进阶生产规划及排程系统</li>\n<li><strong>scheduler</strong>: 调度程序，日程安排程序</li>\n</ul>\n<p>当程序希望某个函数每隔一段时间执行一次，或者某个函数在某天（每天）的某个时间执行，就可以引入 <strong>apscheduler</strong> 库。</p>\n<pre><code>from apscheduler.schedulers.blocking import BlockingScheduler\nimport time\n\ndef doing():\n  print(&quot;do doing!!&quot;)\n\nif __name__==&quot;__main__&quot;:\n    sched = BlockingScheduler()  # 1\n    sched.add_job(doing, &#39;interval&#39;, seconds=10) # 2\n    sched.start() # 3\n</code></pre>\n<ol>\n<li>实例化 <em>BlockingScheduler</em> 对象</li>\n<li>添加任务</li>\n</ol>\n<p><em>add_job()</em> 函数4个常用参数，第一个是所要执行的函数<br>第二个是触发器，可以定时触发，或者间歇性触发</p>\n<ul>\n<li>date 日期：触发任务运行的具体日期</li>\n<li>interval 间隔：触发任务运行的时间间隔</li>\n<li>cron 周期：触发任务运行的周期<br>第三个参数是在选择触发器以后设置的，比如scconds&#x3D;10就是10s执行一次<br>args用来给函数传参。args&#x3D;[‘text’]</li>\n</ul>\n<ol start=\"3\">\n<li>启动日程<br>可以通过sched.add_job()启动多个定时任务后再执行整个调度器<br>比如</li>\n</ol>\n<pre><code>import time\nfrom apscheduler.schedulers.background import BackgroundScheduler\ndef func1():\n    print(&quot;func1&quot;)\n\ndef func2():\n    print(&quot;func2&quot;)\n\ndef func3():\n    print(&quot;func3&quot;)\n\n\nif __name__ == &quot;__main__&quot;: \n    func_list = [func1, func2, func3] # 设置多个函数\n    sched = BackgroundScheduler()\n    for index, func in enumerate(func_list): \n        sched.add_job(func, &#39;interval&#39;, seconds=int(index)+1)\n    sched.start() # 最后一次性启动\n    while True:\n        time.sleep(1)\n        print(&#39;*&#39;*50)\n</code></pre>\n"},{"title":"django Signals","date":"2019-11-26T19:00:17.000Z","author":"Ginta","img":"http://img.ginta.top/huoying2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/huoying2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"### 前言\r\n在平时应用中我们经常遇到比如新增加一个用户就发送短信，新增加一条留言就给我们 **发送邮箱** 这种需求，一般来说都可以在视图函数中完成这些操作。但是如果有多个地方都需要类似的操作，比如用户在N个应用中都可以留言，如果在每个视图函数中都写一遍 **发送邮箱** 这种操作无疑是不明智的，好在 *django* 框架中内置了 **signals(信号)** 机制，可以辅助我们监听某些行为，比如 *model* 新增，或者请求前和请求后。\r\n\r\n\r\n### 信号\r\n官方的信号主要分为以下几种，具体介绍详见 [Django信号](https://docs.djangoproject.com/en/2.2/ref/signals/)。\r\n1. Model signals\r\n - pre_init\r\n- post_init\r\n- pre_save\r\n- post_save\r\n- pre_delete\r\n- post_delete\r\n- class_prepared\r\n2. Management signals\r\n- post_syncdb\r\n3. Request/response signals\r\n- request_started\r\n- request_finished\r\n- got_request_exception\r\n4. Test signals\r\n- template_rendered\r\n\r\n\r\n### 举例\r\n这里举一个例子，官方推荐在应用目录下新增一个 signals.py文件\r\n1. 新建并注册app，我这里app名字是 *signalapp*\r\n2. 在app下方新建signals.py文件\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191114002302755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\r\n4. 修改 app下面的 apps.py\r\n```python\r\n# 原来\r\nfrom django.apps import AppConfig\r\n\r\nclass SignalappConfig(AppConfig):\r\n    name = 'signalapp'\r\n```\r\n\r\n```python\r\n# 现在\r\nfrom django.apps import AppConfig\r\n\r\nclass SignalappConfig(AppConfig):\r\n    name = 'signalapp'\r\n\r\n    def ready(self):\r\n        # signals are imported, so that they are defined and can be used\r\n        import signalapp.signals\r\n```\r\n4. 编写 signals.py\r\n```python\r\n# signalapp/signals.py\r\nfrom django.dispatch import receiver\r\nfrom django.db.models.signals import post_save\r\nfrom signalapp.models import Post\r\n\r\ndef send():\r\n    print(\"发送邮件\")\r\n\r\n@receiver(post_save, sender=Post, dispatch_uid='Post_post_save')\r\ndef send_email(instance, **kwargs):\r\n    send()\r\n```\r\n然后重启服务，接下来在任意地方只要新建了 **Post** 实例并保存了，该函数都将在保存之后执行。与之相对应的是函数是 **pre_save**，显然，这是在保存前执行的。 *receiver* 装饰器有三个参数：\r\n1. 第一个是要监听的信号，我这里是 post_save\r\n2. 第二个是所要监听的模型，我这里是 Post 是文章模型，所以这个函数会在每次有文章保存（新建或者更新）的时候触发\r\n3. post_save 在某个Model保存之后调用, 对于每个唯一的dispatch_uid,接收器都只被信号调用一次\r\n\r\n这个信号的功能就是每次新建或者更改文章的时候发送一个邮件（邮件函数没写。。）\r\n\r\n## 补充\r\n其他的可以参考文档，*django* 的文档写得确实很好，另外想说的就是 *sender* 不一定是模型，也可以是函数：\r\n```python\r\nimport datetime\r\nimport os\r\nimport django\r\nfrom django.dispatch import receiver, Signal\r\nfrom django.http import HttpResponse\r\n\r\n# 发送信号\r\ndef signal_sender(request):\r\n    hostname = request.get_host()\r\n    msg = 'Django Signal Test'\r\n    time = datetime.date.today()\r\n    signal_obj.send(sender=signal_sender, hostname=hostname, msg=msg, time=time)     # 关键一行\r\n    return HttpResponse('200 OK')\r\n\r\n\r\n# 接收和处理信号\r\n@receiver(signal_obj, sender=signal_sender)       # 装饰器把处理函数注册成接收器\r\ndef signal_handler(sender, **kwargs):　　　　　　   # 接收到信号后，在此处理。kwargs字典用来传递Signal信号参数\r\n    print('接收到信号内容：{hostname}|\"{msg}\"|{time}'.format(hostname=kwargs['hostname'], msg=kwargs['msg'], time=kwargs['time']))\r\n```","source":"_posts/django Signals.md","raw":"---\ntitle: django Signals\ndate: 2019-11-27 03:00:17\nauthor: Ginta\nimg: http://img.ginta.top/huoying2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/huoying2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - Django\ncategories: Django\n---\n### 前言\r\n在平时应用中我们经常遇到比如新增加一个用户就发送短信，新增加一条留言就给我们 **发送邮箱** 这种需求，一般来说都可以在视图函数中完成这些操作。但是如果有多个地方都需要类似的操作，比如用户在N个应用中都可以留言，如果在每个视图函数中都写一遍 **发送邮箱** 这种操作无疑是不明智的，好在 *django* 框架中内置了 **signals(信号)** 机制，可以辅助我们监听某些行为，比如 *model* 新增，或者请求前和请求后。\r\n\r\n\r\n### 信号\r\n官方的信号主要分为以下几种，具体介绍详见 [Django信号](https://docs.djangoproject.com/en/2.2/ref/signals/)。\r\n1. Model signals\r\n - pre_init\r\n- post_init\r\n- pre_save\r\n- post_save\r\n- pre_delete\r\n- post_delete\r\n- class_prepared\r\n2. Management signals\r\n- post_syncdb\r\n3. Request/response signals\r\n- request_started\r\n- request_finished\r\n- got_request_exception\r\n4. Test signals\r\n- template_rendered\r\n\r\n\r\n### 举例\r\n这里举一个例子，官方推荐在应用目录下新增一个 signals.py文件\r\n1. 新建并注册app，我这里app名字是 *signalapp*\r\n2. 在app下方新建signals.py文件\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191114002302755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\r\n4. 修改 app下面的 apps.py\r\n```python\r\n# 原来\r\nfrom django.apps import AppConfig\r\n\r\nclass SignalappConfig(AppConfig):\r\n    name = 'signalapp'\r\n```\r\n\r\n```python\r\n# 现在\r\nfrom django.apps import AppConfig\r\n\r\nclass SignalappConfig(AppConfig):\r\n    name = 'signalapp'\r\n\r\n    def ready(self):\r\n        # signals are imported, so that they are defined and can be used\r\n        import signalapp.signals\r\n```\r\n4. 编写 signals.py\r\n```python\r\n# signalapp/signals.py\r\nfrom django.dispatch import receiver\r\nfrom django.db.models.signals import post_save\r\nfrom signalapp.models import Post\r\n\r\ndef send():\r\n    print(\"发送邮件\")\r\n\r\n@receiver(post_save, sender=Post, dispatch_uid='Post_post_save')\r\ndef send_email(instance, **kwargs):\r\n    send()\r\n```\r\n然后重启服务，接下来在任意地方只要新建了 **Post** 实例并保存了，该函数都将在保存之后执行。与之相对应的是函数是 **pre_save**，显然，这是在保存前执行的。 *receiver* 装饰器有三个参数：\r\n1. 第一个是要监听的信号，我这里是 post_save\r\n2. 第二个是所要监听的模型，我这里是 Post 是文章模型，所以这个函数会在每次有文章保存（新建或者更新）的时候触发\r\n3. post_save 在某个Model保存之后调用, 对于每个唯一的dispatch_uid,接收器都只被信号调用一次\r\n\r\n这个信号的功能就是每次新建或者更改文章的时候发送一个邮件（邮件函数没写。。）\r\n\r\n## 补充\r\n其他的可以参考文档，*django* 的文档写得确实很好，另外想说的就是 *sender* 不一定是模型，也可以是函数：\r\n```python\r\nimport datetime\r\nimport os\r\nimport django\r\nfrom django.dispatch import receiver, Signal\r\nfrom django.http import HttpResponse\r\n\r\n# 发送信号\r\ndef signal_sender(request):\r\n    hostname = request.get_host()\r\n    msg = 'Django Signal Test'\r\n    time = datetime.date.today()\r\n    signal_obj.send(sender=signal_sender, hostname=hostname, msg=msg, time=time)     # 关键一行\r\n    return HttpResponse('200 OK')\r\n\r\n\r\n# 接收和处理信号\r\n@receiver(signal_obj, sender=signal_sender)       # 装饰器把处理函数注册成接收器\r\ndef signal_handler(sender, **kwargs):　　　　　　   # 接收到信号后，在此处理。kwargs字典用来传递Signal信号参数\r\n    print('接收到信号内容：{hostname}|\"{msg}\"|{time}'.format(hostname=kwargs['hostname'], msg=kwargs['msg'], time=kwargs['time']))\r\n```","slug":"django Signals","published":1,"updated":"2022-08-11T12:49:48.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p618100022tkscd1h33v6h","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在平时应用中我们经常遇到比如新增加一个用户就发送短信，新增加一条留言就给我们 <strong>发送邮箱</strong> 这种需求，一般来说都可以在视图函数中完成这些操作。但是如果有多个地方都需要类似的操作，比如用户在N个应用中都可以留言，如果在每个视图函数中都写一遍 <strong>发送邮箱</strong> 这种操作无疑是不明智的，好在 <em>django</em> 框架中内置了 <strong>signals(信号)</strong> 机制，可以辅助我们监听某些行为，比如 <em>model</em> 新增，或者请求前和请求后。</p>\n<h3 id=\"信号\"><a href=\"#信号\" class=\"headerlink\" title=\"信号\"></a>信号</h3><p>官方的信号主要分为以下几种，具体介绍详见 <a href=\"https://docs.djangoproject.com/en/2.2/ref/signals/\">Django信号</a>。</p>\n<ol>\n<li>Model signals</li>\n</ol>\n<ul>\n<li>pre_init</li>\n<li>post_init</li>\n<li>pre_save</li>\n<li>post_save</li>\n<li>pre_delete</li>\n<li>post_delete</li>\n<li>class_prepared</li>\n</ul>\n<ol start=\"2\">\n<li>Management signals</li>\n</ol>\n<ul>\n<li>post_syncdb</li>\n</ul>\n<ol start=\"3\">\n<li>Request&#x2F;response signals</li>\n</ol>\n<ul>\n<li>request_started</li>\n<li>request_finished</li>\n<li>got_request_exception</li>\n</ul>\n<ol start=\"4\">\n<li>Test signals</li>\n</ol>\n<ul>\n<li>template_rendered</li>\n</ul>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><p>这里举一个例子，官方推荐在应用目录下新增一个 signals.py文件</p>\n<ol>\n<li>新建并注册app，我这里app名字是 <em>signalapp</em></li>\n<li>在app下方新建signals.py文件<br><img src=\"https://img-blog.csdnimg.cn/20191114002302755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>修改 app下面的 apps.py</li>\n</ol>\n<pre><code class=\"python\"># 原来\nfrom django.apps import AppConfig\n\nclass SignalappConfig(AppConfig):\n    name = &#39;signalapp&#39;\n</code></pre>\n<pre><code class=\"python\"># 现在\nfrom django.apps import AppConfig\n\nclass SignalappConfig(AppConfig):\n    name = &#39;signalapp&#39;\n\n    def ready(self):\n        # signals are imported, so that they are defined and can be used\n        import signalapp.signals\n</code></pre>\n<ol start=\"4\">\n<li>编写 signals.py</li>\n</ol>\n<pre><code class=\"python\"># signalapp/signals.py\nfrom django.dispatch import receiver\nfrom django.db.models.signals import post_save\nfrom signalapp.models import Post\n\ndef send():\n    print(&quot;发送邮件&quot;)\n\n@receiver(post_save, sender=Post, dispatch_uid=&#39;Post_post_save&#39;)\ndef send_email(instance, **kwargs):\n    send()\n</code></pre>\n<p>然后重启服务，接下来在任意地方只要新建了 <strong>Post</strong> 实例并保存了，该函数都将在保存之后执行。与之相对应的是函数是 <strong>pre_save</strong>，显然，这是在保存前执行的。 <em>receiver</em> 装饰器有三个参数：</p>\n<ol>\n<li>第一个是要监听的信号，我这里是 post_save</li>\n<li>第二个是所要监听的模型，我这里是 Post 是文章模型，所以这个函数会在每次有文章保存（新建或者更新）的时候触发</li>\n<li>post_save 在某个Model保存之后调用, 对于每个唯一的dispatch_uid,接收器都只被信号调用一次</li>\n</ol>\n<p>这个信号的功能就是每次新建或者更改文章的时候发送一个邮件（邮件函数没写。。）</p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>其他的可以参考文档，<em>django</em> 的文档写得确实很好，另外想说的就是 <em>sender</em> 不一定是模型，也可以是函数：</p>\n<pre><code class=\"python\">import datetime\nimport os\nimport django\nfrom django.dispatch import receiver, Signal\nfrom django.http import HttpResponse\n\n# 发送信号\ndef signal_sender(request):\n    hostname = request.get_host()\n    msg = &#39;Django Signal Test&#39;\n    time = datetime.date.today()\n    signal_obj.send(sender=signal_sender, hostname=hostname, msg=msg, time=time)     # 关键一行\n    return HttpResponse(&#39;200 OK&#39;)\n\n\n# 接收和处理信号\n@receiver(signal_obj, sender=signal_sender)       # 装饰器把处理函数注册成接收器\ndef signal_handler(sender, **kwargs):　　　　　　   # 接收到信号后，在此处理。kwargs字典用来传递Signal信号参数\n    print(&#39;接收到信号内容：&#123;hostname&#125;|&quot;&#123;msg&#125;&quot;|&#123;time&#125;&#39;.format(hostname=kwargs[&#39;hostname&#39;], msg=kwargs[&#39;msg&#39;], time=kwargs[&#39;time&#39;]))\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在平时应用中我们经常遇到比如新增加一个用户就发送短信，新增加一条留言就给我们 <strong>发送邮箱</strong> 这种需求，一般来说都可以在视图函数中完成这些操作。但是如果有多个地方都需要类似的操作，比如用户在N个应用中都可以留言，如果在每个视图函数中都写一遍 <strong>发送邮箱</strong> 这种操作无疑是不明智的，好在 <em>django</em> 框架中内置了 <strong>signals(信号)</strong> 机制，可以辅助我们监听某些行为，比如 <em>model</em> 新增，或者请求前和请求后。</p>\n<h3 id=\"信号\"><a href=\"#信号\" class=\"headerlink\" title=\"信号\"></a>信号</h3><p>官方的信号主要分为以下几种，具体介绍详见 <a href=\"https://docs.djangoproject.com/en/2.2/ref/signals/\">Django信号</a>。</p>\n<ol>\n<li>Model signals</li>\n</ol>\n<ul>\n<li>pre_init</li>\n<li>post_init</li>\n<li>pre_save</li>\n<li>post_save</li>\n<li>pre_delete</li>\n<li>post_delete</li>\n<li>class_prepared</li>\n</ul>\n<ol start=\"2\">\n<li>Management signals</li>\n</ol>\n<ul>\n<li>post_syncdb</li>\n</ul>\n<ol start=\"3\">\n<li>Request&#x2F;response signals</li>\n</ol>\n<ul>\n<li>request_started</li>\n<li>request_finished</li>\n<li>got_request_exception</li>\n</ul>\n<ol start=\"4\">\n<li>Test signals</li>\n</ol>\n<ul>\n<li>template_rendered</li>\n</ul>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><p>这里举一个例子，官方推荐在应用目录下新增一个 signals.py文件</p>\n<ol>\n<li>新建并注册app，我这里app名字是 <em>signalapp</em></li>\n<li>在app下方新建signals.py文件<br><img src=\"https://img-blog.csdnimg.cn/20191114002302755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>修改 app下面的 apps.py</li>\n</ol>\n<pre><code class=\"python\"># 原来\nfrom django.apps import AppConfig\n\nclass SignalappConfig(AppConfig):\n    name = &#39;signalapp&#39;\n</code></pre>\n<pre><code class=\"python\"># 现在\nfrom django.apps import AppConfig\n\nclass SignalappConfig(AppConfig):\n    name = &#39;signalapp&#39;\n\n    def ready(self):\n        # signals are imported, so that they are defined and can be used\n        import signalapp.signals\n</code></pre>\n<ol start=\"4\">\n<li>编写 signals.py</li>\n</ol>\n<pre><code class=\"python\"># signalapp/signals.py\nfrom django.dispatch import receiver\nfrom django.db.models.signals import post_save\nfrom signalapp.models import Post\n\ndef send():\n    print(&quot;发送邮件&quot;)\n\n@receiver(post_save, sender=Post, dispatch_uid=&#39;Post_post_save&#39;)\ndef send_email(instance, **kwargs):\n    send()\n</code></pre>\n<p>然后重启服务，接下来在任意地方只要新建了 <strong>Post</strong> 实例并保存了，该函数都将在保存之后执行。与之相对应的是函数是 <strong>pre_save</strong>，显然，这是在保存前执行的。 <em>receiver</em> 装饰器有三个参数：</p>\n<ol>\n<li>第一个是要监听的信号，我这里是 post_save</li>\n<li>第二个是所要监听的模型，我这里是 Post 是文章模型，所以这个函数会在每次有文章保存（新建或者更新）的时候触发</li>\n<li>post_save 在某个Model保存之后调用, 对于每个唯一的dispatch_uid,接收器都只被信号调用一次</li>\n</ol>\n<p>这个信号的功能就是每次新建或者更改文章的时候发送一个邮件（邮件函数没写。。）</p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>其他的可以参考文档，<em>django</em> 的文档写得确实很好，另外想说的就是 <em>sender</em> 不一定是模型，也可以是函数：</p>\n<pre><code class=\"python\">import datetime\nimport os\nimport django\nfrom django.dispatch import receiver, Signal\nfrom django.http import HttpResponse\n\n# 发送信号\ndef signal_sender(request):\n    hostname = request.get_host()\n    msg = &#39;Django Signal Test&#39;\n    time = datetime.date.today()\n    signal_obj.send(sender=signal_sender, hostname=hostname, msg=msg, time=time)     # 关键一行\n    return HttpResponse(&#39;200 OK&#39;)\n\n\n# 接收和处理信号\n@receiver(signal_obj, sender=signal_sender)       # 装饰器把处理函数注册成接收器\ndef signal_handler(sender, **kwargs):　　　　　　   # 接收到信号后，在此处理。kwargs字典用来传递Signal信号参数\n    print(&#39;接收到信号内容：&#123;hostname&#125;|&quot;&#123;msg&#125;&quot;|&#123;time&#125;&#39;.format(hostname=kwargs[&#39;hostname&#39;], msg=kwargs[&#39;msg&#39;], time=kwargs[&#39;time&#39;]))\n</code></pre>\n"},{"title":"django 图片储存七牛云","date":"2019-11-26T18:01:47.000Z","author":"Ginta","img":"http://img.ginta.top/lc3.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/lc3.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 前言\r\n每次给博客添加一篇文章的时候，上传图片的时候总要心痛一下，因为服务器的空间很有限，最主要的还是感觉把博客的图片和代码放到一个地方总有种污染代码的感觉，以前就听说了七牛云很方便，于是就用一下了。\r\n\r\n## 开始\r\n首先我们要新建一个七牛云的储存空间，具体操作如下。\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191115112528531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\r\n进入这里，点击 **对象存储**\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191115112615815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\r\n**新建存储空间** ，存储空间的名称随意就好，配置可以仿照这里图片这个样子，然后就OK了，对于新用户首先要实名认证，不过挺快的，我申请了2个小时不到就通过了。\r\n\r\n## 使用\r\n- 首先安装依赖包\r\n`pip install django-qiniu-storage`\r\n- 然后 **settings.py** 配置新增如下\r\n```python\r\n# 七牛云配置\r\n\r\nQINIU_ACCESS_KEY = 'ACCESS_KEY'\r\n# 七牛给开发者分配的AccessKey\r\nQINIU_SECRET_KEY = 'SECRET_KEY'\r\n# 七牛给开发者分配的Secret\r\nQINIU_BUCKET_NAME = 'myblog'  # 就是刚才新建的存储空间名称\r\n# 用来存放文件的七牛空间(bucket)的名字\r\nQINIU_BUCKET_DOMAIN = '*****.bkt.clouddn.com/'\r\n# 七牛空间(bucket)的域名，别遗漏了后面的/\r\nDEFAULT_FILE_STORAGE = 'qiniustorage.backends.QiniuStorage'\r\n# 只用七牛托管动态生成的文件（例如用户上传的文件）\r\nQINIU_SECURE_URL = False\r\n# 使用http\r\n\r\nPREFIX_URL = 'http://'\r\n# 文件系统更改\r\nMEDIA_URL = PREFIX_URL + QINIU_BUCKET_DOMAIN\r\nMEDIA_ROOT = 'media/'\r\n```\r\n**QINIU_BUCKET_DOMAIN** 的位置如下\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191115113248223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\r\n\r\n我的轮播图 *model* 如下\r\n```python\r\nclass Banner(BaseModel):\r\n    STATUS_NORMAL = 1\r\n    STATUS_DELETE = 0\r\n    STATUS_ITEMS = (\r\n        (STATUS_NORMAL, '正常'),\r\n        (STATUS_DELETE, '删除'),\r\n    )\r\n    \"\"\"\r\n    轮播图\r\n    \"\"\"\r\n    # upload_to 存储子目录，真实存放地址会使用配置中的MADIE_ROOT+upload_to\r\n    image = models.ImageField(upload_to='banner', verbose_name='轮播图', null=True,\r\n                              blank=True, help_text=\"轮播图片的大小规格：1920x720，或者对应的比例的图片\")\r\n    name = models.CharField(max_length=150, verbose_name='轮播图名称')\r\n    desc = models.CharField(max_length=250, verbose_name='描述信息', help_text=\"请填写描述信息\")\r\n    status = models.PositiveIntegerField(default=STATUS_NORMAL,\r\n                                         choices=STATUS_ITEMS, verbose_name='状态')\r\n    link = models.CharField(max_length=150, verbose_name='轮播图广告地址')\r\n\r\n    class Meta:\r\n        db_table = 'home_banner'\r\n        verbose_name = '轮播图'\r\n        verbose_name_plural = verbose_name\r\n\r\n    def __str__(self):\r\n        return self.name\r\n```\r\n注意 **image** 这个字段，我设置了 `upload_to='banner'` ，他就会保存到  **MADIE_ROOT+'banner'** 这个路径下，而 **MADIE_ROOT** 在配置中是 `MEDIA_URL = PREFIX_URL + QINIU_BUCKET_DOMAIN` ,也就是 `'http://*****.bkt.clouddn.com/'`\r\n于是我们的轮播图图片就会保存到类似这样的url下：\r\n`http://*****.bkt.clouddn.com/banner/20160923084104779_jAQ76Kw.jpg`\r\n\r\n## 总结\r\n基本操作就是这样了，因为网上有很多大佬已经踩过坑了，所以避免了不少麻烦。**七牛云不止可以存储图片，也可以存储其他文件，CDN加速等等，以后有需要会补充上的。**","source":"_posts/django 图片储存七牛云.md","raw":"---\ntitle: django 图片储存七牛云\ndate: 2019-11-27 02:01:47\nauthor: Ginta\nimg: http://img.ginta.top/lc3.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/lc3.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - python\n  - Django\ncategories: python\n---\n## 前言\r\n每次给博客添加一篇文章的时候，上传图片的时候总要心痛一下，因为服务器的空间很有限，最主要的还是感觉把博客的图片和代码放到一个地方总有种污染代码的感觉，以前就听说了七牛云很方便，于是就用一下了。\r\n\r\n## 开始\r\n首先我们要新建一个七牛云的储存空间，具体操作如下。\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191115112528531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\r\n进入这里，点击 **对象存储**\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191115112615815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\r\n**新建存储空间** ，存储空间的名称随意就好，配置可以仿照这里图片这个样子，然后就OK了，对于新用户首先要实名认证，不过挺快的，我申请了2个小时不到就通过了。\r\n\r\n## 使用\r\n- 首先安装依赖包\r\n`pip install django-qiniu-storage`\r\n- 然后 **settings.py** 配置新增如下\r\n```python\r\n# 七牛云配置\r\n\r\nQINIU_ACCESS_KEY = 'ACCESS_KEY'\r\n# 七牛给开发者分配的AccessKey\r\nQINIU_SECRET_KEY = 'SECRET_KEY'\r\n# 七牛给开发者分配的Secret\r\nQINIU_BUCKET_NAME = 'myblog'  # 就是刚才新建的存储空间名称\r\n# 用来存放文件的七牛空间(bucket)的名字\r\nQINIU_BUCKET_DOMAIN = '*****.bkt.clouddn.com/'\r\n# 七牛空间(bucket)的域名，别遗漏了后面的/\r\nDEFAULT_FILE_STORAGE = 'qiniustorage.backends.QiniuStorage'\r\n# 只用七牛托管动态生成的文件（例如用户上传的文件）\r\nQINIU_SECURE_URL = False\r\n# 使用http\r\n\r\nPREFIX_URL = 'http://'\r\n# 文件系统更改\r\nMEDIA_URL = PREFIX_URL + QINIU_BUCKET_DOMAIN\r\nMEDIA_ROOT = 'media/'\r\n```\r\n**QINIU_BUCKET_DOMAIN** 的位置如下\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191115113248223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\r\n\r\n我的轮播图 *model* 如下\r\n```python\r\nclass Banner(BaseModel):\r\n    STATUS_NORMAL = 1\r\n    STATUS_DELETE = 0\r\n    STATUS_ITEMS = (\r\n        (STATUS_NORMAL, '正常'),\r\n        (STATUS_DELETE, '删除'),\r\n    )\r\n    \"\"\"\r\n    轮播图\r\n    \"\"\"\r\n    # upload_to 存储子目录，真实存放地址会使用配置中的MADIE_ROOT+upload_to\r\n    image = models.ImageField(upload_to='banner', verbose_name='轮播图', null=True,\r\n                              blank=True, help_text=\"轮播图片的大小规格：1920x720，或者对应的比例的图片\")\r\n    name = models.CharField(max_length=150, verbose_name='轮播图名称')\r\n    desc = models.CharField(max_length=250, verbose_name='描述信息', help_text=\"请填写描述信息\")\r\n    status = models.PositiveIntegerField(default=STATUS_NORMAL,\r\n                                         choices=STATUS_ITEMS, verbose_name='状态')\r\n    link = models.CharField(max_length=150, verbose_name='轮播图广告地址')\r\n\r\n    class Meta:\r\n        db_table = 'home_banner'\r\n        verbose_name = '轮播图'\r\n        verbose_name_plural = verbose_name\r\n\r\n    def __str__(self):\r\n        return self.name\r\n```\r\n注意 **image** 这个字段，我设置了 `upload_to='banner'` ，他就会保存到  **MADIE_ROOT+'banner'** 这个路径下，而 **MADIE_ROOT** 在配置中是 `MEDIA_URL = PREFIX_URL + QINIU_BUCKET_DOMAIN` ,也就是 `'http://*****.bkt.clouddn.com/'`\r\n于是我们的轮播图图片就会保存到类似这样的url下：\r\n`http://*****.bkt.clouddn.com/banner/20160923084104779_jAQ76Kw.jpg`\r\n\r\n## 总结\r\n基本操作就是这样了，因为网上有很多大佬已经踩过坑了，所以避免了不少麻烦。**七牛云不止可以存储图片，也可以存储其他文件，CDN加速等等，以后有需要会补充上的。**","slug":"django 图片储存七牛云","published":1,"updated":"2022-08-11T12:49:48.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p618100026tksc3rcw7g5w","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>每次给博客添加一篇文章的时候，上传图片的时候总要心痛一下，因为服务器的空间很有限，最主要的还是感觉把博客的图片和代码放到一个地方总有种污染代码的感觉，以前就听说了七牛云很方便，于是就用一下了。</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>首先我们要新建一个七牛云的储存空间，具体操作如下。<br><img src=\"https://img-blog.csdnimg.cn/20191115112528531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>进入这里，点击 <strong>对象存储</strong><br><img src=\"https://img-blog.csdnimg.cn/20191115112615815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><strong>新建存储空间</strong> ，存储空间的名称随意就好，配置可以仿照这里图片这个样子，然后就OK了，对于新用户首先要实名认证，不过挺快的，我申请了2个小时不到就通过了。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li>首先安装依赖包<br><code>pip install django-qiniu-storage</code></li>\n<li>然后 <strong>settings.py</strong> 配置新增如下</li>\n</ul>\n<pre><code class=\"python\"># 七牛云配置\n\nQINIU_ACCESS_KEY = &#39;ACCESS_KEY&#39;\n# 七牛给开发者分配的AccessKey\nQINIU_SECRET_KEY = &#39;SECRET_KEY&#39;\n# 七牛给开发者分配的Secret\nQINIU_BUCKET_NAME = &#39;myblog&#39;  # 就是刚才新建的存储空间名称\n# 用来存放文件的七牛空间(bucket)的名字\nQINIU_BUCKET_DOMAIN = &#39;*****.bkt.clouddn.com/&#39;\n# 七牛空间(bucket)的域名，别遗漏了后面的/\nDEFAULT_FILE_STORAGE = &#39;qiniustorage.backends.QiniuStorage&#39;\n# 只用七牛托管动态生成的文件（例如用户上传的文件）\nQINIU_SECURE_URL = False\n# 使用http\n\nPREFIX_URL = &#39;http://&#39;\n# 文件系统更改\nMEDIA_URL = PREFIX_URL + QINIU_BUCKET_DOMAIN\nMEDIA_ROOT = &#39;media/&#39;\n</code></pre>\n<p><strong>QINIU_BUCKET_DOMAIN</strong> 的位置如下<br><img src=\"https://img-blog.csdnimg.cn/20191115113248223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>我的轮播图 <em>model</em> 如下</p>\n<pre><code class=\"python\">class Banner(BaseModel):\n    STATUS_NORMAL = 1\n    STATUS_DELETE = 0\n    STATUS_ITEMS = (\n        (STATUS_NORMAL, &#39;正常&#39;),\n        (STATUS_DELETE, &#39;删除&#39;),\n    )\n    &quot;&quot;&quot;\n    轮播图\n    &quot;&quot;&quot;\n    # upload_to 存储子目录，真实存放地址会使用配置中的MADIE_ROOT+upload_to\n    image = models.ImageField(upload_to=&#39;banner&#39;, verbose_name=&#39;轮播图&#39;, null=True,\n                              blank=True, help_text=&quot;轮播图片的大小规格：1920x720，或者对应的比例的图片&quot;)\n    name = models.CharField(max_length=150, verbose_name=&#39;轮播图名称&#39;)\n    desc = models.CharField(max_length=250, verbose_name=&#39;描述信息&#39;, help_text=&quot;请填写描述信息&quot;)\n    status = models.PositiveIntegerField(default=STATUS_NORMAL,\n                                         choices=STATUS_ITEMS, verbose_name=&#39;状态&#39;)\n    link = models.CharField(max_length=150, verbose_name=&#39;轮播图广告地址&#39;)\n\n    class Meta:\n        db_table = &#39;home_banner&#39;\n        verbose_name = &#39;轮播图&#39;\n        verbose_name_plural = verbose_name\n\n    def __str__(self):\n        return self.name\n</code></pre>\n<p>注意 <strong>image</strong> 这个字段，我设置了 <code>upload_to=&#39;banner&#39;</code> ，他就会保存到  <strong>MADIE_ROOT+’banner’</strong> 这个路径下，而 <strong>MADIE_ROOT</strong> 在配置中是 <code>MEDIA_URL = PREFIX_URL + QINIU_BUCKET_DOMAIN</code> ,也就是 <code>&#39;http://*****.bkt.clouddn.com/&#39;</code><br>于是我们的轮播图图片就会保存到类似这样的url下：<br><code>http://*****.bkt.clouddn.com/banner/20160923084104779_jAQ76Kw.jpg</code></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>基本操作就是这样了，因为网上有很多大佬已经踩过坑了，所以避免了不少麻烦。<strong>七牛云不止可以存储图片，也可以存储其他文件，CDN加速等等，以后有需要会补充上的。</strong></p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>每次给博客添加一篇文章的时候，上传图片的时候总要心痛一下，因为服务器的空间很有限，最主要的还是感觉把博客的图片和代码放到一个地方总有种污染代码的感觉，以前就听说了七牛云很方便，于是就用一下了。</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>首先我们要新建一个七牛云的储存空间，具体操作如下。<br><img src=\"https://img-blog.csdnimg.cn/20191115112528531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>进入这里，点击 <strong>对象存储</strong><br><img src=\"https://img-blog.csdnimg.cn/20191115112615815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><strong>新建存储空间</strong> ，存储空间的名称随意就好，配置可以仿照这里图片这个样子，然后就OK了，对于新用户首先要实名认证，不过挺快的，我申请了2个小时不到就通过了。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li>首先安装依赖包<br><code>pip install django-qiniu-storage</code></li>\n<li>然后 <strong>settings.py</strong> 配置新增如下</li>\n</ul>\n<pre><code class=\"python\"># 七牛云配置\n\nQINIU_ACCESS_KEY = &#39;ACCESS_KEY&#39;\n# 七牛给开发者分配的AccessKey\nQINIU_SECRET_KEY = &#39;SECRET_KEY&#39;\n# 七牛给开发者分配的Secret\nQINIU_BUCKET_NAME = &#39;myblog&#39;  # 就是刚才新建的存储空间名称\n# 用来存放文件的七牛空间(bucket)的名字\nQINIU_BUCKET_DOMAIN = &#39;*****.bkt.clouddn.com/&#39;\n# 七牛空间(bucket)的域名，别遗漏了后面的/\nDEFAULT_FILE_STORAGE = &#39;qiniustorage.backends.QiniuStorage&#39;\n# 只用七牛托管动态生成的文件（例如用户上传的文件）\nQINIU_SECURE_URL = False\n# 使用http\n\nPREFIX_URL = &#39;http://&#39;\n# 文件系统更改\nMEDIA_URL = PREFIX_URL + QINIU_BUCKET_DOMAIN\nMEDIA_ROOT = &#39;media/&#39;\n</code></pre>\n<p><strong>QINIU_BUCKET_DOMAIN</strong> 的位置如下<br><img src=\"https://img-blog.csdnimg.cn/20191115113248223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>我的轮播图 <em>model</em> 如下</p>\n<pre><code class=\"python\">class Banner(BaseModel):\n    STATUS_NORMAL = 1\n    STATUS_DELETE = 0\n    STATUS_ITEMS = (\n        (STATUS_NORMAL, &#39;正常&#39;),\n        (STATUS_DELETE, &#39;删除&#39;),\n    )\n    &quot;&quot;&quot;\n    轮播图\n    &quot;&quot;&quot;\n    # upload_to 存储子目录，真实存放地址会使用配置中的MADIE_ROOT+upload_to\n    image = models.ImageField(upload_to=&#39;banner&#39;, verbose_name=&#39;轮播图&#39;, null=True,\n                              blank=True, help_text=&quot;轮播图片的大小规格：1920x720，或者对应的比例的图片&quot;)\n    name = models.CharField(max_length=150, verbose_name=&#39;轮播图名称&#39;)\n    desc = models.CharField(max_length=250, verbose_name=&#39;描述信息&#39;, help_text=&quot;请填写描述信息&quot;)\n    status = models.PositiveIntegerField(default=STATUS_NORMAL,\n                                         choices=STATUS_ITEMS, verbose_name=&#39;状态&#39;)\n    link = models.CharField(max_length=150, verbose_name=&#39;轮播图广告地址&#39;)\n\n    class Meta:\n        db_table = &#39;home_banner&#39;\n        verbose_name = &#39;轮播图&#39;\n        verbose_name_plural = verbose_name\n\n    def __str__(self):\n        return self.name\n</code></pre>\n<p>注意 <strong>image</strong> 这个字段，我设置了 <code>upload_to=&#39;banner&#39;</code> ，他就会保存到  <strong>MADIE_ROOT+’banner’</strong> 这个路径下，而 <strong>MADIE_ROOT</strong> 在配置中是 <code>MEDIA_URL = PREFIX_URL + QINIU_BUCKET_DOMAIN</code> ,也就是 <code>&#39;http://*****.bkt.clouddn.com/&#39;</code><br>于是我们的轮播图图片就会保存到类似这样的url下：<br><code>http://*****.bkt.clouddn.com/banner/20160923084104779_jAQ76Kw.jpg</code></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>基本操作就是这样了，因为网上有很多大佬已经踩过坑了，所以避免了不少麻烦。<strong>七牛云不止可以存储图片，也可以存储其他文件，CDN加速等等，以后有需要会补充上的。</strong></p>\n"},{"title":"django-allauth 阿里云发送邮件出现nginx 504解决方法","date":"2019-11-27T23:08:09.000Z","author":"Ginta","img":"http://img.ginta.top/huoying2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/huoying2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 前言\r\n在博客的认证中使用到了 `django-allauth` 模块进行用户注册登录，但是在注册环节配置邮箱系统的时候出了问题，搞了好几个小时终于解决了\r\n原来我的配置如下\r\n首先是github配置：\r\n```\r\nHomepage URL:\r\nhttp://ginta.top/\r\nAuthorization callback URL:\r\nhttp://ginta.top/accounts/github/login/callback/\r\n```\r\n\r\n这是`settings.py` *django-allauth* 配置\r\n```\r\n# django-allauth配置\r\nACCOUNT_EMAIL_VERIFICATION = 'mandatory' # 强制注册邮箱验证(注册成功后，会发送一封验证邮件，用户必须验证邮箱后，才能登陆)\r\nACCOUNT_AUTHENTICATION_METHOD = \"username_email\"     # 登录方式(选择用户名或者邮箱都能登录)\r\nACCOUNT_EMAIL_REQUIRED = True           # 设置用户注册的时候必须填写邮箱地址\r\nACCOUNT_LOGOUT_ON_GET = False           # 用户登出(需要确认)\r\n# smtp 服务器地址\r\nEMAIL_HOST = \"smtp.qq.com\"\r\n# 默认端口25，若请求超时可尝试465\r\nEMAIL_PORT = 25\r\n# 用户名\r\nEMAIL_HOST_USER = \".....@qq.com\"\r\n# 邮箱代理授权码（不是邮箱密码）\r\nEMAIL_HOST_PASSWORD = \"******\"\r\n\r\n# 发送人\r\nEMAIL_FROM = \".....@qq.com\" #\r\n# 默认显示的发送人，（邮箱地址必须与发送人一致），不设置的话django默认使用的webmaster@localhost\r\nDEFAULT_FROM_EMAIL = \".....@qq.com\"\r\n```\r\n\r\n线下测试的时候没有问题，邮件也能发送，但是发布到阿里云上就是不行，一直出现邮件超时，也就是 *nginx 504* 的情况，网上有说把 *nginx* 超时时间改一下，我没尝试，一方面是因为默认已经是一分钟了，用户哪能等那么久，另一个是看到有说 **25端口** 在阿里云默认是关闭的，总之要进行一系列操作什么的，好在还可以用465端口，**但是只把25端口改成465端口还是出现超时状态！！** ，后来有看到有加上一句 `EMAIL_USE_SSL = True`，于是试了一下，解决了。最后附上完整配置, *github* 配置不变，只改 *settings.py* 就好 ：\r\n\r\n```\r\n# django-allauth配置\r\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # 强制注册邮箱验证(注册成功后，会发送一封验证邮件，用户必须验证邮箱后，才能登陆)\r\nACCOUNT_AUTHENTICATION_METHOD = \"username_email\"     # 登录方式(选择用户名或者邮箱都能登录)\r\nACCOUNT_EMAIL_REQUIRED = True           # 设置用户注册的时候必须填写邮箱地址\r\nACCOUNT_LOGOUT_ON_GET = False  # 用户登出(需要确认)\r\nSOCIALACCOUNT_EMAIL_VERIFICATION = 'mandatory'\r\n# smtp 服务器地址\r\nEMAIL_HOST = \"smtp.qq.com\"\r\n# 默认端口25，若请求超时可尝试465\r\nEMAIL_PORT = 465\r\nEMAIL_USE_SSL = True\r\n# 用户名\r\nEMAIL_HOST_USER = \"***@qq.com\"\r\n# 邮箱代理授权码（不是邮箱密码）\r\nEMAIL_HOST_PASSWORD = \"****\"\r\n# 发送人\r\nEMAIL_FROM = \"***@qq.com\" #\r\n# 默认显示的发送人，（邮箱地址必须与发送人一致），不设置的话django默认使用的webmaster@localhost\r\nDEFAULT_FROM_EMAIL = \"***@qq.com\"\r\n```","source":"_posts/django-allauth 阿里云发送邮件出现nginx 504解决方法.md","raw":"---\ntitle: django-allauth 阿里云发送邮件出现nginx 504解决方法\ndate: 2019-11-28 07:08:09\nauthor: Ginta\nimg: http://img.ginta.top/huoying2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/huoying2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - Django\n  - 邮件\ncategories: Django\n---\n## 前言\r\n在博客的认证中使用到了 `django-allauth` 模块进行用户注册登录，但是在注册环节配置邮箱系统的时候出了问题，搞了好几个小时终于解决了\r\n原来我的配置如下\r\n首先是github配置：\r\n```\r\nHomepage URL:\r\nhttp://ginta.top/\r\nAuthorization callback URL:\r\nhttp://ginta.top/accounts/github/login/callback/\r\n```\r\n\r\n这是`settings.py` *django-allauth* 配置\r\n```\r\n# django-allauth配置\r\nACCOUNT_EMAIL_VERIFICATION = 'mandatory' # 强制注册邮箱验证(注册成功后，会发送一封验证邮件，用户必须验证邮箱后，才能登陆)\r\nACCOUNT_AUTHENTICATION_METHOD = \"username_email\"     # 登录方式(选择用户名或者邮箱都能登录)\r\nACCOUNT_EMAIL_REQUIRED = True           # 设置用户注册的时候必须填写邮箱地址\r\nACCOUNT_LOGOUT_ON_GET = False           # 用户登出(需要确认)\r\n# smtp 服务器地址\r\nEMAIL_HOST = \"smtp.qq.com\"\r\n# 默认端口25，若请求超时可尝试465\r\nEMAIL_PORT = 25\r\n# 用户名\r\nEMAIL_HOST_USER = \".....@qq.com\"\r\n# 邮箱代理授权码（不是邮箱密码）\r\nEMAIL_HOST_PASSWORD = \"******\"\r\n\r\n# 发送人\r\nEMAIL_FROM = \".....@qq.com\" #\r\n# 默认显示的发送人，（邮箱地址必须与发送人一致），不设置的话django默认使用的webmaster@localhost\r\nDEFAULT_FROM_EMAIL = \".....@qq.com\"\r\n```\r\n\r\n线下测试的时候没有问题，邮件也能发送，但是发布到阿里云上就是不行，一直出现邮件超时，也就是 *nginx 504* 的情况，网上有说把 *nginx* 超时时间改一下，我没尝试，一方面是因为默认已经是一分钟了，用户哪能等那么久，另一个是看到有说 **25端口** 在阿里云默认是关闭的，总之要进行一系列操作什么的，好在还可以用465端口，**但是只把25端口改成465端口还是出现超时状态！！** ，后来有看到有加上一句 `EMAIL_USE_SSL = True`，于是试了一下，解决了。最后附上完整配置, *github* 配置不变，只改 *settings.py* 就好 ：\r\n\r\n```\r\n# django-allauth配置\r\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # 强制注册邮箱验证(注册成功后，会发送一封验证邮件，用户必须验证邮箱后，才能登陆)\r\nACCOUNT_AUTHENTICATION_METHOD = \"username_email\"     # 登录方式(选择用户名或者邮箱都能登录)\r\nACCOUNT_EMAIL_REQUIRED = True           # 设置用户注册的时候必须填写邮箱地址\r\nACCOUNT_LOGOUT_ON_GET = False  # 用户登出(需要确认)\r\nSOCIALACCOUNT_EMAIL_VERIFICATION = 'mandatory'\r\n# smtp 服务器地址\r\nEMAIL_HOST = \"smtp.qq.com\"\r\n# 默认端口25，若请求超时可尝试465\r\nEMAIL_PORT = 465\r\nEMAIL_USE_SSL = True\r\n# 用户名\r\nEMAIL_HOST_USER = \"***@qq.com\"\r\n# 邮箱代理授权码（不是邮箱密码）\r\nEMAIL_HOST_PASSWORD = \"****\"\r\n# 发送人\r\nEMAIL_FROM = \"***@qq.com\" #\r\n# 默认显示的发送人，（邮箱地址必须与发送人一致），不设置的话django默认使用的webmaster@localhost\r\nDEFAULT_FROM_EMAIL = \"***@qq.com\"\r\n```","slug":"django-allauth 阿里云发送邮件出现nginx 504解决方法","published":1,"updated":"2022-08-11T12:49:48.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p61811002atkscgcst4ed9","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在博客的认证中使用到了 <code>django-allauth</code> 模块进行用户注册登录，但是在注册环节配置邮箱系统的时候出了问题，搞了好几个小时终于解决了<br>原来我的配置如下<br>首先是github配置：</p>\n<pre><code>Homepage URL:\nhttp://ginta.top/\nAuthorization callback URL:\nhttp://ginta.top/accounts/github/login/callback/\n</code></pre>\n<p>这是<code>settings.py</code> <em>django-allauth</em> 配置</p>\n<pre><code># django-allauth配置\nACCOUNT_EMAIL_VERIFICATION = &#39;mandatory&#39; # 强制注册邮箱验证(注册成功后，会发送一封验证邮件，用户必须验证邮箱后，才能登陆)\nACCOUNT_AUTHENTICATION_METHOD = &quot;username_email&quot;     # 登录方式(选择用户名或者邮箱都能登录)\nACCOUNT_EMAIL_REQUIRED = True           # 设置用户注册的时候必须填写邮箱地址\nACCOUNT_LOGOUT_ON_GET = False           # 用户登出(需要确认)\n# smtp 服务器地址\nEMAIL_HOST = &quot;smtp.qq.com&quot;\n# 默认端口25，若请求超时可尝试465\nEMAIL_PORT = 25\n# 用户名\nEMAIL_HOST_USER = &quot;.....@qq.com&quot;\n# 邮箱代理授权码（不是邮箱密码）\nEMAIL_HOST_PASSWORD = &quot;******&quot;\n\n# 发送人\nEMAIL_FROM = &quot;.....@qq.com&quot; #\n# 默认显示的发送人，（邮箱地址必须与发送人一致），不设置的话django默认使用的webmaster@localhost\nDEFAULT_FROM_EMAIL = &quot;.....@qq.com&quot;\n</code></pre>\n<p>线下测试的时候没有问题，邮件也能发送，但是发布到阿里云上就是不行，一直出现邮件超时，也就是 <em>nginx 504</em> 的情况，网上有说把 <em>nginx</em> 超时时间改一下，我没尝试，一方面是因为默认已经是一分钟了，用户哪能等那么久，另一个是看到有说 <strong>25端口</strong> 在阿里云默认是关闭的，总之要进行一系列操作什么的，好在还可以用465端口，<strong>但是只把25端口改成465端口还是出现超时状态！！</strong> ，后来有看到有加上一句 <code>EMAIL_USE_SSL = True</code>，于是试了一下，解决了。最后附上完整配置, <em>github</em> 配置不变，只改 <em>settings.py</em> 就好 ：</p>\n<pre><code># django-allauth配置\nACCOUNT_EMAIL_VERIFICATION = &#39;mandatory&#39;  # 强制注册邮箱验证(注册成功后，会发送一封验证邮件，用户必须验证邮箱后，才能登陆)\nACCOUNT_AUTHENTICATION_METHOD = &quot;username_email&quot;     # 登录方式(选择用户名或者邮箱都能登录)\nACCOUNT_EMAIL_REQUIRED = True           # 设置用户注册的时候必须填写邮箱地址\nACCOUNT_LOGOUT_ON_GET = False  # 用户登出(需要确认)\nSOCIALACCOUNT_EMAIL_VERIFICATION = &#39;mandatory&#39;\n# smtp 服务器地址\nEMAIL_HOST = &quot;smtp.qq.com&quot;\n# 默认端口25，若请求超时可尝试465\nEMAIL_PORT = 465\nEMAIL_USE_SSL = True\n# 用户名\nEMAIL_HOST_USER = &quot;***@qq.com&quot;\n# 邮箱代理授权码（不是邮箱密码）\nEMAIL_HOST_PASSWORD = &quot;****&quot;\n# 发送人\nEMAIL_FROM = &quot;***@qq.com&quot; #\n# 默认显示的发送人，（邮箱地址必须与发送人一致），不设置的话django默认使用的webmaster@localhost\nDEFAULT_FROM_EMAIL = &quot;***@qq.com&quot;\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在博客的认证中使用到了 <code>django-allauth</code> 模块进行用户注册登录，但是在注册环节配置邮箱系统的时候出了问题，搞了好几个小时终于解决了<br>原来我的配置如下<br>首先是github配置：</p>\n<pre><code>Homepage URL:\nhttp://ginta.top/\nAuthorization callback URL:\nhttp://ginta.top/accounts/github/login/callback/\n</code></pre>\n<p>这是<code>settings.py</code> <em>django-allauth</em> 配置</p>\n<pre><code># django-allauth配置\nACCOUNT_EMAIL_VERIFICATION = &#39;mandatory&#39; # 强制注册邮箱验证(注册成功后，会发送一封验证邮件，用户必须验证邮箱后，才能登陆)\nACCOUNT_AUTHENTICATION_METHOD = &quot;username_email&quot;     # 登录方式(选择用户名或者邮箱都能登录)\nACCOUNT_EMAIL_REQUIRED = True           # 设置用户注册的时候必须填写邮箱地址\nACCOUNT_LOGOUT_ON_GET = False           # 用户登出(需要确认)\n# smtp 服务器地址\nEMAIL_HOST = &quot;smtp.qq.com&quot;\n# 默认端口25，若请求超时可尝试465\nEMAIL_PORT = 25\n# 用户名\nEMAIL_HOST_USER = &quot;.....@qq.com&quot;\n# 邮箱代理授权码（不是邮箱密码）\nEMAIL_HOST_PASSWORD = &quot;******&quot;\n\n# 发送人\nEMAIL_FROM = &quot;.....@qq.com&quot; #\n# 默认显示的发送人，（邮箱地址必须与发送人一致），不设置的话django默认使用的webmaster@localhost\nDEFAULT_FROM_EMAIL = &quot;.....@qq.com&quot;\n</code></pre>\n<p>线下测试的时候没有问题，邮件也能发送，但是发布到阿里云上就是不行，一直出现邮件超时，也就是 <em>nginx 504</em> 的情况，网上有说把 <em>nginx</em> 超时时间改一下，我没尝试，一方面是因为默认已经是一分钟了，用户哪能等那么久，另一个是看到有说 <strong>25端口</strong> 在阿里云默认是关闭的，总之要进行一系列操作什么的，好在还可以用465端口，<strong>但是只把25端口改成465端口还是出现超时状态！！</strong> ，后来有看到有加上一句 <code>EMAIL_USE_SSL = True</code>，于是试了一下，解决了。最后附上完整配置, <em>github</em> 配置不变，只改 <em>settings.py</em> 就好 ：</p>\n<pre><code># django-allauth配置\nACCOUNT_EMAIL_VERIFICATION = &#39;mandatory&#39;  # 强制注册邮箱验证(注册成功后，会发送一封验证邮件，用户必须验证邮箱后，才能登陆)\nACCOUNT_AUTHENTICATION_METHOD = &quot;username_email&quot;     # 登录方式(选择用户名或者邮箱都能登录)\nACCOUNT_EMAIL_REQUIRED = True           # 设置用户注册的时候必须填写邮箱地址\nACCOUNT_LOGOUT_ON_GET = False  # 用户登出(需要确认)\nSOCIALACCOUNT_EMAIL_VERIFICATION = &#39;mandatory&#39;\n# smtp 服务器地址\nEMAIL_HOST = &quot;smtp.qq.com&quot;\n# 默认端口25，若请求超时可尝试465\nEMAIL_PORT = 465\nEMAIL_USE_SSL = True\n# 用户名\nEMAIL_HOST_USER = &quot;***@qq.com&quot;\n# 邮箱代理授权码（不是邮箱密码）\nEMAIL_HOST_PASSWORD = &quot;****&quot;\n# 发送人\nEMAIL_FROM = &quot;***@qq.com&quot; #\n# 默认显示的发送人，（邮箱地址必须与发送人一致），不设置的话django默认使用的webmaster@localhost\nDEFAULT_FROM_EMAIL = &quot;***@qq.com&quot;\n</code></pre>\n"},{"title":"django3 choices 新特性","date":"2019-12-03T19:43:14.000Z","author":"Ginta","img":"http://img.ginta.top/chaoshou1.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/chaoshou1.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 前言\r\n等了好久的 **Django3** 正式版本终于发布了！在看官方文档的时候看到有这么一句\r\n>\r\nCustom enumeration types TextChoices, IntegerChoices, and Choices are now available as a way to define Field.choices. TextChoices and IntegerChoices types are provided for text and integer fields\r\n\r\n具体是什么意思呢，解释起来比较麻烦，还是上代码比较清晰：\r\n```\r\nfrom django.db import models\r\n\r\n# Create your models here.\r\n\r\nclass Student(models.Model):\r\n\r\n    class Gender(models.IntegerChoices):\r\n        MALE = 1\r\n        FEMALE = 2\r\n\r\n    gender = models.IntegerField(choices=Gender.choices)\r\n```\r\n这里新建了一个学生模型，里面只有一个性别字段。如果是以前的写法应该是这样：\r\n```\r\nfrom django.db import models\r\n\r\n# Create your models here.\r\n\r\nclass Student(models.Model):\r\n\r\n    gender_choices = (\r\n        (1, '男'),\r\n        (2, '女'),\r\n    )\r\n    gender = models.IntegerField(choices=gender_choices)\r\n```\r\n直接看起来好像并没有方便多少，只是在内部新建了一个类而已，确实如此，不过还是有区别的，比如这里我们要求字段的值是 **整数** ，新的写法会自动进行类型检查：\r\n```\r\nclass Student(models.Model):\r\n\r\n    class Gender(models.IntegerChoices):\r\n        MALE = \"ga\", gettext_lazy('男')\r\n        FEMALE = 2, gettext_lazy('女')\r\n\r\n    gender = models.IntegerField(choices=Gender.choices)\r\n```\r\n如果我们这样写，**MALE** 的值改为 \"ga\"，在执行 `python manage.py makemigrations` 的时候会抛出以下错误：\r\n>\r\nValueError: invalid literal for int() with base 10: 'ga'\r\n\r\n如果是以前的代码则不会报错。\r\n\r\n\r\n![](http://img.ginta.top/markdownx/2019/12/02/2623de9b-3a47-4bca-bed4-3329a738c558.png)\r\n这是后台显示，如果想显示中文也是可以的，把代码改成如下\r\n```\r\nfrom django.db import models\r\nfrom django.utils.translation import gettext_lazy\r\n\r\n# Create your models here.\r\n\r\n\r\nclass Student(models.Model):\r\n\r\n    class Gender(models.IntegerChoices):\r\n        MALE = 1, gettext_lazy('男')\r\n        FEMALE = 2, gettext_lazy('女')\r\n\r\n    gender = models.IntegerField(choices=Gender.choices)\r\n\r\n```\r\n\r\n\r\n\r\n![](http://img.ginta.top/markdownx/2019/12/02/dfa2606d-27a6-4463-822a-8b21fec49121.png)\r\n\r\n这就是效果了。如果是要求值是字符串，同理，只不过继承的类就不是 **models.IntegerChoices** ， 而是 **models.TextChoices** 。","source":"_posts/django3 choices 新特性.md","raw":"---\ntitle: django3 choices 新特性\ndate: 2019-12-04 03:43:14\nauthor: Ginta\nimg: http://img.ginta.top/chaoshou1.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/chaoshou1.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - django3\ncategories: Django\n---\n## 前言\r\n等了好久的 **Django3** 正式版本终于发布了！在看官方文档的时候看到有这么一句\r\n>\r\nCustom enumeration types TextChoices, IntegerChoices, and Choices are now available as a way to define Field.choices. TextChoices and IntegerChoices types are provided for text and integer fields\r\n\r\n具体是什么意思呢，解释起来比较麻烦，还是上代码比较清晰：\r\n```\r\nfrom django.db import models\r\n\r\n# Create your models here.\r\n\r\nclass Student(models.Model):\r\n\r\n    class Gender(models.IntegerChoices):\r\n        MALE = 1\r\n        FEMALE = 2\r\n\r\n    gender = models.IntegerField(choices=Gender.choices)\r\n```\r\n这里新建了一个学生模型，里面只有一个性别字段。如果是以前的写法应该是这样：\r\n```\r\nfrom django.db import models\r\n\r\n# Create your models here.\r\n\r\nclass Student(models.Model):\r\n\r\n    gender_choices = (\r\n        (1, '男'),\r\n        (2, '女'),\r\n    )\r\n    gender = models.IntegerField(choices=gender_choices)\r\n```\r\n直接看起来好像并没有方便多少，只是在内部新建了一个类而已，确实如此，不过还是有区别的，比如这里我们要求字段的值是 **整数** ，新的写法会自动进行类型检查：\r\n```\r\nclass Student(models.Model):\r\n\r\n    class Gender(models.IntegerChoices):\r\n        MALE = \"ga\", gettext_lazy('男')\r\n        FEMALE = 2, gettext_lazy('女')\r\n\r\n    gender = models.IntegerField(choices=Gender.choices)\r\n```\r\n如果我们这样写，**MALE** 的值改为 \"ga\"，在执行 `python manage.py makemigrations` 的时候会抛出以下错误：\r\n>\r\nValueError: invalid literal for int() with base 10: 'ga'\r\n\r\n如果是以前的代码则不会报错。\r\n\r\n\r\n![](http://img.ginta.top/markdownx/2019/12/02/2623de9b-3a47-4bca-bed4-3329a738c558.png)\r\n这是后台显示，如果想显示中文也是可以的，把代码改成如下\r\n```\r\nfrom django.db import models\r\nfrom django.utils.translation import gettext_lazy\r\n\r\n# Create your models here.\r\n\r\n\r\nclass Student(models.Model):\r\n\r\n    class Gender(models.IntegerChoices):\r\n        MALE = 1, gettext_lazy('男')\r\n        FEMALE = 2, gettext_lazy('女')\r\n\r\n    gender = models.IntegerField(choices=Gender.choices)\r\n\r\n```\r\n\r\n\r\n\r\n![](http://img.ginta.top/markdownx/2019/12/02/dfa2606d-27a6-4463-822a-8b21fec49121.png)\r\n\r\n这就是效果了。如果是要求值是字符串，同理，只不过继承的类就不是 **models.IntegerChoices** ， 而是 **models.TextChoices** 。","slug":"django3 choices 新特性","published":1,"updated":"2022-08-11T12:49:48.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p61811002etksc8diu8n26","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>等了好久的 <strong>Django3</strong> 正式版本终于发布了！在看官方文档的时候看到有这么一句</p>\n<blockquote>\n</blockquote>\n<p>Custom enumeration types TextChoices, IntegerChoices, and Choices are now available as a way to define Field.choices. TextChoices and IntegerChoices types are provided for text and integer fields</p>\n<p>具体是什么意思呢，解释起来比较麻烦，还是上代码比较清晰：</p>\n<pre><code>from django.db import models\n\n# Create your models here.\n\nclass Student(models.Model):\n\n    class Gender(models.IntegerChoices):\n        MALE = 1\n        FEMALE = 2\n\n    gender = models.IntegerField(choices=Gender.choices)\n</code></pre>\n<p>这里新建了一个学生模型，里面只有一个性别字段。如果是以前的写法应该是这样：</p>\n<pre><code>from django.db import models\n\n# Create your models here.\n\nclass Student(models.Model):\n\n    gender_choices = (\n        (1, &#39;男&#39;),\n        (2, &#39;女&#39;),\n    )\n    gender = models.IntegerField(choices=gender_choices)\n</code></pre>\n<p>直接看起来好像并没有方便多少，只是在内部新建了一个类而已，确实如此，不过还是有区别的，比如这里我们要求字段的值是 <strong>整数</strong> ，新的写法会自动进行类型检查：</p>\n<pre><code>class Student(models.Model):\n\n    class Gender(models.IntegerChoices):\n        MALE = &quot;ga&quot;, gettext_lazy(&#39;男&#39;)\n        FEMALE = 2, gettext_lazy(&#39;女&#39;)\n\n    gender = models.IntegerField(choices=Gender.choices)\n</code></pre>\n<p>如果我们这样写，<strong>MALE</strong> 的值改为 “ga”，在执行 <code>python manage.py makemigrations</code> 的时候会抛出以下错误：</p>\n<blockquote>\n</blockquote>\n<p>ValueError: invalid literal for int() with base 10: ‘ga’</p>\n<p>如果是以前的代码则不会报错。</p>\n<p><img src=\"http://img.ginta.top/markdownx/2019/12/02/2623de9b-3a47-4bca-bed4-3329a738c558.png\"><br>这是后台显示，如果想显示中文也是可以的，把代码改成如下</p>\n<pre><code>from django.db import models\nfrom django.utils.translation import gettext_lazy\n\n# Create your models here.\n\n\nclass Student(models.Model):\n\n    class Gender(models.IntegerChoices):\n        MALE = 1, gettext_lazy(&#39;男&#39;)\n        FEMALE = 2, gettext_lazy(&#39;女&#39;)\n\n    gender = models.IntegerField(choices=Gender.choices)\n</code></pre>\n<p><img src=\"http://img.ginta.top/markdownx/2019/12/02/dfa2606d-27a6-4463-822a-8b21fec49121.png\"></p>\n<p>这就是效果了。如果是要求值是字符串，同理，只不过继承的类就不是 <strong>models.IntegerChoices</strong> ， 而是 <strong>models.TextChoices</strong> 。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>等了好久的 <strong>Django3</strong> 正式版本终于发布了！在看官方文档的时候看到有这么一句</p>\n<blockquote>\n</blockquote>\n<p>Custom enumeration types TextChoices, IntegerChoices, and Choices are now available as a way to define Field.choices. TextChoices and IntegerChoices types are provided for text and integer fields</p>\n<p>具体是什么意思呢，解释起来比较麻烦，还是上代码比较清晰：</p>\n<pre><code>from django.db import models\n\n# Create your models here.\n\nclass Student(models.Model):\n\n    class Gender(models.IntegerChoices):\n        MALE = 1\n        FEMALE = 2\n\n    gender = models.IntegerField(choices=Gender.choices)\n</code></pre>\n<p>这里新建了一个学生模型，里面只有一个性别字段。如果是以前的写法应该是这样：</p>\n<pre><code>from django.db import models\n\n# Create your models here.\n\nclass Student(models.Model):\n\n    gender_choices = (\n        (1, &#39;男&#39;),\n        (2, &#39;女&#39;),\n    )\n    gender = models.IntegerField(choices=gender_choices)\n</code></pre>\n<p>直接看起来好像并没有方便多少，只是在内部新建了一个类而已，确实如此，不过还是有区别的，比如这里我们要求字段的值是 <strong>整数</strong> ，新的写法会自动进行类型检查：</p>\n<pre><code>class Student(models.Model):\n\n    class Gender(models.IntegerChoices):\n        MALE = &quot;ga&quot;, gettext_lazy(&#39;男&#39;)\n        FEMALE = 2, gettext_lazy(&#39;女&#39;)\n\n    gender = models.IntegerField(choices=Gender.choices)\n</code></pre>\n<p>如果我们这样写，<strong>MALE</strong> 的值改为 “ga”，在执行 <code>python manage.py makemigrations</code> 的时候会抛出以下错误：</p>\n<blockquote>\n</blockquote>\n<p>ValueError: invalid literal for int() with base 10: ‘ga’</p>\n<p>如果是以前的代码则不会报错。</p>\n<p><img src=\"http://img.ginta.top/markdownx/2019/12/02/2623de9b-3a47-4bca-bed4-3329a738c558.png\"><br>这是后台显示，如果想显示中文也是可以的，把代码改成如下</p>\n<pre><code>from django.db import models\nfrom django.utils.translation import gettext_lazy\n\n# Create your models here.\n\n\nclass Student(models.Model):\n\n    class Gender(models.IntegerChoices):\n        MALE = 1, gettext_lazy(&#39;男&#39;)\n        FEMALE = 2, gettext_lazy(&#39;女&#39;)\n\n    gender = models.IntegerField(choices=Gender.choices)\n</code></pre>\n<p><img src=\"http://img.ginta.top/markdownx/2019/12/02/dfa2606d-27a6-4463-822a-8b21fec49121.png\"></p>\n<p>这就是效果了。如果是要求值是字符串，同理，只不过继承的类就不是 <strong>models.IntegerChoices</strong> ， 而是 <strong>models.TextChoices</strong> 。</p>\n"},{"title":"docker pull更换源","date":"2020-08-30T06:29:59.000Z","author":"Ginta","img":"http://img.ginta.top/chaoshou2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/chaoshou2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 前言\r\n每次使用docker pull的时候总是要等待很久，在不翻墙的情况下建议使用国内的源\r\n\r\n## 步骤\r\n1. 在 /etc/docker/daemon.json 文件中添加以下参数（没有该文件则新建）：\r\n```\r\n{\r\n  \"registry-mirrors\": [\"https://9cpn8tt6.mirror.aliyuncs.com\"]\r\n}\r\n```\r\n2. 服务重启\r\n```\r\nsystemctl daemon-reload\r\nsystemctl restart docker\r\n```","source":"_posts/docker pull更换源.md","raw":"---\ntitle: docker pull更换源\ndate: 2020-08-30 14:29:59\nauthor: Ginta\nimg: http://img.ginta.top/chaoshou2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/chaoshou2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - docker\ncategories: docker\n---\n## 前言\r\n每次使用docker pull的时候总是要等待很久，在不翻墙的情况下建议使用国内的源\r\n\r\n## 步骤\r\n1. 在 /etc/docker/daemon.json 文件中添加以下参数（没有该文件则新建）：\r\n```\r\n{\r\n  \"registry-mirrors\": [\"https://9cpn8tt6.mirror.aliyuncs.com\"]\r\n}\r\n```\r\n2. 服务重启\r\n```\r\nsystemctl daemon-reload\r\nsystemctl restart docker\r\n```","slug":"docker pull更换源","published":1,"updated":"2022-08-11T12:49:48.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p61811002itksc0y3cg2f5","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>每次使用docker pull的时候总是要等待很久，在不翻墙的情况下建议使用国内的源</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ol>\n<li>在 &#x2F;etc&#x2F;docker&#x2F;daemon.json 文件中添加以下参数（没有该文件则新建）：</li>\n</ol>\n<pre><code>&#123;\n  &quot;registry-mirrors&quot;: [&quot;https://9cpn8tt6.mirror.aliyuncs.com&quot;]\n&#125;\n</code></pre>\n<ol start=\"2\">\n<li>服务重启</li>\n</ol>\n<pre><code>systemctl daemon-reload\nsystemctl restart docker\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>每次使用docker pull的时候总是要等待很久，在不翻墙的情况下建议使用国内的源</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ol>\n<li>在 &#x2F;etc&#x2F;docker&#x2F;daemon.json 文件中添加以下参数（没有该文件则新建）：</li>\n</ol>\n<pre><code>&#123;\n  &quot;registry-mirrors&quot;: [&quot;https://9cpn8tt6.mirror.aliyuncs.com&quot;]\n&#125;\n</code></pre>\n<ol start=\"2\">\n<li>服务重启</li>\n</ol>\n<pre><code>systemctl daemon-reload\nsystemctl restart docker\n</code></pre>\n"},{"title":"do things matters","date":"2021-10-05T08:22:20.000Z","author":"Ginta","img":"https://img.ginta.top/dragon3.jpg","top":false,"hide":false,"cover":false,"coverImg":"https://img.ginta.top/dragon3.jpg","toc":false,"mathjax":false,"summary":null,"_content":"最近在网上看到这么一句话，“do things matters”，后面的解释触发了共鸣：\n\n>这不仅意味着努力去核心岗位做重要的事情，还意味着每一件事都会因为是我做的，而 ‘matters’.\n\n\n\n### 英雄联盟\n\n很多年前玩这个游戏的目的只有一个，上分。随着这款风靡全球的游戏流行，更多的玩家会选择在周末去网吧和朋友放飞自我，即使家用电脑已经普及，去网吧只是为了体验一种氛围。游戏机制导致天梯最多可以双人一起，因而大部分玩家更倾向于可以5人一起的匹配模式。同学几个人一起开黑的时候，我选择了单人Rank，而且选择相对较难的位置。室友曾经调侃：“你看我们大家一起玩多有意思，这游戏对于你来说简直就是孤儿游戏！”\n\n每个人对游戏都有自己的理解，诚然游戏于大部分人来说只是一种释放压力的途径，我也一样，只是挑战更高难度对我来说也是十分重要的。\n\n### 个体经济\n\n周末偶尔和朋友出门约饭，酒过三巡之后总要讨论一些时髦话题，比如哪个明星又怎样了，哪个国家政府被赶下去了，比特币最近又在作妖了......，不过此类话题基本都是几句带过，因为明星太过遥远，而币价也非我等韭菜可以操控的。最终个体经济这类话题占了上风，也往往会讨论很长时间，比如周边哪位同学的家里又帮忙购置不动产了，哪个亲戚又出国了。\n\n对于家庭对个人的经济影响我始终保留自己的意见，天下家庭何其多，富甲终是少数，纵使家里没有条件给予更多的支持，亦或是可以包揽一切，由于着更多是上一辈人的结果，也就不会有更多的感触了。\n\n### do things matters\n\n维护一个开源项目，需要经常回答群里的问题，有人问过我：“为什么喜欢做开源”。\n\n开源的话可以和很多用户沟通，他们会给出很多有趣的想法，有些建议是很有价值的，即使代码没有优化，修改之后产品本身对于用户也会更加友好。\n\n不只是开源，即使是内部项目自己也是更希望能选择更有挑战性，反馈更多的项目去尝试，如果简单的事情太多了，也会和leader申请更具挑战的项目。\n\n又回到开头的那句话了，“do things matters”。\n\n","source":"_posts/do things matters.md","raw":"---\ntitle: do things matters\ndate: 2021-10-05 16:22:20\nauthor: Ginta\nimg: https://img.ginta.top/dragon3.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: https://img.ginta.top/dragon3.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - 生活\ncategories: 生活\n---\n最近在网上看到这么一句话，“do things matters”，后面的解释触发了共鸣：\n\n>这不仅意味着努力去核心岗位做重要的事情，还意味着每一件事都会因为是我做的，而 ‘matters’.\n\n\n\n### 英雄联盟\n\n很多年前玩这个游戏的目的只有一个，上分。随着这款风靡全球的游戏流行，更多的玩家会选择在周末去网吧和朋友放飞自我，即使家用电脑已经普及，去网吧只是为了体验一种氛围。游戏机制导致天梯最多可以双人一起，因而大部分玩家更倾向于可以5人一起的匹配模式。同学几个人一起开黑的时候，我选择了单人Rank，而且选择相对较难的位置。室友曾经调侃：“你看我们大家一起玩多有意思，这游戏对于你来说简直就是孤儿游戏！”\n\n每个人对游戏都有自己的理解，诚然游戏于大部分人来说只是一种释放压力的途径，我也一样，只是挑战更高难度对我来说也是十分重要的。\n\n### 个体经济\n\n周末偶尔和朋友出门约饭，酒过三巡之后总要讨论一些时髦话题，比如哪个明星又怎样了，哪个国家政府被赶下去了，比特币最近又在作妖了......，不过此类话题基本都是几句带过，因为明星太过遥远，而币价也非我等韭菜可以操控的。最终个体经济这类话题占了上风，也往往会讨论很长时间，比如周边哪位同学的家里又帮忙购置不动产了，哪个亲戚又出国了。\n\n对于家庭对个人的经济影响我始终保留自己的意见，天下家庭何其多，富甲终是少数，纵使家里没有条件给予更多的支持，亦或是可以包揽一切，由于着更多是上一辈人的结果，也就不会有更多的感触了。\n\n### do things matters\n\n维护一个开源项目，需要经常回答群里的问题，有人问过我：“为什么喜欢做开源”。\n\n开源的话可以和很多用户沟通，他们会给出很多有趣的想法，有些建议是很有价值的，即使代码没有优化，修改之后产品本身对于用户也会更加友好。\n\n不只是开源，即使是内部项目自己也是更希望能选择更有挑战性，反馈更多的项目去尝试，如果简单的事情太多了，也会和leader申请更具挑战的项目。\n\n又回到开头的那句话了，“do things matters”。\n\n","slug":"do things matters","published":1,"updated":"2022-08-11T12:49:48.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p61812002mtkscdsh8fo04","content":"<p>最近在网上看到这么一句话，“do things matters”，后面的解释触发了共鸣：</p>\n<blockquote>\n<p>这不仅意味着努力去核心岗位做重要的事情，还意味着每一件事都会因为是我做的，而 ‘matters’.</p>\n</blockquote>\n<h3 id=\"英雄联盟\"><a href=\"#英雄联盟\" class=\"headerlink\" title=\"英雄联盟\"></a>英雄联盟</h3><p>很多年前玩这个游戏的目的只有一个，上分。随着这款风靡全球的游戏流行，更多的玩家会选择在周末去网吧和朋友放飞自我，即使家用电脑已经普及，去网吧只是为了体验一种氛围。游戏机制导致天梯最多可以双人一起，因而大部分玩家更倾向于可以5人一起的匹配模式。同学几个人一起开黑的时候，我选择了单人Rank，而且选择相对较难的位置。室友曾经调侃：“你看我们大家一起玩多有意思，这游戏对于你来说简直就是孤儿游戏！”</p>\n<p>每个人对游戏都有自己的理解，诚然游戏于大部分人来说只是一种释放压力的途径，我也一样，只是挑战更高难度对我来说也是十分重要的。</p>\n<h3 id=\"个体经济\"><a href=\"#个体经济\" class=\"headerlink\" title=\"个体经济\"></a>个体经济</h3><p>周末偶尔和朋友出门约饭，酒过三巡之后总要讨论一些时髦话题，比如哪个明星又怎样了，哪个国家政府被赶下去了，比特币最近又在作妖了……，不过此类话题基本都是几句带过，因为明星太过遥远，而币价也非我等韭菜可以操控的。最终个体经济这类话题占了上风，也往往会讨论很长时间，比如周边哪位同学的家里又帮忙购置不动产了，哪个亲戚又出国了。</p>\n<p>对于家庭对个人的经济影响我始终保留自己的意见，天下家庭何其多，富甲终是少数，纵使家里没有条件给予更多的支持，亦或是可以包揽一切，由于着更多是上一辈人的结果，也就不会有更多的感触了。</p>\n<h3 id=\"do-things-matters\"><a href=\"#do-things-matters\" class=\"headerlink\" title=\"do things matters\"></a>do things matters</h3><p>维护一个开源项目，需要经常回答群里的问题，有人问过我：“为什么喜欢做开源”。</p>\n<p>开源的话可以和很多用户沟通，他们会给出很多有趣的想法，有些建议是很有价值的，即使代码没有优化，修改之后产品本身对于用户也会更加友好。</p>\n<p>不只是开源，即使是内部项目自己也是更希望能选择更有挑战性，反馈更多的项目去尝试，如果简单的事情太多了，也会和leader申请更具挑战的项目。</p>\n<p>又回到开头的那句话了，“do things matters”。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<p>最近在网上看到这么一句话，“do things matters”，后面的解释触发了共鸣：</p>\n<blockquote>\n<p>这不仅意味着努力去核心岗位做重要的事情，还意味着每一件事都会因为是我做的，而 ‘matters’.</p>\n</blockquote>\n<h3 id=\"英雄联盟\"><a href=\"#英雄联盟\" class=\"headerlink\" title=\"英雄联盟\"></a>英雄联盟</h3><p>很多年前玩这个游戏的目的只有一个，上分。随着这款风靡全球的游戏流行，更多的玩家会选择在周末去网吧和朋友放飞自我，即使家用电脑已经普及，去网吧只是为了体验一种氛围。游戏机制导致天梯最多可以双人一起，因而大部分玩家更倾向于可以5人一起的匹配模式。同学几个人一起开黑的时候，我选择了单人Rank，而且选择相对较难的位置。室友曾经调侃：“你看我们大家一起玩多有意思，这游戏对于你来说简直就是孤儿游戏！”</p>\n<p>每个人对游戏都有自己的理解，诚然游戏于大部分人来说只是一种释放压力的途径，我也一样，只是挑战更高难度对我来说也是十分重要的。</p>\n<h3 id=\"个体经济\"><a href=\"#个体经济\" class=\"headerlink\" title=\"个体经济\"></a>个体经济</h3><p>周末偶尔和朋友出门约饭，酒过三巡之后总要讨论一些时髦话题，比如哪个明星又怎样了，哪个国家政府被赶下去了，比特币最近又在作妖了……，不过此类话题基本都是几句带过，因为明星太过遥远，而币价也非我等韭菜可以操控的。最终个体经济这类话题占了上风，也往往会讨论很长时间，比如周边哪位同学的家里又帮忙购置不动产了，哪个亲戚又出国了。</p>\n<p>对于家庭对个人的经济影响我始终保留自己的意见，天下家庭何其多，富甲终是少数，纵使家里没有条件给予更多的支持，亦或是可以包揽一切，由于着更多是上一辈人的结果，也就不会有更多的感触了。</p>\n<h3 id=\"do-things-matters\"><a href=\"#do-things-matters\" class=\"headerlink\" title=\"do things matters\"></a>do things matters</h3><p>维护一个开源项目，需要经常回答群里的问题，有人问过我：“为什么喜欢做开源”。</p>\n<p>开源的话可以和很多用户沟通，他们会给出很多有趣的想法，有些建议是很有价值的，即使代码没有优化，修改之后产品本身对于用户也会更加友好。</p>\n<p>不只是开源，即使是内部项目自己也是更希望能选择更有挑战性，反馈更多的项目去尝试，如果简单的事情太多了，也会和leader申请更具挑战的项目。</p>\n<p>又回到开头的那句话了，“do things matters”。</p>\n"},{"title":"drf 一次错误排查","date":"2020-02-12T08:53:52.000Z","author":"Ginta","img":"http://img.ginta.top/chaoshou2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/chaoshou2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 前言\r\n在使用最新版本的 *DRF* 框架时，注册路由阶段报了一个错\r\n>>>\r\n“django.core.exceptions.ImproperlyConfigured: The included URLconf 'bingo.urls' does not appear to have any patterns in it. If you see valid patterns in the file then the issue is probably caused by a circular import.” \r\n\r\n找了半天错误，期间反复查看官方文档都没有什么问题，最后使用删减排除了错误,原本用户的路由是这个\r\n```\r\nuser_router.register(\"user\", UserViewSet, base_name=\"user\")\r\n```\r\n结果报错了，我改成以下代码：\r\n```\r\nuser_router.register(\"user\", UserViewSet)\r\n```\r\n问题得到了解决，然而还是睡不着，这个参数在使用中还是很方便的，就这么删掉了肯定不好，于是上 *github* 查看了该项目的 *issues*，最后发现新版本的 *base_name* 已经被替换了：\r\n\r\n\r\n![](http://img.ginta.top/markdownx/2019/12/02/05741e40-c072-41e6-8d32-802e5e201f9b.png)\r\n于是把 *base_name* 改成了 *basename*，问题解决！","source":"_posts/drf 一次错误排查.md","raw":"---\ntitle: drf 一次错误排查\ndate: 2020-02-12 16:53:52\nauthor: Ginta\nimg: http://img.ginta.top/chaoshou2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/chaoshou2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: Django\n---\n## 前言\r\n在使用最新版本的 *DRF* 框架时，注册路由阶段报了一个错\r\n>>>\r\n“django.core.exceptions.ImproperlyConfigured: The included URLconf 'bingo.urls' does not appear to have any patterns in it. If you see valid patterns in the file then the issue is probably caused by a circular import.” \r\n\r\n找了半天错误，期间反复查看官方文档都没有什么问题，最后使用删减排除了错误,原本用户的路由是这个\r\n```\r\nuser_router.register(\"user\", UserViewSet, base_name=\"user\")\r\n```\r\n结果报错了，我改成以下代码：\r\n```\r\nuser_router.register(\"user\", UserViewSet)\r\n```\r\n问题得到了解决，然而还是睡不着，这个参数在使用中还是很方便的，就这么删掉了肯定不好，于是上 *github* 查看了该项目的 *issues*，最后发现新版本的 *base_name* 已经被替换了：\r\n\r\n\r\n![](http://img.ginta.top/markdownx/2019/12/02/05741e40-c072-41e6-8d32-802e5e201f9b.png)\r\n于是把 *base_name* 改成了 *basename*，问题解决！","slug":"drf 一次错误排查","published":1,"updated":"2022-08-11T12:49:48.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p61812002qtkscejgt6h1x","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在使用最新版本的 <em>DRF</em> 框架时，注册路由阶段报了一个错</p>\n<blockquote>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>“django.core.exceptions.ImproperlyConfigured: The included URLconf ‘bingo.urls’ does not appear to have any patterns in it. If you see valid patterns in the file then the issue is probably caused by a circular import.” </p>\n</blockquote>\n</blockquote>\n<p>找了半天错误，期间反复查看官方文档都没有什么问题，最后使用删减排除了错误,原本用户的路由是这个</p>\n<pre><code>user_router.register(&quot;user&quot;, UserViewSet, base_name=&quot;user&quot;)\n</code></pre>\n<p>结果报错了，我改成以下代码：</p>\n<pre><code>user_router.register(&quot;user&quot;, UserViewSet)\n</code></pre>\n<p>问题得到了解决，然而还是睡不着，这个参数在使用中还是很方便的，就这么删掉了肯定不好，于是上 <em>github</em> 查看了该项目的 <em>issues</em>，最后发现新版本的 <em>base_name</em> 已经被替换了：</p>\n<p><img src=\"http://img.ginta.top/markdownx/2019/12/02/05741e40-c072-41e6-8d32-802e5e201f9b.png\"><br>于是把 <em>base_name</em> 改成了 <em>basename</em>，问题解决！</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在使用最新版本的 <em>DRF</em> 框架时，注册路由阶段报了一个错</p>\n<blockquote>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>“django.core.exceptions.ImproperlyConfigured: The included URLconf ‘bingo.urls’ does not appear to have any patterns in it. If you see valid patterns in the file then the issue is probably caused by a circular import.” </p>\n</blockquote>\n</blockquote>\n<p>找了半天错误，期间反复查看官方文档都没有什么问题，最后使用删减排除了错误,原本用户的路由是这个</p>\n<pre><code>user_router.register(&quot;user&quot;, UserViewSet, base_name=&quot;user&quot;)\n</code></pre>\n<p>结果报错了，我改成以下代码：</p>\n<pre><code>user_router.register(&quot;user&quot;, UserViewSet)\n</code></pre>\n<p>问题得到了解决，然而还是睡不着，这个参数在使用中还是很方便的，就这么删掉了肯定不好，于是上 <em>github</em> 查看了该项目的 <em>issues</em>，最后发现新版本的 <em>base_name</em> 已经被替换了：</p>\n<p><img src=\"http://img.ginta.top/markdownx/2019/12/02/05741e40-c072-41e6-8d32-802e5e201f9b.png\"><br>于是把 <em>base_name</em> 改成了 <em>basename</em>，问题解决！</p>\n"},{"title":"Hello World","date":"2021-07-06T16:19:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2021-07-07 00:19:00\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2022-08-11T12:49:48.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p61812002ttksc40anar0m","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"路明非","date":"2021-07-06T16:09:03.000Z","author":"Ginta","img":"http://img.ginta.top/huoying1.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/huoying1.jpg","toc":false,"mathjax":false,"summary":"这是一个衰小孩","_content":"\n\n### 衰小孩\n```angular2html\n1、所谓弃族的命运，就是要穿越荒原，再次竖起战旗，返回故乡。死不可怕，只是一场长眠。在我可以吞噬这个世界之前，与其孤独跋涉，不如安然沉睡。我们仍会醒来。\n\n2、同一条路，和某些人一起走，就长得离谱，和另外一些人走，就短得让人舍不得迈开脚步。\n\n3、可人不是断气的时候才真的死了。有人说人会死三次，第一次是他断气的时候，从生物学上他死了；第二次是他下葬的时候，人们来参加他的葬礼，怀念他的一生，然后在社会上他死了，不再会有他的位置；第三次是最后一个记得他的人把他忘记的时候，那时候他才真正的死了。\n\n4、这个世界其实从不曾有一个人能取代另一个人的位置，所谓的取代，只是以前的那个人被遗忘了。\n\n5、比孤独更可悲的事情，就是根本不知道自己很孤独，或者分明很孤独，却把自己都骗得相信自己不孤独。\n\n6、不需要计划，在我们的战场上是没有计划的。用绝对的力量，抹掉它。\n```","source":"_posts/first.md","raw":"---\ntitle: 路明非\ndate: 2021-07-07 00:09:03\nauthor: Ginta\nimg: http://img.ginta.top/huoying1.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/huoying1.jpg\ntoc: false\nmathjax: false\nsummary: 这是一个衰小孩\ncategories: Markdown\ntags:\n  - Typora\n  - Markdown\n---\n\n\n### 衰小孩\n```angular2html\n1、所谓弃族的命运，就是要穿越荒原，再次竖起战旗，返回故乡。死不可怕，只是一场长眠。在我可以吞噬这个世界之前，与其孤独跋涉，不如安然沉睡。我们仍会醒来。\n\n2、同一条路，和某些人一起走，就长得离谱，和另外一些人走，就短得让人舍不得迈开脚步。\n\n3、可人不是断气的时候才真的死了。有人说人会死三次，第一次是他断气的时候，从生物学上他死了；第二次是他下葬的时候，人们来参加他的葬礼，怀念他的一生，然后在社会上他死了，不再会有他的位置；第三次是最后一个记得他的人把他忘记的时候，那时候他才真正的死了。\n\n4、这个世界其实从不曾有一个人能取代另一个人的位置，所谓的取代，只是以前的那个人被遗忘了。\n\n5、比孤独更可悲的事情，就是根本不知道自己很孤独，或者分明很孤独，却把自己都骗得相信自己不孤独。\n\n6、不需要计划，在我们的战场上是没有计划的。用绝对的力量，抹掉它。\n```","slug":"first","published":1,"updated":"2022-08-11T12:49:48.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p61813002vtksc7van54go","content":"<h3 id=\"衰小孩\"><a href=\"#衰小孩\" class=\"headerlink\" title=\"衰小孩\"></a>衰小孩</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、所谓弃族的命运，就是要穿越荒原，再次竖起战旗，返回故乡。死不可怕，只是一场长眠。在我可以吞噬这个世界之前，与其孤独跋涉，不如安然沉睡。我们仍会醒来。</span><br><span class=\"line\"></span><br><span class=\"line\">2、同一条路，和某些人一起走，就长得离谱，和另外一些人走，就短得让人舍不得迈开脚步。</span><br><span class=\"line\"></span><br><span class=\"line\">3、可人不是断气的时候才真的死了。有人说人会死三次，第一次是他断气的时候，从生物学上他死了；第二次是他下葬的时候，人们来参加他的葬礼，怀念他的一生，然后在社会上他死了，不再会有他的位置；第三次是最后一个记得他的人把他忘记的时候，那时候他才真正的死了。</span><br><span class=\"line\"></span><br><span class=\"line\">4、这个世界其实从不曾有一个人能取代另一个人的位置，所谓的取代，只是以前的那个人被遗忘了。</span><br><span class=\"line\"></span><br><span class=\"line\">5、比孤独更可悲的事情，就是根本不知道自己很孤独，或者分明很孤独，却把自己都骗得相信自己不孤独。</span><br><span class=\"line\"></span><br><span class=\"line\">6、不需要计划，在我们的战场上是没有计划的。用绝对的力量，抹掉它。</span><br></pre></td></tr></table></figure>","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h3 id=\"衰小孩\"><a href=\"#衰小孩\" class=\"headerlink\" title=\"衰小孩\"></a>衰小孩</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、所谓弃族的命运，就是要穿越荒原，再次竖起战旗，返回故乡。死不可怕，只是一场长眠。在我可以吞噬这个世界之前，与其孤独跋涉，不如安然沉睡。我们仍会醒来。</span><br><span class=\"line\"></span><br><span class=\"line\">2、同一条路，和某些人一起走，就长得离谱，和另外一些人走，就短得让人舍不得迈开脚步。</span><br><span class=\"line\"></span><br><span class=\"line\">3、可人不是断气的时候才真的死了。有人说人会死三次，第一次是他断气的时候，从生物学上他死了；第二次是他下葬的时候，人们来参加他的葬礼，怀念他的一生，然后在社会上他死了，不再会有他的位置；第三次是最后一个记得他的人把他忘记的时候，那时候他才真正的死了。</span><br><span class=\"line\"></span><br><span class=\"line\">4、这个世界其实从不曾有一个人能取代另一个人的位置，所谓的取代，只是以前的那个人被遗忘了。</span><br><span class=\"line\"></span><br><span class=\"line\">5、比孤独更可悲的事情，就是根本不知道自己很孤独，或者分明很孤独，却把自己都骗得相信自己不孤独。</span><br><span class=\"line\"></span><br><span class=\"line\">6、不需要计划，在我们的战场上是没有计划的。用绝对的力量，抹掉它。</span><br></pre></td></tr></table></figure>"},{"title":"pathlib模块用法","date":"2020-05-07T06:51:52.000Z","author":"Ginta","img":"http://img.ginta.top/chaoshou1.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/chaoshou1.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 前言\r\n*Python* 中对于路径处理有一个 **os.path** 模块，基本上所有常见的需求都可以满足，不过也有一些弊端\r\n```\r\nimport os.path\r\n\r\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\nTEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')\r\n```\r\n以上用法在 **Django** 项目中应该是十分常见的，阅读起来非常不方便。\r\n## 福利\r\n在 **python3.5** 之后引入了一个新的内置包 **pathlib**。有了它很多操作都会变得简单明了，直接上代码：\r\n上述的例子如果用 **pathlib** 可以写成如下样子：\r\n```\r\nfrom pathlib import Path\r\n\r\nBASE_DIR = Path(__file__).resolve().parent.parent\r\nTEMPLATES_DIR = BASE_DIR.joinpath('templates')\r\n```\r\n\r\n其他用法：\r\n```\r\n# 路径拼接\r\nPath('D:/test','pb','123.txt')\r\n# WindowsPath('D:/test/pb/123.txt')\r\n\r\n# 分割路径\r\nfrom pathlib import PurePath\r\np = PurePath('/usr/bin/python3')\r\np.parts\r\n# ('\\\\', 'usr', 'bin', 'python3')\r\n\r\n# 获取指定类型的文件\r\np = Path('.')\r\nlist(p.glob('*.py'))\r\n# [WindowsPath('day_close_not_equal_min.py'), WindowsPath('day_h5.py'), WindowsPath('local_run.py'), WindowsPath('min_h5.py'), WindowsPath('min_h5_1.py'), WindowsPath('prev_iopv2tick.py'), # # # \r\n# WindowsPath('read_h5.py'), WindowsPath('repair_close.py'), WindowsPath('rep_nan.py\r\n```\r\n\r\n## 结语\r\n基本上 **os.path** 中常用的方法在 **pathlib** 都可以找到，而且面向对象的思想更容易被理解，代码也会相对清晰一些。","source":"_posts/pathlib模块用法.md","raw":"---\ntitle: pathlib模块用法\ndate: 2020-05-07 14:51:52\nauthor: Ginta\nimg: http://img.ginta.top/chaoshou1.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/chaoshou1.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - python\ncategories: python\n---\n## 前言\r\n*Python* 中对于路径处理有一个 **os.path** 模块，基本上所有常见的需求都可以满足，不过也有一些弊端\r\n```\r\nimport os.path\r\n\r\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\nTEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')\r\n```\r\n以上用法在 **Django** 项目中应该是十分常见的，阅读起来非常不方便。\r\n## 福利\r\n在 **python3.5** 之后引入了一个新的内置包 **pathlib**。有了它很多操作都会变得简单明了，直接上代码：\r\n上述的例子如果用 **pathlib** 可以写成如下样子：\r\n```\r\nfrom pathlib import Path\r\n\r\nBASE_DIR = Path(__file__).resolve().parent.parent\r\nTEMPLATES_DIR = BASE_DIR.joinpath('templates')\r\n```\r\n\r\n其他用法：\r\n```\r\n# 路径拼接\r\nPath('D:/test','pb','123.txt')\r\n# WindowsPath('D:/test/pb/123.txt')\r\n\r\n# 分割路径\r\nfrom pathlib import PurePath\r\np = PurePath('/usr/bin/python3')\r\np.parts\r\n# ('\\\\', 'usr', 'bin', 'python3')\r\n\r\n# 获取指定类型的文件\r\np = Path('.')\r\nlist(p.glob('*.py'))\r\n# [WindowsPath('day_close_not_equal_min.py'), WindowsPath('day_h5.py'), WindowsPath('local_run.py'), WindowsPath('min_h5.py'), WindowsPath('min_h5_1.py'), WindowsPath('prev_iopv2tick.py'), # # # \r\n# WindowsPath('read_h5.py'), WindowsPath('repair_close.py'), WindowsPath('rep_nan.py\r\n```\r\n\r\n## 结语\r\n基本上 **os.path** 中常用的方法在 **pathlib** 都可以找到，而且面向对象的思想更容易被理解，代码也会相对清晰一些。","slug":"pathlib模块用法","published":1,"updated":"2022-08-11T12:49:48.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p618130030tksc97fe0dgm","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><em>Python</em> 中对于路径处理有一个 <strong>os.path</strong> 模块，基本上所有常见的需求都可以满足，不过也有一些弊端</p>\n<pre><code>import os.path\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nTEMPLATES_DIR = os.path.join(BASE_DIR, &#39;templates&#39;)\n</code></pre>\n<p>以上用法在 <strong>Django</strong> 项目中应该是十分常见的，阅读起来非常不方便。</p>\n<h2 id=\"福利\"><a href=\"#福利\" class=\"headerlink\" title=\"福利\"></a>福利</h2><p>在 <strong>python3.5</strong> 之后引入了一个新的内置包 <strong>pathlib</strong>。有了它很多操作都会变得简单明了，直接上代码：<br>上述的例子如果用 <strong>pathlib</strong> 可以写成如下样子：</p>\n<pre><code>from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\nTEMPLATES_DIR = BASE_DIR.joinpath(&#39;templates&#39;)\n</code></pre>\n<p>其他用法：</p>\n<pre><code># 路径拼接\nPath(&#39;D:/test&#39;,&#39;pb&#39;,&#39;123.txt&#39;)\n# WindowsPath(&#39;D:/test/pb/123.txt&#39;)\n\n# 分割路径\nfrom pathlib import PurePath\np = PurePath(&#39;/usr/bin/python3&#39;)\np.parts\n# (&#39;\\\\&#39;, &#39;usr&#39;, &#39;bin&#39;, &#39;python3&#39;)\n\n# 获取指定类型的文件\np = Path(&#39;.&#39;)\nlist(p.glob(&#39;*.py&#39;))\n# [WindowsPath(&#39;day_close_not_equal_min.py&#39;), WindowsPath(&#39;day_h5.py&#39;), WindowsPath(&#39;local_run.py&#39;), WindowsPath(&#39;min_h5.py&#39;), WindowsPath(&#39;min_h5_1.py&#39;), WindowsPath(&#39;prev_iopv2tick.py&#39;), # # # \n# WindowsPath(&#39;read_h5.py&#39;), WindowsPath(&#39;repair_close.py&#39;), WindowsPath(&#39;rep_nan.py\n</code></pre>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>基本上 <strong>os.path</strong> 中常用的方法在 <strong>pathlib</strong> 都可以找到，而且面向对象的思想更容易被理解，代码也会相对清晰一些。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><em>Python</em> 中对于路径处理有一个 <strong>os.path</strong> 模块，基本上所有常见的需求都可以满足，不过也有一些弊端</p>\n<pre><code>import os.path\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nTEMPLATES_DIR = os.path.join(BASE_DIR, &#39;templates&#39;)\n</code></pre>\n<p>以上用法在 <strong>Django</strong> 项目中应该是十分常见的，阅读起来非常不方便。</p>\n<h2 id=\"福利\"><a href=\"#福利\" class=\"headerlink\" title=\"福利\"></a>福利</h2><p>在 <strong>python3.5</strong> 之后引入了一个新的内置包 <strong>pathlib</strong>。有了它很多操作都会变得简单明了，直接上代码：<br>上述的例子如果用 <strong>pathlib</strong> 可以写成如下样子：</p>\n<pre><code>from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\nTEMPLATES_DIR = BASE_DIR.joinpath(&#39;templates&#39;)\n</code></pre>\n<p>其他用法：</p>\n<pre><code># 路径拼接\nPath(&#39;D:/test&#39;,&#39;pb&#39;,&#39;123.txt&#39;)\n# WindowsPath(&#39;D:/test/pb/123.txt&#39;)\n\n# 分割路径\nfrom pathlib import PurePath\np = PurePath(&#39;/usr/bin/python3&#39;)\np.parts\n# (&#39;\\\\&#39;, &#39;usr&#39;, &#39;bin&#39;, &#39;python3&#39;)\n\n# 获取指定类型的文件\np = Path(&#39;.&#39;)\nlist(p.glob(&#39;*.py&#39;))\n# [WindowsPath(&#39;day_close_not_equal_min.py&#39;), WindowsPath(&#39;day_h5.py&#39;), WindowsPath(&#39;local_run.py&#39;), WindowsPath(&#39;min_h5.py&#39;), WindowsPath(&#39;min_h5_1.py&#39;), WindowsPath(&#39;prev_iopv2tick.py&#39;), # # # \n# WindowsPath(&#39;read_h5.py&#39;), WindowsPath(&#39;repair_close.py&#39;), WindowsPath(&#39;rep_nan.py\n</code></pre>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>基本上 <strong>os.path</strong> 中常用的方法在 <strong>pathlib</strong> 都可以找到，而且面向对象的思想更容易被理解，代码也会相对清晰一些。</p>\n"},{"title":"plan","date":"2020-04-27T08:00:17.000Z","author":"Ginta","img":"http://img.ginta.top/lc1.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/lc1.jpg","toc":false,"mathjax":false,"summary":null,"_content":"- [Vue](https://cn.vuejs.org/v2/guide/)\r\n- [vue-element-admin](https://github.com/PanJiaChen/vue-element-admin)\r\n- [FastAPI ](https://fastapi.tiangolo.com/)\r\n- [cookiecutter-fastapi](https://github.com/arthurhenrique/cookiecutter-fastapi)","source":"_posts/plan.md","raw":"---\ntitle: plan\ndate: 2020-04-27 16:00:17\nauthor: Ginta\nimg: http://img.ginta.top/lc1.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/lc1.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - FastAPI\n  - Vue\ncategories: 充电\n---\n- [Vue](https://cn.vuejs.org/v2/guide/)\r\n- [vue-element-admin](https://github.com/PanJiaChen/vue-element-admin)\r\n- [FastAPI ](https://fastapi.tiangolo.com/)\r\n- [cookiecutter-fastapi](https://github.com/arthurhenrique/cookiecutter-fastapi)","slug":"plan","published":1,"updated":"2022-08-11T12:49:48.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p618130033tksc2cnwgby6","content":"<ul>\n<li><a href=\"https://cn.vuejs.org/v2/guide/\">Vue</a></li>\n<li><a href=\"https://github.com/PanJiaChen/vue-element-admin\">vue-element-admin</a></li>\n<li><a href=\"https://fastapi.tiangolo.com/\">FastAPI </a></li>\n<li><a href=\"https://github.com/arthurhenrique/cookiecutter-fastapi\">cookiecutter-fastapi</a></li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<ul>\n<li><a href=\"https://cn.vuejs.org/v2/guide/\">Vue</a></li>\n<li><a href=\"https://github.com/PanJiaChen/vue-element-admin\">vue-element-admin</a></li>\n<li><a href=\"https://fastapi.tiangolo.com/\">FastAPI </a></li>\n<li><a href=\"https://github.com/arthurhenrique/cookiecutter-fastapi\">cookiecutter-fastapi</a></li>\n</ul>\n"},{"title":"pipenv 使用","date":"2019-11-26T18:02:10.000Z","author":"Ginta","img":"http://img.ginta.top/lc1.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/lc1.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 前言\r\n以前做开发的时候一直使用的 *virtualenv* 作为虚拟环境库，当时也知道有其他工具，只是一直没有了解，在做项目的时候看到网上有一篇文章可以解决项目依赖库的问题：\r\n比如说，之前有个项目开发使用的是 *django1.10* 版本，但是使用 `pip freeze >requirements.txt` 命令生成的文件中只有 *django* 没有具体哪个版本（现在貌似具体到版本了...），或者每次启动虚拟环境的时候都要输入一系列操作，现在只需要 `pipenv shell` 就可以了！\r\n## 安装\r\n- Windows系统下直接输入 `pip install pipenv`就可以了\r\n- Ubuntu 系统下可能涉及到环境变量问题:具体步骤如下 \r\n>运行python3 -m site(如果使用默认的可以运行 python -m site，这里我是python3)\r\n>然后找到 **USER_BASE: '/root/.local' (exists)** ，然后在 **~/.profile** 最后一行加入 \r\n>`export PATH=$PATH:/root/.local/bin`\r\n>我是ubuntu系统，mac或者其他系统的 profile 文件到网上找找，最后执行 `source ~/.profile` 就可以了\r\n\r\n## 使用\r\n在任何地方执行 `pipenv install django` ，*pipenv* 会自动生成2个文件，分别是 *Pipfile* 和 *Pipfile.lock* ， *Pipfile.lock* 文件就会自动配置好 *django* 框架了：\r\n```\r\n  \"default\": {\r\n      \"django\": {\r\n          \"hashes\": [\r\n              \"sha256:4025317ca01f75fc79250ff7262a06d8ba97cd4f82e93394b2a0a6a4a925caeb\",\r\n              \"sha256:a8ca1033acac9f33995eb2209a6bf18a4681c3e5269a878e9a7e0b7384ed1ca3\"\r\n          ],\r\n          \"index\": \"pypi\",\r\n          \"version\": \"==2.2.6\"\r\n      },\r\n    ....其他内容\r\n```\r\n激活虚拟环境的命令是 `pipenv shell`，需要注意的是，如果激活后使用 `pip install flask` 则只会在虚拟环境中安装 **Flask** 框架，并不会写入到 *Pipfile.lock* 配置中，如果想写入配置则执行 `pipenv install flask` 命令，然后如果需要生成 *requirements.txt* 文件则执行 `pipenv lock -r > requirements.txt` 命令，**只会打包 Pipfile.lock文件中的package**。\r\n\r\n## 最后\r\n一般来说在项目根目录下生成 *Pipfile* 和 *Pipfile.lock*  文件，方便后续操作，比如执行 *docker* 命令什么的都可以很简单安装好一个项目的依赖。","source":"_posts/pipenv 使用.md","raw":"---\ntitle: pipenv 使用\ndate: 2019-11-27 02:02:10\nauthor: Ginta\nimg: http://img.ginta.top/lc1.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/lc1.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - python\ncategories: python\n---\n## 前言\r\n以前做开发的时候一直使用的 *virtualenv* 作为虚拟环境库，当时也知道有其他工具，只是一直没有了解，在做项目的时候看到网上有一篇文章可以解决项目依赖库的问题：\r\n比如说，之前有个项目开发使用的是 *django1.10* 版本，但是使用 `pip freeze >requirements.txt` 命令生成的文件中只有 *django* 没有具体哪个版本（现在貌似具体到版本了...），或者每次启动虚拟环境的时候都要输入一系列操作，现在只需要 `pipenv shell` 就可以了！\r\n## 安装\r\n- Windows系统下直接输入 `pip install pipenv`就可以了\r\n- Ubuntu 系统下可能涉及到环境变量问题:具体步骤如下 \r\n>运行python3 -m site(如果使用默认的可以运行 python -m site，这里我是python3)\r\n>然后找到 **USER_BASE: '/root/.local' (exists)** ，然后在 **~/.profile** 最后一行加入 \r\n>`export PATH=$PATH:/root/.local/bin`\r\n>我是ubuntu系统，mac或者其他系统的 profile 文件到网上找找，最后执行 `source ~/.profile` 就可以了\r\n\r\n## 使用\r\n在任何地方执行 `pipenv install django` ，*pipenv* 会自动生成2个文件，分别是 *Pipfile* 和 *Pipfile.lock* ， *Pipfile.lock* 文件就会自动配置好 *django* 框架了：\r\n```\r\n  \"default\": {\r\n      \"django\": {\r\n          \"hashes\": [\r\n              \"sha256:4025317ca01f75fc79250ff7262a06d8ba97cd4f82e93394b2a0a6a4a925caeb\",\r\n              \"sha256:a8ca1033acac9f33995eb2209a6bf18a4681c3e5269a878e9a7e0b7384ed1ca3\"\r\n          ],\r\n          \"index\": \"pypi\",\r\n          \"version\": \"==2.2.6\"\r\n      },\r\n    ....其他内容\r\n```\r\n激活虚拟环境的命令是 `pipenv shell`，需要注意的是，如果激活后使用 `pip install flask` 则只会在虚拟环境中安装 **Flask** 框架，并不会写入到 *Pipfile.lock* 配置中，如果想写入配置则执行 `pipenv install flask` 命令，然后如果需要生成 *requirements.txt* 文件则执行 `pipenv lock -r > requirements.txt` 命令，**只会打包 Pipfile.lock文件中的package**。\r\n\r\n## 最后\r\n一般来说在项目根目录下生成 *Pipfile* 和 *Pipfile.lock*  文件，方便后续操作，比如执行 *docker* 命令什么的都可以很简单安装好一个项目的依赖。","slug":"pipenv 使用","published":1,"updated":"2022-08-11T12:49:48.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p618140038tksc45o51gdj","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>以前做开发的时候一直使用的 <em>virtualenv</em> 作为虚拟环境库，当时也知道有其他工具，只是一直没有了解，在做项目的时候看到网上有一篇文章可以解决项目依赖库的问题：<br>比如说，之前有个项目开发使用的是 <em>django1.10</em> 版本，但是使用 <code>pip freeze &gt;requirements.txt</code> 命令生成的文件中只有 <em>django</em> 没有具体哪个版本（现在貌似具体到版本了…），或者每次启动虚拟环境的时候都要输入一系列操作，现在只需要 <code>pipenv shell</code> 就可以了！</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>Windows系统下直接输入 <code>pip install pipenv</code>就可以了</li>\n<li>Ubuntu 系统下可能涉及到环境变量问题:具体步骤如下 <blockquote>\n<p>运行python3 -m site(如果使用默认的可以运行 python -m site，这里我是python3)<br>然后找到 <strong>USER_BASE: ‘&#x2F;root&#x2F;.local’ (exists)</strong> ，然后在 <strong>~&#x2F;.profile</strong> 最后一行加入<br><code>export PATH=$PATH:/root/.local/bin</code><br>我是ubuntu系统，mac或者其他系统的 profile 文件到网上找找，最后执行 <code>source ~/.profile</code> 就可以了</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在任何地方执行 <code>pipenv install django</code> ，<em>pipenv</em> 会自动生成2个文件，分别是 <em>Pipfile</em> 和 <em>Pipfile.lock</em> ， <em>Pipfile.lock</em> 文件就会自动配置好 <em>django</em> 框架了：</p>\n<pre><code>  &quot;default&quot;: &#123;\n      &quot;django&quot;: &#123;\n          &quot;hashes&quot;: [\n              &quot;sha256:4025317ca01f75fc79250ff7262a06d8ba97cd4f82e93394b2a0a6a4a925caeb&quot;,\n              &quot;sha256:a8ca1033acac9f33995eb2209a6bf18a4681c3e5269a878e9a7e0b7384ed1ca3&quot;\n          ],\n          &quot;index&quot;: &quot;pypi&quot;,\n          &quot;version&quot;: &quot;==2.2.6&quot;\n      &#125;,\n    ....其他内容\n</code></pre>\n<p>激活虚拟环境的命令是 <code>pipenv shell</code>，需要注意的是，如果激活后使用 <code>pip install flask</code> 则只会在虚拟环境中安装 <strong>Flask</strong> 框架，并不会写入到 <em>Pipfile.lock</em> 配置中，如果想写入配置则执行 <code>pipenv install flask</code> 命令，然后如果需要生成 <em>requirements.txt</em> 文件则执行 <code>pipenv lock -r &gt; requirements.txt</code> 命令，<strong>只会打包 Pipfile.lock文件中的package</strong>。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>一般来说在项目根目录下生成 <em>Pipfile</em> 和 <em>Pipfile.lock</em>  文件，方便后续操作，比如执行 <em>docker</em> 命令什么的都可以很简单安装好一个项目的依赖。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>以前做开发的时候一直使用的 <em>virtualenv</em> 作为虚拟环境库，当时也知道有其他工具，只是一直没有了解，在做项目的时候看到网上有一篇文章可以解决项目依赖库的问题：<br>比如说，之前有个项目开发使用的是 <em>django1.10</em> 版本，但是使用 <code>pip freeze &gt;requirements.txt</code> 命令生成的文件中只有 <em>django</em> 没有具体哪个版本（现在貌似具体到版本了…），或者每次启动虚拟环境的时候都要输入一系列操作，现在只需要 <code>pipenv shell</code> 就可以了！</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>Windows系统下直接输入 <code>pip install pipenv</code>就可以了</li>\n<li>Ubuntu 系统下可能涉及到环境变量问题:具体步骤如下 <blockquote>\n<p>运行python3 -m site(如果使用默认的可以运行 python -m site，这里我是python3)<br>然后找到 <strong>USER_BASE: ‘&#x2F;root&#x2F;.local’ (exists)</strong> ，然后在 <strong>~&#x2F;.profile</strong> 最后一行加入<br><code>export PATH=$PATH:/root/.local/bin</code><br>我是ubuntu系统，mac或者其他系统的 profile 文件到网上找找，最后执行 <code>source ~/.profile</code> 就可以了</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在任何地方执行 <code>pipenv install django</code> ，<em>pipenv</em> 会自动生成2个文件，分别是 <em>Pipfile</em> 和 <em>Pipfile.lock</em> ， <em>Pipfile.lock</em> 文件就会自动配置好 <em>django</em> 框架了：</p>\n<pre><code>  &quot;default&quot;: &#123;\n      &quot;django&quot;: &#123;\n          &quot;hashes&quot;: [\n              &quot;sha256:4025317ca01f75fc79250ff7262a06d8ba97cd4f82e93394b2a0a6a4a925caeb&quot;,\n              &quot;sha256:a8ca1033acac9f33995eb2209a6bf18a4681c3e5269a878e9a7e0b7384ed1ca3&quot;\n          ],\n          &quot;index&quot;: &quot;pypi&quot;,\n          &quot;version&quot;: &quot;==2.2.6&quot;\n      &#125;,\n    ....其他内容\n</code></pre>\n<p>激活虚拟环境的命令是 <code>pipenv shell</code>，需要注意的是，如果激活后使用 <code>pip install flask</code> 则只会在虚拟环境中安装 <strong>Flask</strong> 框架，并不会写入到 <em>Pipfile.lock</em> 配置中，如果想写入配置则执行 <code>pipenv install flask</code> 命令，然后如果需要生成 <em>requirements.txt</em> 文件则执行 <code>pipenv lock -r &gt; requirements.txt</code> 命令，<strong>只会打包 Pipfile.lock文件中的package</strong>。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>一般来说在项目根目录下生成 <em>Pipfile</em> 和 <em>Pipfile.lock</em>  文件，方便后续操作，比如执行 <em>docker</em> 命令什么的都可以很简单安装好一个项目的依赖。</p>\n"},{"title":"supervisor + pipenv + uwsgi","date":"2019-11-19T19:28:48.000Z","author":"Ginta","img":"http://img.ginta.top/dm2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/dm2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 前言\r\n目前我部署 *django* 项目的方式是 *uwsgi + nginx* ，*uwsgi* 重启也很方便，只需要写一句 *uwsgi --reload xxx.pid* 即可，但是即使是一句我也不想输入了，就是比较懒，于是乎就有了 **supervisor** 管理 *uwsgi* 进程，配置好以后通过 *web* 网页点一下即可。\r\n## 开始\r\n至于怎么配置 *uwsgi* 网上教程有很多，这里只讲一下怎么用 *supervisor* 启动。\r\n通过网上的教程可以先安装好 *supervisor* ，我这里有一篇 **[ubuntu python3 配置 supervisor](https://blog.csdn.net/qq_35068933/article/details/103087914)** 可供参考。我的 *supervisor* 配置目录结构如下：\r\n```\r\nsupervisor/\r\n├── conf.d\r\n│   ├── myblog.ini   # 自己配的\r\n├── supervisord.conf   # 初始化生成的配置文件（一开始就有，网上可以找到如何生成）\r\n└── var\r\n    ├── log\r\n    │   ├── myblog-stderr.log      # 后续生成的\r\n    │   ├── myblog-stdout.log\t   # 后续生成的\r\n    │   └── supervisord.log   # 后续生成的\r\n    ├── supervisord.pid   # 后续生成的\r\n    └── supervisor.sock   # 后续生成的\r\n\r\n```\r\n*supervisor* 文件夹是在 **/etc** 下面。\r\n首先配置 **supervisor/supervisord.conf** 文件，有几个地方改了一下：\r\n1.  让 socket 文件生成在 ~/etc/supervisor/var/ 目录下。**注意 supervisor 不支持将 ~ 展开为用户 home 目录，所以要用绝对路径指定。我这里是 *root* 用户，这样直接写就可以，其他用户的路径类似于 /home/username/etc/supervisor...****\r\n```\r\n[unix_http_server]\r\nfile=/etc/supervisor/var/supervisor.sock   ; the path to the socket file\r\n```\r\n2. 修改 [inet_http_server] ，这一步主要是可以通过外部浏览器来进行控制 supervisor 进程，其中 端口号像我这样配置成 port=*:9001 ，就可以在外网通过服务器的域名下的 *9001* 端口来控制，默认是没有密码的，但是最好配置一下\r\n```\r\n[inet_http_server]         ; inet (TCP) server disabled by default\r\nport=*:9001        ; ip_address:port specifier, *:port for all iface\r\n;username=user              ; default is no username (open server)\r\n;password=123               ; default is no password (open server)\r\n```\r\n3.  类似的修改 [supervisord] 板块下的 logfile 和 pidfile 文件的路径，还有 user 改为系统用户，这样 supervisor 启动的进程将以系统用户运行，避免可能的权限问题,**注意 supervisor 不支持将 ~ 展开为用户 home 目录，所以要用绝对路径指定。我这里是 *root* 用户，这样直接写就可以，其他用户的路径类似于 /home/username/etc/supervisor...**：\r\n```\r\n[supervisord]\r\nlogfile=/etc/supervisor/var/log/supervisord.log ; main log file; default $CWD/supervisord.log\r\npidfile=/etc/supervisor/var/supervisord.pid ; supervisord pidfile; default supervisord.pid\r\nuser=root            ; setuid to this UNIX account at startup; recommended if root\r\n```\r\n4.   [supervisorctl]板块下：\r\n```\r\n[supervisorctl]\r\nserverurl=unix:///etc/supervisor/var/supervisor.sock ; use a unix:// URL  for a unix socket\r\n```\r\n5. [include] 版块,将 /etc/supervisor/conf.d/ 目录下所有以 .ini 结尾的文件内容包含到配置中来，这样便于配置的模块化管理。\r\n```\r\n[include]\r\nfiles = /etc/supervisor/conf.d/*.ini\r\n```\r\n7. 配置 **管理uwsgi进程** 的配置文件\r\n在 **/etc/supervisor/conf.d/** 目录下新建一个配置文件，名字以 *.ini* 结尾就好，是因为我们在 *supervisor.conf* 文件中修改了配置 [include] ，所以 *supervisor* 会搜索  */etc/supervisor/conf.d/* 目录下所有以 *.ini* 结尾的文件。\r\n这是我的配置文件\r\n```\r\n[program:myblog]\r\ncommand=pipenv run uwsgi --ini /root/mysite_uwsgi/myblog.ini\r\ndirectory=/root/code/Workspace/ginta.top\r\nautostart=true\r\nautorestart=unexpected\r\nuser=root\r\nstdout_logfile=/etc/supervisor/var/log/myblog-stdout.log\r\nstderr_logfile=/etc/supervisor/var/log/myblog-stderr.log\r\n```\r\nprogram:hellodjango-blog-tutorial] 指明运行应用的进程，名为 hellodjango-blog-tutorial。\r\n\r\ncommand 为进程启动时执行的命令， 我的环境是用 pipenv 来进行包管理的所以要这样执行，如果没有用包管理直接执行 `uwsgi --ini /root/mysite_uwsgi/myblog.ini` 即可，也就是 *uwsgi* 的启动命令。\r\n\r\ndirectory 指定执行命令时所在的目录。\r\n\r\nautostart 随 Supervisor 启动自动启动进程。\r\n\r\nautorestart 进程意外退出时重启。\r\n\r\nuser 进程运行的用户，防止权限问题。\r\n\r\nstdout_logfile，stderr_logfile 日志输出文件。\r\n6. 启动 Supervisor\r\n```\r\nsupervisord -c ~/etc/supervisord.conf\r\n```\r\n7. 进入 supervisorctl 进程管理控制台：\r\n```\r\nsupervisorctl -c ~/etc/supervisord.conf\r\n```\r\n执行 update 命令更新配置文件并启动应用。\r\n\r\n浏览器输入域名，可以看到服务已经正常启动了。\r\n\r\n## 注意\r\n1. 由于我们 **supervisor** 有配置项目的日志，所以如果在 **uwsgi.ini** 中配置有日志，请把它注释掉\r\n```\r\n# myblog.ini （项目的uwsgi配置）\r\n# daemonize = /root/mysite_uwsgi/myblog.log             # 日志管理\r\n```\r\n2. **如果之前就已经运行了 uwsgi，请一定要先退出再重启 supervisor**\r\n3. *supervisor/supervisord.conf* 文件的注释符号是 **;**，比如 *;[eventlistener:theeventlistenername]*，所以我们所有的配置前面如果有 **;** ，请删掉，比如把 *;[eventlistener:theeventlistenername]* 改成 *[eventlistener:theeventlistenername]* ，不然会视作没有配置。\r\n\r\n本文配置参考了[追梦人物的博客](https://www.zmrenwu.com/courses/hellodjango-blog-tutorial/materials/74/)。","source":"_posts/supervisor + pipenv + uwsgi.md","raw":"---\ntitle: supervisor + pipenv + uwsgi\ndate: 2019-11-20 03:28:48\nauthor: Ginta\nimg: http://img.ginta.top/dm2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/dm2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - python\n  - Django\n  - 自动化\ncategories: Django\n---\n## 前言\r\n目前我部署 *django* 项目的方式是 *uwsgi + nginx* ，*uwsgi* 重启也很方便，只需要写一句 *uwsgi --reload xxx.pid* 即可，但是即使是一句我也不想输入了，就是比较懒，于是乎就有了 **supervisor** 管理 *uwsgi* 进程，配置好以后通过 *web* 网页点一下即可。\r\n## 开始\r\n至于怎么配置 *uwsgi* 网上教程有很多，这里只讲一下怎么用 *supervisor* 启动。\r\n通过网上的教程可以先安装好 *supervisor* ，我这里有一篇 **[ubuntu python3 配置 supervisor](https://blog.csdn.net/qq_35068933/article/details/103087914)** 可供参考。我的 *supervisor* 配置目录结构如下：\r\n```\r\nsupervisor/\r\n├── conf.d\r\n│   ├── myblog.ini   # 自己配的\r\n├── supervisord.conf   # 初始化生成的配置文件（一开始就有，网上可以找到如何生成）\r\n└── var\r\n    ├── log\r\n    │   ├── myblog-stderr.log      # 后续生成的\r\n    │   ├── myblog-stdout.log\t   # 后续生成的\r\n    │   └── supervisord.log   # 后续生成的\r\n    ├── supervisord.pid   # 后续生成的\r\n    └── supervisor.sock   # 后续生成的\r\n\r\n```\r\n*supervisor* 文件夹是在 **/etc** 下面。\r\n首先配置 **supervisor/supervisord.conf** 文件，有几个地方改了一下：\r\n1.  让 socket 文件生成在 ~/etc/supervisor/var/ 目录下。**注意 supervisor 不支持将 ~ 展开为用户 home 目录，所以要用绝对路径指定。我这里是 *root* 用户，这样直接写就可以，其他用户的路径类似于 /home/username/etc/supervisor...****\r\n```\r\n[unix_http_server]\r\nfile=/etc/supervisor/var/supervisor.sock   ; the path to the socket file\r\n```\r\n2. 修改 [inet_http_server] ，这一步主要是可以通过外部浏览器来进行控制 supervisor 进程，其中 端口号像我这样配置成 port=*:9001 ，就可以在外网通过服务器的域名下的 *9001* 端口来控制，默认是没有密码的，但是最好配置一下\r\n```\r\n[inet_http_server]         ; inet (TCP) server disabled by default\r\nport=*:9001        ; ip_address:port specifier, *:port for all iface\r\n;username=user              ; default is no username (open server)\r\n;password=123               ; default is no password (open server)\r\n```\r\n3.  类似的修改 [supervisord] 板块下的 logfile 和 pidfile 文件的路径，还有 user 改为系统用户，这样 supervisor 启动的进程将以系统用户运行，避免可能的权限问题,**注意 supervisor 不支持将 ~ 展开为用户 home 目录，所以要用绝对路径指定。我这里是 *root* 用户，这样直接写就可以，其他用户的路径类似于 /home/username/etc/supervisor...**：\r\n```\r\n[supervisord]\r\nlogfile=/etc/supervisor/var/log/supervisord.log ; main log file; default $CWD/supervisord.log\r\npidfile=/etc/supervisor/var/supervisord.pid ; supervisord pidfile; default supervisord.pid\r\nuser=root            ; setuid to this UNIX account at startup; recommended if root\r\n```\r\n4.   [supervisorctl]板块下：\r\n```\r\n[supervisorctl]\r\nserverurl=unix:///etc/supervisor/var/supervisor.sock ; use a unix:// URL  for a unix socket\r\n```\r\n5. [include] 版块,将 /etc/supervisor/conf.d/ 目录下所有以 .ini 结尾的文件内容包含到配置中来，这样便于配置的模块化管理。\r\n```\r\n[include]\r\nfiles = /etc/supervisor/conf.d/*.ini\r\n```\r\n7. 配置 **管理uwsgi进程** 的配置文件\r\n在 **/etc/supervisor/conf.d/** 目录下新建一个配置文件，名字以 *.ini* 结尾就好，是因为我们在 *supervisor.conf* 文件中修改了配置 [include] ，所以 *supervisor* 会搜索  */etc/supervisor/conf.d/* 目录下所有以 *.ini* 结尾的文件。\r\n这是我的配置文件\r\n```\r\n[program:myblog]\r\ncommand=pipenv run uwsgi --ini /root/mysite_uwsgi/myblog.ini\r\ndirectory=/root/code/Workspace/ginta.top\r\nautostart=true\r\nautorestart=unexpected\r\nuser=root\r\nstdout_logfile=/etc/supervisor/var/log/myblog-stdout.log\r\nstderr_logfile=/etc/supervisor/var/log/myblog-stderr.log\r\n```\r\nprogram:hellodjango-blog-tutorial] 指明运行应用的进程，名为 hellodjango-blog-tutorial。\r\n\r\ncommand 为进程启动时执行的命令， 我的环境是用 pipenv 来进行包管理的所以要这样执行，如果没有用包管理直接执行 `uwsgi --ini /root/mysite_uwsgi/myblog.ini` 即可，也就是 *uwsgi* 的启动命令。\r\n\r\ndirectory 指定执行命令时所在的目录。\r\n\r\nautostart 随 Supervisor 启动自动启动进程。\r\n\r\nautorestart 进程意外退出时重启。\r\n\r\nuser 进程运行的用户，防止权限问题。\r\n\r\nstdout_logfile，stderr_logfile 日志输出文件。\r\n6. 启动 Supervisor\r\n```\r\nsupervisord -c ~/etc/supervisord.conf\r\n```\r\n7. 进入 supervisorctl 进程管理控制台：\r\n```\r\nsupervisorctl -c ~/etc/supervisord.conf\r\n```\r\n执行 update 命令更新配置文件并启动应用。\r\n\r\n浏览器输入域名，可以看到服务已经正常启动了。\r\n\r\n## 注意\r\n1. 由于我们 **supervisor** 有配置项目的日志，所以如果在 **uwsgi.ini** 中配置有日志，请把它注释掉\r\n```\r\n# myblog.ini （项目的uwsgi配置）\r\n# daemonize = /root/mysite_uwsgi/myblog.log             # 日志管理\r\n```\r\n2. **如果之前就已经运行了 uwsgi，请一定要先退出再重启 supervisor**\r\n3. *supervisor/supervisord.conf* 文件的注释符号是 **;**，比如 *;[eventlistener:theeventlistenername]*，所以我们所有的配置前面如果有 **;** ，请删掉，比如把 *;[eventlistener:theeventlistenername]* 改成 *[eventlistener:theeventlistenername]* ，不然会视作没有配置。\r\n\r\n本文配置参考了[追梦人物的博客](https://www.zmrenwu.com/courses/hellodjango-blog-tutorial/materials/74/)。","slug":"supervisor + pipenv + uwsgi","published":1,"updated":"2022-08-11T12:49:48.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p61814003btkscd5c592jp","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>目前我部署 <em>django</em> 项目的方式是 <em>uwsgi + nginx</em> ，<em>uwsgi</em> 重启也很方便，只需要写一句 <em>uwsgi –reload xxx.pid</em> 即可，但是即使是一句我也不想输入了，就是比较懒，于是乎就有了 <strong>supervisor</strong> 管理 <em>uwsgi</em> 进程，配置好以后通过 <em>web</em> 网页点一下即可。</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>至于怎么配置 <em>uwsgi</em> 网上教程有很多，这里只讲一下怎么用 <em>supervisor</em> 启动。<br>通过网上的教程可以先安装好 <em>supervisor</em> ，我这里有一篇 <strong><a href=\"https://blog.csdn.net/qq_35068933/article/details/103087914\">ubuntu python3 配置 supervisor</a></strong> 可供参考。我的 <em>supervisor</em> 配置目录结构如下：</p>\n<pre><code>supervisor/\n├── conf.d\n│   ├── myblog.ini   # 自己配的\n├── supervisord.conf   # 初始化生成的配置文件（一开始就有，网上可以找到如何生成）\n└── var\n    ├── log\n    │   ├── myblog-stderr.log      # 后续生成的\n    │   ├── myblog-stdout.log\t   # 后续生成的\n    │   └── supervisord.log   # 后续生成的\n    ├── supervisord.pid   # 后续生成的\n    └── supervisor.sock   # 后续生成的\n</code></pre>\n<p><em>supervisor</em> 文件夹是在 <strong>&#x2F;etc</strong> 下面。<br>首先配置 <strong>supervisor&#x2F;supervisord.conf</strong> 文件，有几个地方改了一下：</p>\n<ol>\n<li>让 socket 文件生成在 ~&#x2F;etc&#x2F;supervisor&#x2F;var&#x2F; 目录下。<strong>注意 supervisor 不支持将 ~ 展开为用户 home 目录，所以要用绝对路径指定。我这里是 <em>root</em> 用户，这样直接写就可以，其他用户的路径类似于 &#x2F;home&#x2F;username&#x2F;etc&#x2F;supervisor…</strong>**</li>\n</ol>\n<pre><code>[unix_http_server]\nfile=/etc/supervisor/var/supervisor.sock   ; the path to the socket file\n</code></pre>\n<ol start=\"2\">\n<li>修改 [inet_http_server] ，这一步主要是可以通过外部浏览器来进行控制 supervisor 进程，其中 端口号像我这样配置成 port&#x3D;*:9001 ，就可以在外网通过服务器的域名下的 <em>9001</em> 端口来控制，默认是没有密码的，但是最好配置一下</li>\n</ol>\n<pre><code>[inet_http_server]         ; inet (TCP) server disabled by default\nport=*:9001        ; ip_address:port specifier, *:port for all iface\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n</code></pre>\n<ol start=\"3\">\n<li>类似的修改 [supervisord] 板块下的 logfile 和 pidfile 文件的路径，还有 user 改为系统用户，这样 supervisor 启动的进程将以系统用户运行，避免可能的权限问题,**注意 supervisor 不支持将 ~ 展开为用户 home 目录，所以要用绝对路径指定。我这里是 <em>root</em> 用户，这样直接写就可以，其他用户的路径类似于 &#x2F;home&#x2F;username&#x2F;etc&#x2F;supervisor…**：</li>\n</ol>\n<pre><code>[supervisord]\nlogfile=/etc/supervisor/var/log/supervisord.log ; main log file; default $CWD/supervisord.log\npidfile=/etc/supervisor/var/supervisord.pid ; supervisord pidfile; default supervisord.pid\nuser=root            ; setuid to this UNIX account at startup; recommended if root\n</code></pre>\n<ol start=\"4\">\n<li>[supervisorctl]板块下：</li>\n</ol>\n<pre><code>[supervisorctl]\nserverurl=unix:///etc/supervisor/var/supervisor.sock ; use a unix:// URL  for a unix socket\n</code></pre>\n<ol start=\"5\">\n<li>[include] 版块,将 &#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F; 目录下所有以 .ini 结尾的文件内容包含到配置中来，这样便于配置的模块化管理。</li>\n</ol>\n<pre><code>[include]\nfiles = /etc/supervisor/conf.d/*.ini\n</code></pre>\n<ol start=\"7\">\n<li>配置 <strong>管理uwsgi进程</strong> 的配置文件<br>在 <strong>&#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;</strong> 目录下新建一个配置文件，名字以 <em>.ini</em> 结尾就好，是因为我们在 <em>supervisor.conf</em> 文件中修改了配置 [include] ，所以 <em>supervisor</em> 会搜索  <em>&#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;</em> 目录下所有以 <em>.ini</em> 结尾的文件。<br>这是我的配置文件</li>\n</ol>\n<pre><code>[program:myblog]\ncommand=pipenv run uwsgi --ini /root/mysite_uwsgi/myblog.ini\ndirectory=/root/code/Workspace/ginta.top\nautostart=true\nautorestart=unexpected\nuser=root\nstdout_logfile=/etc/supervisor/var/log/myblog-stdout.log\nstderr_logfile=/etc/supervisor/var/log/myblog-stderr.log\n</code></pre>\n<p>program:hellodjango-blog-tutorial] 指明运行应用的进程，名为 hellodjango-blog-tutorial。</p>\n<p>command 为进程启动时执行的命令， 我的环境是用 pipenv 来进行包管理的所以要这样执行，如果没有用包管理直接执行 <code>uwsgi --ini /root/mysite_uwsgi/myblog.ini</code> 即可，也就是 <em>uwsgi</em> 的启动命令。</p>\n<p>directory 指定执行命令时所在的目录。</p>\n<p>autostart 随 Supervisor 启动自动启动进程。</p>\n<p>autorestart 进程意外退出时重启。</p>\n<p>user 进程运行的用户，防止权限问题。</p>\n<p>stdout_logfile，stderr_logfile 日志输出文件。<br>6. 启动 Supervisor</p>\n<pre><code>supervisord -c ~/etc/supervisord.conf\n</code></pre>\n<ol start=\"7\">\n<li>进入 supervisorctl 进程管理控制台：</li>\n</ol>\n<pre><code>supervisorctl -c ~/etc/supervisord.conf\n</code></pre>\n<p>执行 update 命令更新配置文件并启动应用。</p>\n<p>浏览器输入域名，可以看到服务已经正常启动了。</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ol>\n<li>由于我们 <strong>supervisor</strong> 有配置项目的日志，所以如果在 <strong>uwsgi.ini</strong> 中配置有日志，请把它注释掉</li>\n</ol>\n<pre><code># myblog.ini （项目的uwsgi配置）\n# daemonize = /root/mysite_uwsgi/myblog.log             # 日志管理\n</code></pre>\n<ol start=\"2\">\n<li><strong>如果之前就已经运行了 uwsgi，请一定要先退出再重启 supervisor</strong></li>\n<li><em>supervisor&#x2F;supervisord.conf</em> 文件的注释符号是 **;**，比如 *;[eventlistener:theeventlistenername]*，所以我们所有的配置前面如果有 <strong>;</strong> ，请删掉，比如把 <em>;[eventlistener:theeventlistenername]</em> 改成 <em>[eventlistener:theeventlistenername]</em> ，不然会视作没有配置。</li>\n</ol>\n<p>本文配置参考了<a href=\"https://www.zmrenwu.com/courses/hellodjango-blog-tutorial/materials/74/\">追梦人物的博客</a>。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>目前我部署 <em>django</em> 项目的方式是 <em>uwsgi + nginx</em> ，<em>uwsgi</em> 重启也很方便，只需要写一句 <em>uwsgi –reload xxx.pid</em> 即可，但是即使是一句我也不想输入了，就是比较懒，于是乎就有了 <strong>supervisor</strong> 管理 <em>uwsgi</em> 进程，配置好以后通过 <em>web</em> 网页点一下即可。</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>至于怎么配置 <em>uwsgi</em> 网上教程有很多，这里只讲一下怎么用 <em>supervisor</em> 启动。<br>通过网上的教程可以先安装好 <em>supervisor</em> ，我这里有一篇 <strong><a href=\"https://blog.csdn.net/qq_35068933/article/details/103087914\">ubuntu python3 配置 supervisor</a></strong> 可供参考。我的 <em>supervisor</em> 配置目录结构如下：</p>\n<pre><code>supervisor/\n├── conf.d\n│   ├── myblog.ini   # 自己配的\n├── supervisord.conf   # 初始化生成的配置文件（一开始就有，网上可以找到如何生成）\n└── var\n    ├── log\n    │   ├── myblog-stderr.log      # 后续生成的\n    │   ├── myblog-stdout.log\t   # 后续生成的\n    │   └── supervisord.log   # 后续生成的\n    ├── supervisord.pid   # 后续生成的\n    └── supervisor.sock   # 后续生成的\n</code></pre>\n<p><em>supervisor</em> 文件夹是在 <strong>&#x2F;etc</strong> 下面。<br>首先配置 <strong>supervisor&#x2F;supervisord.conf</strong> 文件，有几个地方改了一下：</p>\n<ol>\n<li>让 socket 文件生成在 ~&#x2F;etc&#x2F;supervisor&#x2F;var&#x2F; 目录下。<strong>注意 supervisor 不支持将 ~ 展开为用户 home 目录，所以要用绝对路径指定。我这里是 <em>root</em> 用户，这样直接写就可以，其他用户的路径类似于 &#x2F;home&#x2F;username&#x2F;etc&#x2F;supervisor…</strong>**</li>\n</ol>\n<pre><code>[unix_http_server]\nfile=/etc/supervisor/var/supervisor.sock   ; the path to the socket file\n</code></pre>\n<ol start=\"2\">\n<li>修改 [inet_http_server] ，这一步主要是可以通过外部浏览器来进行控制 supervisor 进程，其中 端口号像我这样配置成 port&#x3D;*:9001 ，就可以在外网通过服务器的域名下的 <em>9001</em> 端口来控制，默认是没有密码的，但是最好配置一下</li>\n</ol>\n<pre><code>[inet_http_server]         ; inet (TCP) server disabled by default\nport=*:9001        ; ip_address:port specifier, *:port for all iface\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n</code></pre>\n<ol start=\"3\">\n<li>类似的修改 [supervisord] 板块下的 logfile 和 pidfile 文件的路径，还有 user 改为系统用户，这样 supervisor 启动的进程将以系统用户运行，避免可能的权限问题,**注意 supervisor 不支持将 ~ 展开为用户 home 目录，所以要用绝对路径指定。我这里是 <em>root</em> 用户，这样直接写就可以，其他用户的路径类似于 &#x2F;home&#x2F;username&#x2F;etc&#x2F;supervisor…**：</li>\n</ol>\n<pre><code>[supervisord]\nlogfile=/etc/supervisor/var/log/supervisord.log ; main log file; default $CWD/supervisord.log\npidfile=/etc/supervisor/var/supervisord.pid ; supervisord pidfile; default supervisord.pid\nuser=root            ; setuid to this UNIX account at startup; recommended if root\n</code></pre>\n<ol start=\"4\">\n<li>[supervisorctl]板块下：</li>\n</ol>\n<pre><code>[supervisorctl]\nserverurl=unix:///etc/supervisor/var/supervisor.sock ; use a unix:// URL  for a unix socket\n</code></pre>\n<ol start=\"5\">\n<li>[include] 版块,将 &#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F; 目录下所有以 .ini 结尾的文件内容包含到配置中来，这样便于配置的模块化管理。</li>\n</ol>\n<pre><code>[include]\nfiles = /etc/supervisor/conf.d/*.ini\n</code></pre>\n<ol start=\"7\">\n<li>配置 <strong>管理uwsgi进程</strong> 的配置文件<br>在 <strong>&#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;</strong> 目录下新建一个配置文件，名字以 <em>.ini</em> 结尾就好，是因为我们在 <em>supervisor.conf</em> 文件中修改了配置 [include] ，所以 <em>supervisor</em> 会搜索  <em>&#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;</em> 目录下所有以 <em>.ini</em> 结尾的文件。<br>这是我的配置文件</li>\n</ol>\n<pre><code>[program:myblog]\ncommand=pipenv run uwsgi --ini /root/mysite_uwsgi/myblog.ini\ndirectory=/root/code/Workspace/ginta.top\nautostart=true\nautorestart=unexpected\nuser=root\nstdout_logfile=/etc/supervisor/var/log/myblog-stdout.log\nstderr_logfile=/etc/supervisor/var/log/myblog-stderr.log\n</code></pre>\n<p>program:hellodjango-blog-tutorial] 指明运行应用的进程，名为 hellodjango-blog-tutorial。</p>\n<p>command 为进程启动时执行的命令， 我的环境是用 pipenv 来进行包管理的所以要这样执行，如果没有用包管理直接执行 <code>uwsgi --ini /root/mysite_uwsgi/myblog.ini</code> 即可，也就是 <em>uwsgi</em> 的启动命令。</p>\n<p>directory 指定执行命令时所在的目录。</p>\n<p>autostart 随 Supervisor 启动自动启动进程。</p>\n<p>autorestart 进程意外退出时重启。</p>\n<p>user 进程运行的用户，防止权限问题。</p>\n<p>stdout_logfile，stderr_logfile 日志输出文件。<br>6. 启动 Supervisor</p>\n<pre><code>supervisord -c ~/etc/supervisord.conf\n</code></pre>\n<ol start=\"7\">\n<li>进入 supervisorctl 进程管理控制台：</li>\n</ol>\n<pre><code>supervisorctl -c ~/etc/supervisord.conf\n</code></pre>\n<p>执行 update 命令更新配置文件并启动应用。</p>\n<p>浏览器输入域名，可以看到服务已经正常启动了。</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ol>\n<li>由于我们 <strong>supervisor</strong> 有配置项目的日志，所以如果在 <strong>uwsgi.ini</strong> 中配置有日志，请把它注释掉</li>\n</ol>\n<pre><code># myblog.ini （项目的uwsgi配置）\n# daemonize = /root/mysite_uwsgi/myblog.log             # 日志管理\n</code></pre>\n<ol start=\"2\">\n<li><strong>如果之前就已经运行了 uwsgi，请一定要先退出再重启 supervisor</strong></li>\n<li><em>supervisor&#x2F;supervisord.conf</em> 文件的注释符号是 **;**，比如 *;[eventlistener:theeventlistenername]*，所以我们所有的配置前面如果有 <strong>;</strong> ，请删掉，比如把 <em>;[eventlistener:theeventlistenername]</em> 改成 <em>[eventlistener:theeventlistenername]</em> ，不然会视作没有配置。</li>\n</ol>\n<p>本文配置参考了<a href=\"https://www.zmrenwu.com/courses/hellodjango-blog-tutorial/materials/74/\">追梦人物的博客</a>。</p>\n"},{"title":"ubuntu python3.7 安装uwsgi 常见错误","date":"2019-11-26T18:03:56.000Z","author":"Ginta","img":"http://img.ginta.top/fantasy2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/fantasy2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"### 前言\r\n由于需要在 *ubuntu18.04* 系统部署 *django* 项目，用到了 *uWSGI* 库，在安装的时候遇到了几个问题在这里记录一下原因，并附上解决方法。\r\n\r\n### Retrying (Retry(total=4, connect=None....\r\n这是比较常见的问题，原因是安装超时，因为我们下载的库的源一般都是在国外，涉及到翻墙问题，解决方法是更换国内的源，注明的有阿里，豆瓣等，这里我用到的是豆瓣源:\r\n```pip install -i https://pypi.doubanio.com/simple uwsgi```\r\n前面 **-i** 是指明更换源路径，最后的 **uwsgi** 就是本次我要安装的 **uWSGI** 库\r\n\r\n### error: invalid command 'bdist_wheel'\r\n这个问题一般是 **pip** 版本比较老了，更新一下即可\r\n尝试用以下命令升级以下pip版本后再试一下:\r\npython -m pip install --upgrade pip\r\n如果装着python3.X ，那么就用:\r\npython3 -m pip install --upgrade pip\r\n\r\n\r\n### fatal error: Python.h\r\n网上说的是因为环境不完整，安装如下这个包：\r\npython2：\r\n```sudo apt-get install python-dev```\r\npython3:\r\n```sudo apt-get install python3-dev```\r\n确实是这个问题，不过可能是我的 *python* 版本比较新吧，是 *python3.7.2* ，也可能是其他原因总之最后安装 *uWSGI* 还是失败了，网上还有一个库是真的比较新版本的 *python3.7+* ：\r\n```sudo apt install python3.7-dev```\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190824103651540.png)\r\n安装成功~","source":"_posts/ubuntu python3.7 安装uwsgi 常见错误.md","raw":"---\ntitle: ubuntu python3.7 安装uwsgi 常见错误\ndate: 2019-11-27 02:03:56\nauthor: Ginta\nimg: http://img.ginta.top/fantasy2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/fantasy2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - python\ncategories: python\n---\n### 前言\r\n由于需要在 *ubuntu18.04* 系统部署 *django* 项目，用到了 *uWSGI* 库，在安装的时候遇到了几个问题在这里记录一下原因，并附上解决方法。\r\n\r\n### Retrying (Retry(total=4, connect=None....\r\n这是比较常见的问题，原因是安装超时，因为我们下载的库的源一般都是在国外，涉及到翻墙问题，解决方法是更换国内的源，注明的有阿里，豆瓣等，这里我用到的是豆瓣源:\r\n```pip install -i https://pypi.doubanio.com/simple uwsgi```\r\n前面 **-i** 是指明更换源路径，最后的 **uwsgi** 就是本次我要安装的 **uWSGI** 库\r\n\r\n### error: invalid command 'bdist_wheel'\r\n这个问题一般是 **pip** 版本比较老了，更新一下即可\r\n尝试用以下命令升级以下pip版本后再试一下:\r\npython -m pip install --upgrade pip\r\n如果装着python3.X ，那么就用:\r\npython3 -m pip install --upgrade pip\r\n\r\n\r\n### fatal error: Python.h\r\n网上说的是因为环境不完整，安装如下这个包：\r\npython2：\r\n```sudo apt-get install python-dev```\r\npython3:\r\n```sudo apt-get install python3-dev```\r\n确实是这个问题，不过可能是我的 *python* 版本比较新吧，是 *python3.7.2* ，也可能是其他原因总之最后安装 *uWSGI* 还是失败了，网上还有一个库是真的比较新版本的 *python3.7+* ：\r\n```sudo apt install python3.7-dev```\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190824103651540.png)\r\n安装成功~","slug":"ubuntu python3.7 安装uwsgi 常见错误","published":1,"updated":"2022-08-11T12:49:48.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p61814003gtksc3z1v2rwu","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>由于需要在 <em>ubuntu18.04</em> 系统部署 <em>django</em> 项目，用到了 <em>uWSGI</em> 库，在安装的时候遇到了几个问题在这里记录一下原因，并附上解决方法。</p>\n<h3 id=\"Retrying-Retry-total-x3D-4-connect-x3D-None…\"><a href=\"#Retrying-Retry-total-x3D-4-connect-x3D-None…\" class=\"headerlink\" title=\"Retrying (Retry(total&#x3D;4, connect&#x3D;None….\"></a>Retrying (Retry(total&#x3D;4, connect&#x3D;None….</h3><p>这是比较常见的问题，原因是安装超时，因为我们下载的库的源一般都是在国外，涉及到翻墙问题，解决方法是更换国内的源，注明的有阿里，豆瓣等，这里我用到的是豆瓣源:<br><code>pip install -i https://pypi.doubanio.com/simple uwsgi</code><br>前面 <strong>-i</strong> 是指明更换源路径，最后的 <strong>uwsgi</strong> 就是本次我要安装的 <strong>uWSGI</strong> 库</p>\n<h3 id=\"error-invalid-command-‘bdist-wheel’\"><a href=\"#error-invalid-command-‘bdist-wheel’\" class=\"headerlink\" title=\"error: invalid command ‘bdist_wheel’\"></a>error: invalid command ‘bdist_wheel’</h3><p>这个问题一般是 <strong>pip</strong> 版本比较老了，更新一下即可<br>尝试用以下命令升级以下pip版本后再试一下:<br>python -m pip install –upgrade pip<br>如果装着python3.X ，那么就用:<br>python3 -m pip install –upgrade pip</p>\n<h3 id=\"fatal-error-Python-h\"><a href=\"#fatal-error-Python-h\" class=\"headerlink\" title=\"fatal error: Python.h\"></a>fatal error: Python.h</h3><p>网上说的是因为环境不完整，安装如下这个包：<br>python2：<br><code>sudo apt-get install python-dev</code><br>python3:<br><code>sudo apt-get install python3-dev</code><br>确实是这个问题，不过可能是我的 <em>python</em> 版本比较新吧，是 <em>python3.7.2</em> ，也可能是其他原因总之最后安装 <em>uWSGI</em> 还是失败了，网上还有一个库是真的比较新版本的 <em>python3.7+</em> ：<br><code>sudo apt install python3.7-dev</code><br><img src=\"https://img-blog.csdnimg.cn/20190824103651540.png\" alt=\"在这里插入图片描述\"><br>安装成功~</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>由于需要在 <em>ubuntu18.04</em> 系统部署 <em>django</em> 项目，用到了 <em>uWSGI</em> 库，在安装的时候遇到了几个问题在这里记录一下原因，并附上解决方法。</p>\n<h3 id=\"Retrying-Retry-total-x3D-4-connect-x3D-None…\"><a href=\"#Retrying-Retry-total-x3D-4-connect-x3D-None…\" class=\"headerlink\" title=\"Retrying (Retry(total&#x3D;4, connect&#x3D;None….\"></a>Retrying (Retry(total&#x3D;4, connect&#x3D;None….</h3><p>这是比较常见的问题，原因是安装超时，因为我们下载的库的源一般都是在国外，涉及到翻墙问题，解决方法是更换国内的源，注明的有阿里，豆瓣等，这里我用到的是豆瓣源:<br><code>pip install -i https://pypi.doubanio.com/simple uwsgi</code><br>前面 <strong>-i</strong> 是指明更换源路径，最后的 <strong>uwsgi</strong> 就是本次我要安装的 <strong>uWSGI</strong> 库</p>\n<h3 id=\"error-invalid-command-‘bdist-wheel’\"><a href=\"#error-invalid-command-‘bdist-wheel’\" class=\"headerlink\" title=\"error: invalid command ‘bdist_wheel’\"></a>error: invalid command ‘bdist_wheel’</h3><p>这个问题一般是 <strong>pip</strong> 版本比较老了，更新一下即可<br>尝试用以下命令升级以下pip版本后再试一下:<br>python -m pip install –upgrade pip<br>如果装着python3.X ，那么就用:<br>python3 -m pip install –upgrade pip</p>\n<h3 id=\"fatal-error-Python-h\"><a href=\"#fatal-error-Python-h\" class=\"headerlink\" title=\"fatal error: Python.h\"></a>fatal error: Python.h</h3><p>网上说的是因为环境不完整，安装如下这个包：<br>python2：<br><code>sudo apt-get install python-dev</code><br>python3:<br><code>sudo apt-get install python3-dev</code><br>确实是这个问题，不过可能是我的 <em>python</em> 版本比较新吧，是 <em>python3.7.2</em> ，也可能是其他原因总之最后安装 <em>uWSGI</em> 还是失败了，网上还有一个库是真的比较新版本的 <em>python3.7+</em> ：<br><code>sudo apt install python3.7-dev</code><br><img src=\"https://img-blog.csdnimg.cn/20190824103651540.png\" alt=\"在这里插入图片描述\"><br>安装成功~</p>\n"},{"title":"ubuntu 部署 django2.0 + uwsgi + nginx","date":"2019-11-26T19:02:12.000Z","author":"Ginta","img":"http://img.ginta.top/fantasy2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/fantasy2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"###\r\n*django* 默认的服务是单进程的，而且处理静态文件也比较慢，我们采用 **django + uwsgi + nginx** 来提高并发数的同时减少静态文件的访问时间。\r\n\r\n### nginx\r\n1. 安装nginx\r\n`apt-get install nginx`\r\n2. 进入 **/etc/nginx** 路径下可以看到两个文件夹，**sites-available** 和 **sites-enabled**，前者是网站的可用配置文件夹，后者是启用的配置，一般都是把配置文件放到 **sites-available** 再通过软链接的方式在 **sites-enabled** 中启用配置。\r\n3. 进入 **sites-available** 文件夹中，新建配置文件arrange.conf，内容如下\r\n```\r\nserver {\r\n    listen 80;     # 网站对外的端口为80\r\n    server_name ginta.top;  # 服务名字（一般是用域名方便理解）\r\n    charset utf-8;   # 字符编码\r\n\r\n    client_max_body_size 75M;     # 上传文件的最大尺寸\r\n\r\n    location /static {\r\n        alias /home/admin/code/Workspace/arrange/static;      # 静态文件的访问路径\r\n    }\r\n    \r\n    location /media{\r\n        alias /home/admin/code/Workspace/arrange/media;      # 媒体资源的访问路径\r\n    }\r\n\r\n    location / {                  # 发送请求给django，nginx处理不了，我们要转发给uwsgi，除了 static 和 media 其他的转发给uwsgi\r\n        uwsgi_pass 127.0.0.1:8001;\r\n        include /etc/nginx/uwsgi_params;  # uwsgi协议配置文件，类似于nginx.conf，django没有，但是nginx下有个这样的文件\r\n    }\r\n}\r\n```\r\n4. 删除 **sites-enabled** 文件夹下的default文件，否则服务可能无法启动，卡在nginx欢迎界面\r\n\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190826214047909.png)\r\n\r\n\r\n### uWSGI\r\n1. 安装uWSGI，可能出现的错误在这里有 [解决方式](https://blog.csdn.net/qq_35068933/article/details/100049788). \r\n```pip install uwsgi```\r\n2. 测试，创建一个 **foobar.py** 的文件，内容如下 :\r\n```\r\ndef application(env, start_response):\r\n    start_response('200 OK', [('Content-Type','text/html')])\r\n    return [b\"Hello World\"]\r\n```\r\n然后通过服务器的 *9090* 端口进行测试\r\n`uwsgi --http :9090 --wsgi-file foobar.py`\r\n访问成功即可。\r\n3. 编写项目uwsgi配置文件\r\n然后选择一个目录新建个文件作为项目的 *uwsgi* 配置文件,我这里是 **arrange.ini**\r\n```\r\n[uwsgi]\r\nchdir = /home/admin/code/Workspace/arrange  # 项目的绝对路径\r\nvirtualenv = /home/admin/code/Envs/blog       # 我这里用的是虚拟环境\r\nmodule = arrange.wsgi:application     # 项目的wsgi，我的项目名是 **arrange**\r\n\r\nmaster = True   #  启动主程序\r\nprocesses = 4  # 使用的进程数\r\nharakiri = 60   # 请求60s超时关闭\r\nmax-requests = 5000    # 请求超过5000进程重启防止内存泄漏\r\n \r\nsocket = 127.0.0.1:8001   # 监听的端口\r\nuid = nginx  #  使用nginx代替root用户 （安全一些）      \r\ngid = nginx  #  使用nginx代替root用户     \r\n\r\npidfile = /home/admin/mysite_uwsgi/master.pid     # 通过 pidfile 对主进程进行关闭，启动或者重启操作\r\ndaemonize = /home/admin/mysite_uwsgi/arrange.log  # 指定日志存放路径\r\nvacuum = True # 当服务器关闭会自动把pidfile和daemonize进程回收\r\n```\r\n4. 启动项目uwsgi\r\n`uwsgi --ini arrange.ini`\r\n5. 进入 **/etc/nginx/** 路径，简历配置文件软链接\r\n`sudo ln -s /etc/nginx/sites-available/arrange.conf /etc/nginx/sites-enabled/arrange.conf`\r\n6. 测试一下nginx有没有问题\r\n`sudo nginx -t`\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190826214422441.png)\r\n出现 **successful** 表示没有问题\r\n7. 重启nginx\r\n`sudo service nginx restart`\r\n\r\n### 补充\r\n**uwsgi** 重启服务,由于我们配置了pidfile路径，所以可以很快捷地重启\r\n`uwsgi --reload /home/admin/mysite_uwsgi/master.pid`\r\n想看看启动没有可以通过 **ps** 指令\r\n`ps -aux | grep uwsgi`\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190826215035845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)","source":"_posts/ubuntu 部署 django2.0 + uwsgi + nginx.md","raw":"---\ntitle: ubuntu 部署 django2.0 + uwsgi + nginx\ndate: 2019-11-27 03:02:12\nauthor: Ginta\nimg: http://img.ginta.top/fantasy2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/fantasy2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - Django\n  - 自动化\n  - uwsgi\ncategories: Django\n---\n###\r\n*django* 默认的服务是单进程的，而且处理静态文件也比较慢，我们采用 **django + uwsgi + nginx** 来提高并发数的同时减少静态文件的访问时间。\r\n\r\n### nginx\r\n1. 安装nginx\r\n`apt-get install nginx`\r\n2. 进入 **/etc/nginx** 路径下可以看到两个文件夹，**sites-available** 和 **sites-enabled**，前者是网站的可用配置文件夹，后者是启用的配置，一般都是把配置文件放到 **sites-available** 再通过软链接的方式在 **sites-enabled** 中启用配置。\r\n3. 进入 **sites-available** 文件夹中，新建配置文件arrange.conf，内容如下\r\n```\r\nserver {\r\n    listen 80;     # 网站对外的端口为80\r\n    server_name ginta.top;  # 服务名字（一般是用域名方便理解）\r\n    charset utf-8;   # 字符编码\r\n\r\n    client_max_body_size 75M;     # 上传文件的最大尺寸\r\n\r\n    location /static {\r\n        alias /home/admin/code/Workspace/arrange/static;      # 静态文件的访问路径\r\n    }\r\n    \r\n    location /media{\r\n        alias /home/admin/code/Workspace/arrange/media;      # 媒体资源的访问路径\r\n    }\r\n\r\n    location / {                  # 发送请求给django，nginx处理不了，我们要转发给uwsgi，除了 static 和 media 其他的转发给uwsgi\r\n        uwsgi_pass 127.0.0.1:8001;\r\n        include /etc/nginx/uwsgi_params;  # uwsgi协议配置文件，类似于nginx.conf，django没有，但是nginx下有个这样的文件\r\n    }\r\n}\r\n```\r\n4. 删除 **sites-enabled** 文件夹下的default文件，否则服务可能无法启动，卡在nginx欢迎界面\r\n\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190826214047909.png)\r\n\r\n\r\n### uWSGI\r\n1. 安装uWSGI，可能出现的错误在这里有 [解决方式](https://blog.csdn.net/qq_35068933/article/details/100049788). \r\n```pip install uwsgi```\r\n2. 测试，创建一个 **foobar.py** 的文件，内容如下 :\r\n```\r\ndef application(env, start_response):\r\n    start_response('200 OK', [('Content-Type','text/html')])\r\n    return [b\"Hello World\"]\r\n```\r\n然后通过服务器的 *9090* 端口进行测试\r\n`uwsgi --http :9090 --wsgi-file foobar.py`\r\n访问成功即可。\r\n3. 编写项目uwsgi配置文件\r\n然后选择一个目录新建个文件作为项目的 *uwsgi* 配置文件,我这里是 **arrange.ini**\r\n```\r\n[uwsgi]\r\nchdir = /home/admin/code/Workspace/arrange  # 项目的绝对路径\r\nvirtualenv = /home/admin/code/Envs/blog       # 我这里用的是虚拟环境\r\nmodule = arrange.wsgi:application     # 项目的wsgi，我的项目名是 **arrange**\r\n\r\nmaster = True   #  启动主程序\r\nprocesses = 4  # 使用的进程数\r\nharakiri = 60   # 请求60s超时关闭\r\nmax-requests = 5000    # 请求超过5000进程重启防止内存泄漏\r\n \r\nsocket = 127.0.0.1:8001   # 监听的端口\r\nuid = nginx  #  使用nginx代替root用户 （安全一些）      \r\ngid = nginx  #  使用nginx代替root用户     \r\n\r\npidfile = /home/admin/mysite_uwsgi/master.pid     # 通过 pidfile 对主进程进行关闭，启动或者重启操作\r\ndaemonize = /home/admin/mysite_uwsgi/arrange.log  # 指定日志存放路径\r\nvacuum = True # 当服务器关闭会自动把pidfile和daemonize进程回收\r\n```\r\n4. 启动项目uwsgi\r\n`uwsgi --ini arrange.ini`\r\n5. 进入 **/etc/nginx/** 路径，简历配置文件软链接\r\n`sudo ln -s /etc/nginx/sites-available/arrange.conf /etc/nginx/sites-enabled/arrange.conf`\r\n6. 测试一下nginx有没有问题\r\n`sudo nginx -t`\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190826214422441.png)\r\n出现 **successful** 表示没有问题\r\n7. 重启nginx\r\n`sudo service nginx restart`\r\n\r\n### 补充\r\n**uwsgi** 重启服务,由于我们配置了pidfile路径，所以可以很快捷地重启\r\n`uwsgi --reload /home/admin/mysite_uwsgi/master.pid`\r\n想看看启动没有可以通过 **ps** 指令\r\n`ps -aux | grep uwsgi`\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190826215035845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)","slug":"ubuntu 部署 django2.0 + uwsgi + nginx","published":1,"updated":"2022-08-11T12:49:48.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p61814003jtkscb44l5aba","content":"<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><p><em>django</em> 默认的服务是单进程的，而且处理静态文件也比较慢，我们采用 <strong>django + uwsgi + nginx</strong> 来提高并发数的同时减少静态文件的访问时间。</p>\n<h3 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h3><ol>\n<li>安装nginx<br><code>apt-get install nginx</code></li>\n<li>进入 <strong>&#x2F;etc&#x2F;nginx</strong> 路径下可以看到两个文件夹，<strong>sites-available</strong> 和 <strong>sites-enabled</strong>，前者是网站的可用配置文件夹，后者是启用的配置，一般都是把配置文件放到 <strong>sites-available</strong> 再通过软链接的方式在 <strong>sites-enabled</strong> 中启用配置。</li>\n<li>进入 <strong>sites-available</strong> 文件夹中，新建配置文件arrange.conf，内容如下</li>\n</ol>\n<pre><code>server &#123;\n    listen 80;     # 网站对外的端口为80\n    server_name ginta.top;  # 服务名字（一般是用域名方便理解）\n    charset utf-8;   # 字符编码\n\n    client_max_body_size 75M;     # 上传文件的最大尺寸\n\n    location /static &#123;\n        alias /home/admin/code/Workspace/arrange/static;      # 静态文件的访问路径\n    &#125;\n    \n    location /media&#123;\n        alias /home/admin/code/Workspace/arrange/media;      # 媒体资源的访问路径\n    &#125;\n\n    location / &#123;                  # 发送请求给django，nginx处理不了，我们要转发给uwsgi，除了 static 和 media 其他的转发给uwsgi\n        uwsgi_pass 127.0.0.1:8001;\n        include /etc/nginx/uwsgi_params;  # uwsgi协议配置文件，类似于nginx.conf，django没有，但是nginx下有个这样的文件\n    &#125;\n&#125;\n</code></pre>\n<ol start=\"4\">\n<li>删除 <strong>sites-enabled</strong> 文件夹下的default文件，否则服务可能无法启动，卡在nginx欢迎界面</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/20190826214047909.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"uWSGI\"><a href=\"#uWSGI\" class=\"headerlink\" title=\"uWSGI\"></a>uWSGI</h3><ol>\n<li>安装uWSGI，可能出现的错误在这里有 <a href=\"https://blog.csdn.net/qq_35068933/article/details/100049788\">解决方式</a>.</li>\n</ol>\n<p><code>pip install uwsgi</code><br>2. 测试，创建一个 <strong>foobar.py</strong> 的文件，内容如下 :</p>\n<pre><code>def application(env, start_response):\n    start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;,&#39;text/html&#39;)])\n    return [b&quot;Hello World&quot;]\n</code></pre>\n<p>然后通过服务器的 <em>9090</em> 端口进行测试<br><code>uwsgi --http :9090 --wsgi-file foobar.py</code><br>访问成功即可。<br>3. 编写项目uwsgi配置文件<br>然后选择一个目录新建个文件作为项目的 <em>uwsgi</em> 配置文件,我这里是 <strong>arrange.ini</strong></p>\n<pre><code>[uwsgi]\nchdir = /home/admin/code/Workspace/arrange  # 项目的绝对路径\nvirtualenv = /home/admin/code/Envs/blog       # 我这里用的是虚拟环境\nmodule = arrange.wsgi:application     # 项目的wsgi，我的项目名是 **arrange**\n\nmaster = True   #  启动主程序\nprocesses = 4  # 使用的进程数\nharakiri = 60   # 请求60s超时关闭\nmax-requests = 5000    # 请求超过5000进程重启防止内存泄漏\n \nsocket = 127.0.0.1:8001   # 监听的端口\nuid = nginx  #  使用nginx代替root用户 （安全一些）      \ngid = nginx  #  使用nginx代替root用户     \n\npidfile = /home/admin/mysite_uwsgi/master.pid     # 通过 pidfile 对主进程进行关闭，启动或者重启操作\ndaemonize = /home/admin/mysite_uwsgi/arrange.log  # 指定日志存放路径\nvacuum = True # 当服务器关闭会自动把pidfile和daemonize进程回收\n</code></pre>\n<ol start=\"4\">\n<li>启动项目uwsgi<br><code>uwsgi --ini arrange.ini</code></li>\n<li>进入 <strong>&#x2F;etc&#x2F;nginx&#x2F;</strong> 路径，简历配置文件软链接<br><code>sudo ln -s /etc/nginx/sites-available/arrange.conf /etc/nginx/sites-enabled/arrange.conf</code></li>\n<li>测试一下nginx有没有问题<br><code>sudo nginx -t</code><br><img src=\"https://img-blog.csdnimg.cn/20190826214422441.png\" alt=\"在这里插入图片描述\"><br>出现 <strong>successful</strong> 表示没有问题</li>\n<li>重启nginx<br><code>sudo service nginx restart</code></li>\n</ol>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p><strong>uwsgi</strong> 重启服务,由于我们配置了pidfile路径，所以可以很快捷地重启<br><code>uwsgi --reload /home/admin/mysite_uwsgi/master.pid</code><br>想看看启动没有可以通过 <strong>ps</strong> 指令<br><code>ps -aux | grep uwsgi</code><br><img src=\"https://img-blog.csdnimg.cn/20190826215035845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><p><em>django</em> 默认的服务是单进程的，而且处理静态文件也比较慢，我们采用 <strong>django + uwsgi + nginx</strong> 来提高并发数的同时减少静态文件的访问时间。</p>\n<h3 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h3><ol>\n<li>安装nginx<br><code>apt-get install nginx</code></li>\n<li>进入 <strong>&#x2F;etc&#x2F;nginx</strong> 路径下可以看到两个文件夹，<strong>sites-available</strong> 和 <strong>sites-enabled</strong>，前者是网站的可用配置文件夹，后者是启用的配置，一般都是把配置文件放到 <strong>sites-available</strong> 再通过软链接的方式在 <strong>sites-enabled</strong> 中启用配置。</li>\n<li>进入 <strong>sites-available</strong> 文件夹中，新建配置文件arrange.conf，内容如下</li>\n</ol>\n<pre><code>server &#123;\n    listen 80;     # 网站对外的端口为80\n    server_name ginta.top;  # 服务名字（一般是用域名方便理解）\n    charset utf-8;   # 字符编码\n\n    client_max_body_size 75M;     # 上传文件的最大尺寸\n\n    location /static &#123;\n        alias /home/admin/code/Workspace/arrange/static;      # 静态文件的访问路径\n    &#125;\n    \n    location /media&#123;\n        alias /home/admin/code/Workspace/arrange/media;      # 媒体资源的访问路径\n    &#125;\n\n    location / &#123;                  # 发送请求给django，nginx处理不了，我们要转发给uwsgi，除了 static 和 media 其他的转发给uwsgi\n        uwsgi_pass 127.0.0.1:8001;\n        include /etc/nginx/uwsgi_params;  # uwsgi协议配置文件，类似于nginx.conf，django没有，但是nginx下有个这样的文件\n    &#125;\n&#125;\n</code></pre>\n<ol start=\"4\">\n<li>删除 <strong>sites-enabled</strong> 文件夹下的default文件，否则服务可能无法启动，卡在nginx欢迎界面</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/20190826214047909.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"uWSGI\"><a href=\"#uWSGI\" class=\"headerlink\" title=\"uWSGI\"></a>uWSGI</h3><ol>\n<li>安装uWSGI，可能出现的错误在这里有 <a href=\"https://blog.csdn.net/qq_35068933/article/details/100049788\">解决方式</a>.</li>\n</ol>\n<p><code>pip install uwsgi</code><br>2. 测试，创建一个 <strong>foobar.py</strong> 的文件，内容如下 :</p>\n<pre><code>def application(env, start_response):\n    start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;,&#39;text/html&#39;)])\n    return [b&quot;Hello World&quot;]\n</code></pre>\n<p>然后通过服务器的 <em>9090</em> 端口进行测试<br><code>uwsgi --http :9090 --wsgi-file foobar.py</code><br>访问成功即可。<br>3. 编写项目uwsgi配置文件<br>然后选择一个目录新建个文件作为项目的 <em>uwsgi</em> 配置文件,我这里是 <strong>arrange.ini</strong></p>\n<pre><code>[uwsgi]\nchdir = /home/admin/code/Workspace/arrange  # 项目的绝对路径\nvirtualenv = /home/admin/code/Envs/blog       # 我这里用的是虚拟环境\nmodule = arrange.wsgi:application     # 项目的wsgi，我的项目名是 **arrange**\n\nmaster = True   #  启动主程序\nprocesses = 4  # 使用的进程数\nharakiri = 60   # 请求60s超时关闭\nmax-requests = 5000    # 请求超过5000进程重启防止内存泄漏\n \nsocket = 127.0.0.1:8001   # 监听的端口\nuid = nginx  #  使用nginx代替root用户 （安全一些）      \ngid = nginx  #  使用nginx代替root用户     \n\npidfile = /home/admin/mysite_uwsgi/master.pid     # 通过 pidfile 对主进程进行关闭，启动或者重启操作\ndaemonize = /home/admin/mysite_uwsgi/arrange.log  # 指定日志存放路径\nvacuum = True # 当服务器关闭会自动把pidfile和daemonize进程回收\n</code></pre>\n<ol start=\"4\">\n<li>启动项目uwsgi<br><code>uwsgi --ini arrange.ini</code></li>\n<li>进入 <strong>&#x2F;etc&#x2F;nginx&#x2F;</strong> 路径，简历配置文件软链接<br><code>sudo ln -s /etc/nginx/sites-available/arrange.conf /etc/nginx/sites-enabled/arrange.conf</code></li>\n<li>测试一下nginx有没有问题<br><code>sudo nginx -t</code><br><img src=\"https://img-blog.csdnimg.cn/20190826214422441.png\" alt=\"在这里插入图片描述\"><br>出现 <strong>successful</strong> 表示没有问题</li>\n<li>重启nginx<br><code>sudo service nginx restart</code></li>\n</ol>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p><strong>uwsgi</strong> 重启服务,由于我们配置了pidfile路径，所以可以很快捷地重启<br><code>uwsgi --reload /home/admin/mysite_uwsgi/master.pid</code><br>想看看启动没有可以通过 <strong>ps</strong> 指令<br><code>ps -aux | grep uwsgi</code><br><img src=\"https://img-blog.csdnimg.cn/20190826215035845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"win10 osg.js 使用","date":"2019-12-03T01:02:07.000Z","author":"Ginta","img":"http://img.ginta.top/dragin1.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/dragin1.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 引言\r\n有位朋友希望可以在win10上部署一个 *osg.js* 服务，虽然在这之前我也没用过 *osg.js* ，不过看了下官方基本的 doc，由于是涉及到美术行业内容不是很懂，不过部署貌似也不复杂。\r\n\r\n## 安装依赖\r\n该工程一共需要2个依赖，一个是 *Git* ，另外就是 *npm*。\r\n首先安装 **Git** ，点击此处的[下载链接](https://github.com/git-for-windows/git/releases/download/v2.24.0.windows.2/Git-2.24.0.2-64-bit.exe)下载安装包，一直下一步就好。其次安装 **npm**，这里参考[廖雪峰教程](https://www.liaoxuefeng.com/wiki/1022910821149312/1023025597810528)就可以。\r\n\r\n## 下一步\r\n这是[官方链接](http://osgjs.org)，部署非常简单，首先在电脑上安装一个 *git* 把代码 *clone* 下来，找一个存放工程的目录，右键，点击 *Git Bash Here*：\r\n\r\n\r\n![](http://img.ginta.top/markdownx/2019/12/02/d520a651-7ef9-416e-8653-2f32b628c933.png)\r\n\r\n然后执行 `$ git clone git://github.com/cedricpinson/osgjs.git`，接下来就可以在目录下看到一个 **osgjs** 文件夹。接下来进入这个文件夹 `$ cd osgjs/`，依次执行四条命令：\r\n\r\n- `npm install -g grunt-cli`\r\n- `npm install`\r\n- `grunt build`\r\n- `grunt serve`\r\n不出意外可以看到这个界面\r\n\r\n![](http://img.ginta.top/markdownx/2019/12/02/57c92fc4-0753-4b90-8308-899de31ad4fd.png)\r\n打开浏览器访问 `http://localhost:9000/` ，然后就可以体验了\r\n\r\n\r\n![](http://img.ginta.top/markdownx/2019/12/02/244e4c99-6b42-4d73-adb6-18dba844ca5a.png)\r\n\r\n虽然不是这个方向，但感觉还是挺不错的。\r\n\r\n## 小结\r\n整个过程还是挺简单的，最费时间的是执行 `grunt serve` 这一步，因为要从其他仓库下载模型，而且还是外网，所以非常耗时，建议采用 **科学上网** 的方式执行。我当时执行这一步的时候真的是失败了N次，但是想着答应要尽力的，最终还是耐心多尝试，最后成功了，挺高兴的。","source":"_posts/win10 osg.js 使用.md","raw":"---\ntitle: win10 osg.js 使用\ndate: 2019-12-03 09:02:07\nauthor: Ginta\nimg: http://img.ginta.top/dragin1.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/dragin1.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: 其他\n---\n## 引言\r\n有位朋友希望可以在win10上部署一个 *osg.js* 服务，虽然在这之前我也没用过 *osg.js* ，不过看了下官方基本的 doc，由于是涉及到美术行业内容不是很懂，不过部署貌似也不复杂。\r\n\r\n## 安装依赖\r\n该工程一共需要2个依赖，一个是 *Git* ，另外就是 *npm*。\r\n首先安装 **Git** ，点击此处的[下载链接](https://github.com/git-for-windows/git/releases/download/v2.24.0.windows.2/Git-2.24.0.2-64-bit.exe)下载安装包，一直下一步就好。其次安装 **npm**，这里参考[廖雪峰教程](https://www.liaoxuefeng.com/wiki/1022910821149312/1023025597810528)就可以。\r\n\r\n## 下一步\r\n这是[官方链接](http://osgjs.org)，部署非常简单，首先在电脑上安装一个 *git* 把代码 *clone* 下来，找一个存放工程的目录，右键，点击 *Git Bash Here*：\r\n\r\n\r\n![](http://img.ginta.top/markdownx/2019/12/02/d520a651-7ef9-416e-8653-2f32b628c933.png)\r\n\r\n然后执行 `$ git clone git://github.com/cedricpinson/osgjs.git`，接下来就可以在目录下看到一个 **osgjs** 文件夹。接下来进入这个文件夹 `$ cd osgjs/`，依次执行四条命令：\r\n\r\n- `npm install -g grunt-cli`\r\n- `npm install`\r\n- `grunt build`\r\n- `grunt serve`\r\n不出意外可以看到这个界面\r\n\r\n![](http://img.ginta.top/markdownx/2019/12/02/57c92fc4-0753-4b90-8308-899de31ad4fd.png)\r\n打开浏览器访问 `http://localhost:9000/` ，然后就可以体验了\r\n\r\n\r\n![](http://img.ginta.top/markdownx/2019/12/02/244e4c99-6b42-4d73-adb6-18dba844ca5a.png)\r\n\r\n虽然不是这个方向，但感觉还是挺不错的。\r\n\r\n## 小结\r\n整个过程还是挺简单的，最费时间的是执行 `grunt serve` 这一步，因为要从其他仓库下载模型，而且还是外网，所以非常耗时，建议采用 **科学上网** 的方式执行。我当时执行这一步的时候真的是失败了N次，但是想着答应要尽力的，最终还是耐心多尝试，最后成功了，挺高兴的。","slug":"win10 osg.js 使用","published":1,"updated":"2022-08-11T12:49:48.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p61815003otksc84f341z1","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>有位朋友希望可以在win10上部署一个 <em>osg.js</em> 服务，虽然在这之前我也没用过 <em>osg.js</em> ，不过看了下官方基本的 doc，由于是涉及到美术行业内容不是很懂，不过部署貌似也不复杂。</p>\n<h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><p>该工程一共需要2个依赖，一个是 <em>Git</em> ，另外就是 <em>npm</em>。<br>首先安装 <strong>Git</strong> ，点击此处的<a href=\"https://github.com/git-for-windows/git/releases/download/v2.24.0.windows.2/Git-2.24.0.2-64-bit.exe\">下载链接</a>下载安装包，一直下一步就好。其次安装 <strong>npm</strong>，这里参考<a href=\"https://www.liaoxuefeng.com/wiki/1022910821149312/1023025597810528\">廖雪峰教程</a>就可以。</p>\n<h2 id=\"下一步\"><a href=\"#下一步\" class=\"headerlink\" title=\"下一步\"></a>下一步</h2><p>这是<a href=\"http://osgjs.org/\">官方链接</a>，部署非常简单，首先在电脑上安装一个 <em>git</em> 把代码 <em>clone</em> 下来，找一个存放工程的目录，右键，点击 <em>Git Bash Here</em>：</p>\n<p><img src=\"http://img.ginta.top/markdownx/2019/12/02/d520a651-7ef9-416e-8653-2f32b628c933.png\"></p>\n<p>然后执行 <code>$ git clone git://github.com/cedricpinson/osgjs.git</code>，接下来就可以在目录下看到一个 <strong>osgjs</strong> 文件夹。接下来进入这个文件夹 <code>$ cd osgjs/</code>，依次执行四条命令：</p>\n<ul>\n<li><code>npm install -g grunt-cli</code></li>\n<li><code>npm install</code></li>\n<li><code>grunt build</code></li>\n<li><code>grunt serve</code><br>不出意外可以看到这个界面</li>\n</ul>\n<p><img src=\"http://img.ginta.top/markdownx/2019/12/02/57c92fc4-0753-4b90-8308-899de31ad4fd.png\"><br>打开浏览器访问 <code>http://localhost:9000/</code> ，然后就可以体验了</p>\n<p><img src=\"http://img.ginta.top/markdownx/2019/12/02/244e4c99-6b42-4d73-adb6-18dba844ca5a.png\"></p>\n<p>虽然不是这个方向，但感觉还是挺不错的。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>整个过程还是挺简单的，最费时间的是执行 <code>grunt serve</code> 这一步，因为要从其他仓库下载模型，而且还是外网，所以非常耗时，建议采用 <strong>科学上网</strong> 的方式执行。我当时执行这一步的时候真的是失败了N次，但是想着答应要尽力的，最终还是耐心多尝试，最后成功了，挺高兴的。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>有位朋友希望可以在win10上部署一个 <em>osg.js</em> 服务，虽然在这之前我也没用过 <em>osg.js</em> ，不过看了下官方基本的 doc，由于是涉及到美术行业内容不是很懂，不过部署貌似也不复杂。</p>\n<h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><p>该工程一共需要2个依赖，一个是 <em>Git</em> ，另外就是 <em>npm</em>。<br>首先安装 <strong>Git</strong> ，点击此处的<a href=\"https://github.com/git-for-windows/git/releases/download/v2.24.0.windows.2/Git-2.24.0.2-64-bit.exe\">下载链接</a>下载安装包，一直下一步就好。其次安装 <strong>npm</strong>，这里参考<a href=\"https://www.liaoxuefeng.com/wiki/1022910821149312/1023025597810528\">廖雪峰教程</a>就可以。</p>\n<h2 id=\"下一步\"><a href=\"#下一步\" class=\"headerlink\" title=\"下一步\"></a>下一步</h2><p>这是<a href=\"http://osgjs.org/\">官方链接</a>，部署非常简单，首先在电脑上安装一个 <em>git</em> 把代码 <em>clone</em> 下来，找一个存放工程的目录，右键，点击 <em>Git Bash Here</em>：</p>\n<p><img src=\"http://img.ginta.top/markdownx/2019/12/02/d520a651-7ef9-416e-8653-2f32b628c933.png\"></p>\n<p>然后执行 <code>$ git clone git://github.com/cedricpinson/osgjs.git</code>，接下来就可以在目录下看到一个 <strong>osgjs</strong> 文件夹。接下来进入这个文件夹 <code>$ cd osgjs/</code>，依次执行四条命令：</p>\n<ul>\n<li><code>npm install -g grunt-cli</code></li>\n<li><code>npm install</code></li>\n<li><code>grunt build</code></li>\n<li><code>grunt serve</code><br>不出意外可以看到这个界面</li>\n</ul>\n<p><img src=\"http://img.ginta.top/markdownx/2019/12/02/57c92fc4-0753-4b90-8308-899de31ad4fd.png\"><br>打开浏览器访问 <code>http://localhost:9000/</code> ，然后就可以体验了</p>\n<p><img src=\"http://img.ginta.top/markdownx/2019/12/02/244e4c99-6b42-4d73-adb6-18dba844ca5a.png\"></p>\n<p>虽然不是这个方向，但感觉还是挺不错的。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>整个过程还是挺简单的，最费时间的是执行 <code>grunt serve</code> 这一步，因为要从其他仓库下载模型，而且还是外网，所以非常耗时，建议采用 <strong>科学上网</strong> 的方式执行。我当时执行这一步的时候真的是失败了N次，但是想着答应要尽力的，最终还是耐心多尝试，最后成功了，挺高兴的。</p>\n"},{"title":"windows 安装 helm","date":"2021-07-01T14:59:28.000Z","author":"Ginta","img":"http://img.ginta.top/fantasy2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/fantasy2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 安装\n到 [helm的Github仓库](https://github.com/helm/helm/releases) 找到\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210701225823848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210701225836183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\n解压后把这个目录加入环境变量就可以了\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210701230115822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\n","source":"_posts/windows 安装 helm.md","raw":"---\ntitle: windows 安装 helm\ndate: 2021-07-01 22:59:28\nauthor: Ginta\nimg: http://img.ginta.top/fantasy2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/fantasy2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - docker\n  - windows\n  - k8s\ncategories: 其他\n---\n## 安装\n到 [helm的Github仓库](https://github.com/helm/helm/releases) 找到\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210701225823848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210701225836183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\n解压后把这个目录加入环境变量就可以了\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210701230115822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\n","slug":"windows 安装 helm","published":1,"updated":"2022-08-11T12:49:48.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p61815003rtksc9pp998th","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>到 <a href=\"https://github.com/helm/helm/releases\">helm的Github仓库</a> 找到<br><img src=\"https://img-blog.csdnimg.cn/20210701225823848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20210701225836183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>解压后把这个目录加入环境变量就可以了<br><img src=\"https://img-blog.csdnimg.cn/20210701230115822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>到 <a href=\"https://github.com/helm/helm/releases\">helm的Github仓库</a> 找到<br><img src=\"https://img-blog.csdnimg.cn/20210701225823848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20210701225836183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>解压后把这个目录加入环境变量就可以了<br><img src=\"https://img-blog.csdnimg.cn/20210701230115822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"windows终端命令行下使用网络代理","date":"2020-05-04T18:44:02.000Z","author":"Ginta","img":"http://img.ginta.top/huoying1.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/huoying1.jpg","toc":false,"mathjax":false,"summary":null,"_content":"1. 右键打开 *ShadowsocksR* 的 **选项设置**\r\n\r\n\r\n![](http://img.ginta.top/markdownx/2020/05/02/71045421-767e-438f-91a1-3e3d5be60fff.png)\r\n\r\n\r\n2. 设置你的HTTP和HTTPS的代理端口\r\n\r\n![](http://img.ginta.top/markdownx/2020/05/02/59a20c57-2d53-40fb-b559-93881dbe6f56.png)\r\n\r\n\r\n3. 打开cmd窗口，设置代理变量\r\n```\r\nset HTTP_PROXY=http://127.0.0.1:1080\r\nset HTTPS_PROXY=http://127.0.0.1:1080\r\n```\r\n如果设置了用户名和密码\r\n```\r\nset HTTP_PROXY=http://proxy.com:port\r\nset HTTP_PROXY_USER=username\r\nset HTTP_PROXY_PASS=password\r\n\r\nset HTTPS_PROXY=http://proxy.com:port\r\nset HTTPS_PROXY_USER=username\r\nset HTTPS_PROXY_PASS=password\r\n```\r\n上面命令的作用是设置环境变量，不用担心，这种环境变量只会持续到cmd窗口关闭，不是系统环境变量。\r\n\r\n如何取消代理呢:\r\n```\r\nnetsh winhttp reset proxy\r\n```","source":"_posts/windows终端命令行下使用网络代理.md","raw":"---\ntitle: windows终端命令行下使用网络代理\ndate: 2020-05-05 02:44:02\nauthor: Ginta\nimg: http://img.ginta.top/huoying1.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/huoying1.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: 其他\n---\n1. 右键打开 *ShadowsocksR* 的 **选项设置**\r\n\r\n\r\n![](http://img.ginta.top/markdownx/2020/05/02/71045421-767e-438f-91a1-3e3d5be60fff.png)\r\n\r\n\r\n2. 设置你的HTTP和HTTPS的代理端口\r\n\r\n![](http://img.ginta.top/markdownx/2020/05/02/59a20c57-2d53-40fb-b559-93881dbe6f56.png)\r\n\r\n\r\n3. 打开cmd窗口，设置代理变量\r\n```\r\nset HTTP_PROXY=http://127.0.0.1:1080\r\nset HTTPS_PROXY=http://127.0.0.1:1080\r\n```\r\n如果设置了用户名和密码\r\n```\r\nset HTTP_PROXY=http://proxy.com:port\r\nset HTTP_PROXY_USER=username\r\nset HTTP_PROXY_PASS=password\r\n\r\nset HTTPS_PROXY=http://proxy.com:port\r\nset HTTPS_PROXY_USER=username\r\nset HTTPS_PROXY_PASS=password\r\n```\r\n上面命令的作用是设置环境变量，不用担心，这种环境变量只会持续到cmd窗口关闭，不是系统环境变量。\r\n\r\n如何取消代理呢:\r\n```\r\nnetsh winhttp reset proxy\r\n```","slug":"windows终端命令行下使用网络代理","published":1,"updated":"2022-08-11T12:49:48.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p61815003utkschguwc3dc","content":"<ol>\n<li>右键打开 <em>ShadowsocksR</em> 的 <strong>选项设置</strong></li>\n</ol>\n<p><img src=\"http://img.ginta.top/markdownx/2020/05/02/71045421-767e-438f-91a1-3e3d5be60fff.png\"></p>\n<ol start=\"2\">\n<li>设置你的HTTP和HTTPS的代理端口</li>\n</ol>\n<p><img src=\"http://img.ginta.top/markdownx/2020/05/02/59a20c57-2d53-40fb-b559-93881dbe6f56.png\"></p>\n<ol start=\"3\">\n<li>打开cmd窗口，设置代理变量</li>\n</ol>\n<pre><code>set HTTP_PROXY=http://127.0.0.1:1080\nset HTTPS_PROXY=http://127.0.0.1:1080\n</code></pre>\n<p>如果设置了用户名和密码</p>\n<pre><code>set HTTP_PROXY=http://proxy.com:port\nset HTTP_PROXY_USER=username\nset HTTP_PROXY_PASS=password\n\nset HTTPS_PROXY=http://proxy.com:port\nset HTTPS_PROXY_USER=username\nset HTTPS_PROXY_PASS=password\n</code></pre>\n<p>上面命令的作用是设置环境变量，不用担心，这种环境变量只会持续到cmd窗口关闭，不是系统环境变量。</p>\n<p>如何取消代理呢:</p>\n<pre><code>netsh winhttp reset proxy\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<ol>\n<li>右键打开 <em>ShadowsocksR</em> 的 <strong>选项设置</strong></li>\n</ol>\n<p><img src=\"http://img.ginta.top/markdownx/2020/05/02/71045421-767e-438f-91a1-3e3d5be60fff.png\"></p>\n<ol start=\"2\">\n<li>设置你的HTTP和HTTPS的代理端口</li>\n</ol>\n<p><img src=\"http://img.ginta.top/markdownx/2020/05/02/59a20c57-2d53-40fb-b559-93881dbe6f56.png\"></p>\n<ol start=\"3\">\n<li>打开cmd窗口，设置代理变量</li>\n</ol>\n<pre><code>set HTTP_PROXY=http://127.0.0.1:1080\nset HTTPS_PROXY=http://127.0.0.1:1080\n</code></pre>\n<p>如果设置了用户名和密码</p>\n<pre><code>set HTTP_PROXY=http://proxy.com:port\nset HTTP_PROXY_USER=username\nset HTTP_PROXY_PASS=password\n\nset HTTPS_PROXY=http://proxy.com:port\nset HTTPS_PROXY_USER=username\nset HTTPS_PROXY_PASS=password\n</code></pre>\n<p>上面命令的作用是设置环境变量，不用担心，这种环境变量只会持续到cmd窗口关闭，不是系统环境变量。</p>\n<p>如何取消代理呢:</p>\n<pre><code>netsh winhttp reset proxy\n</code></pre>\n"},{"title":"wsl2 安装 Centos8","date":"2021-07-04T03:07:37.000Z","author":"Ginta","img":"http://img.ginta.top/huoying2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/huoying2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 前言\n由于开发需要安装 *centos* 版本的 *wsl*， 但 *Windows Store* 里只有 *Ubuntu*、*Debian* 等 *kernel*，好消息是 *Github* 上可以找到对应版本的安装包。\n\n### 安装 Chocolatey\nNuGet（读作New Get）是用于微软.NET开发平台的软件包管理器，是一个Visual Studio的扩展。Chocolatey 是基于 NuGet 的一个软件包管理器，就像 Linux 中的 yum 或 apt 一样，在 Windows10 中也可以用命令行安装程序了。\n\n右键单击开始菜单，选择 Windows PowerShell(管理员)，打开一个具有管理员权限的 PowerShell 窗口，输入命令并回车：\n```\nSet-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n```\n完成后，输入命令：choco ，如果能正确显示版本号，说明安装成功。\n\n详情请查看官网文档安装说明\n\n### LxRunOffline 是非常实用的 WSL 管理软件，可以备份、创建、恢复、导出WSL子系统，也可以安装适配 WSL 的任何 Linux 发行版，可以将 WSL 子系统安装到任意目录中。\n\n在 PowerShell 窗口中输入命令安装LxRunOffline，安装完成后重启 PowerShell。\n```\nchoco install lxrunoffline -y\n```\n### 安装 Centos8 wsl\n[打开链接](https://github.com/mishamosher/CentOS-WSL/releases/tag/8-stream-20210603)，这里直接下载 [CentOS8-stream.zip\n](https://github.com/mishamosher/CentOS-WSL/releases/download/8-stream-20210603/CentOS8-stream.zip)，解压后会发现有一个 **rootfs.tar.gz** 文件，使用 ` lxrunoffline install -n CentOS -d F:/centos -f E:\\CentOS8-stream\\rootfs.tar.gz` 命令来安装，其中 **-d** 后面是 *kernel* 想要安装到的位置，**-f** 的参数是 **rootfs.tar.gz** 的所有路径。\n然后将这个发行版设置为 **WSL2**：`wsl --set-version CentOS 2`\n\n### 换源\n由于默认源都用的国外安装路径，下载东西很慢，需要换成阿里源\n1. 备份原文件\n```\ncd /etc/yum.repos.d\nmv CentOS-Base.repo CentOS-Base.repo.bak\nmv CentOS-extras.repo CentOS-extras.repo.bak\nmv CentOS-centosplus.repo CentOS-centosplus.repo.bak\nmv CentOS-PowerTools.repo CentOS-PowerTools.repo.bak\nmv CentOS-AppStream.repo CentOS-AppStream.repo.bak\n```\n2.  下载\n```\n# wget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo\nvi CentOS-Stream-BaseOS.repo\n```\n这里有两点需要解释一下，目前安装的 *centos8* 没有内置 *wget* 和 *vim* ，不过上边只是一个文件，可以用 *windows* 下载完之后将里面的内容复制一下，然后粘贴到 **CentOS-Stream-BaseOS.repo** 保存就好。\n3. 删除缓存并生成新的缓存\n```\ndnf clean all\ndnf makecache\n```\n\n### wsl2配置使用windows网络代理\n我想要在 *wsl2* 上安装 *helm* ，脚本中有需要访问外网，这就需要一个代理。不过我的 *windows* 已经有代理了，只需要让它使用 *windows* 的代理就好。\n\n- wsl2获取win10 ip\n  - cat /etc/resolv.conf|grep nameserver|awk '{print $2}' => 例如：172.20.192.1\n注：由于windows防火墙的存在，此时可能出现ping 172.20.192.1失败\n- 新建防火墙入站规则\n\n  - 打开控制面板\\系统和安全\\Windows Defender 防火墙\n  - 点击入站规则->新建规则\n  - 规则类型：自定义\n  - 程序：所有程序\n  - 协议和端口：默认即可\n  - 作用域：\n    - 本地ip处选择“任何IP地址”\n    - 远程ip处选择“下列IP地址”，并将wsl2的IP添加进去。（请根据自己wsl2的ip进行计算，我这里添加了172.20.192.1/20）（掩码一般是20位）\n  - 操作：允许连接\n  - 配置文件：三个全选\n  - 名称描述：请自定义\n  - 注意：这一步完成后，从wsl2 ping主机的ip应该可以ping通了。\n- 防火墙配置\n  - 打开控制面板\\系统和安全\\Windows Defender 防火墙\\允许的应用。\n  - 将与代理相关的应用程序均设置为：允许其进行专用、公用网络通信。\n  - 特别注意的是：将Privoxy也配置为允许\n  \n- windows端代理软件配置\n  - 启用“允许来自局域网的连接”\n- 测试\n  - 在wsl2中配置http代理，如export http_proxy=\"http://172.20.192.1:1080\"。注意：端口号请结合自己的代理设置进行修改\n  - 执行命令curl cip.cc查看ip地址\n\n## 部分资料参数文章\n1. [arp命令 centos 安装_WSL2子系统安装CentOS8及源码编译Nginx1.18+PHP7.4+MySql8.0开发环境...](https://blog.51cto.com/u_15057852/2567230)\n2. [wsl2配置使用windows网络代理](https://blog.csdn.net/nick_young_qu/article/details/113709768)\n\n","source":"_posts/wsl2 安装 Centos8.md","raw":"---\ntitle: wsl2 安装 Centos8\ndate: 2021-07-04 11:07:37\nauthor: Ginta\nimg: http://img.ginta.top/huoying2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/huoying2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - WSL2\ncategories: 其他\n---\n## 前言\n由于开发需要安装 *centos* 版本的 *wsl*， 但 *Windows Store* 里只有 *Ubuntu*、*Debian* 等 *kernel*，好消息是 *Github* 上可以找到对应版本的安装包。\n\n### 安装 Chocolatey\nNuGet（读作New Get）是用于微软.NET开发平台的软件包管理器，是一个Visual Studio的扩展。Chocolatey 是基于 NuGet 的一个软件包管理器，就像 Linux 中的 yum 或 apt 一样，在 Windows10 中也可以用命令行安装程序了。\n\n右键单击开始菜单，选择 Windows PowerShell(管理员)，打开一个具有管理员权限的 PowerShell 窗口，输入命令并回车：\n```\nSet-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n```\n完成后，输入命令：choco ，如果能正确显示版本号，说明安装成功。\n\n详情请查看官网文档安装说明\n\n### LxRunOffline 是非常实用的 WSL 管理软件，可以备份、创建、恢复、导出WSL子系统，也可以安装适配 WSL 的任何 Linux 发行版，可以将 WSL 子系统安装到任意目录中。\n\n在 PowerShell 窗口中输入命令安装LxRunOffline，安装完成后重启 PowerShell。\n```\nchoco install lxrunoffline -y\n```\n### 安装 Centos8 wsl\n[打开链接](https://github.com/mishamosher/CentOS-WSL/releases/tag/8-stream-20210603)，这里直接下载 [CentOS8-stream.zip\n](https://github.com/mishamosher/CentOS-WSL/releases/download/8-stream-20210603/CentOS8-stream.zip)，解压后会发现有一个 **rootfs.tar.gz** 文件，使用 ` lxrunoffline install -n CentOS -d F:/centos -f E:\\CentOS8-stream\\rootfs.tar.gz` 命令来安装，其中 **-d** 后面是 *kernel* 想要安装到的位置，**-f** 的参数是 **rootfs.tar.gz** 的所有路径。\n然后将这个发行版设置为 **WSL2**：`wsl --set-version CentOS 2`\n\n### 换源\n由于默认源都用的国外安装路径，下载东西很慢，需要换成阿里源\n1. 备份原文件\n```\ncd /etc/yum.repos.d\nmv CentOS-Base.repo CentOS-Base.repo.bak\nmv CentOS-extras.repo CentOS-extras.repo.bak\nmv CentOS-centosplus.repo CentOS-centosplus.repo.bak\nmv CentOS-PowerTools.repo CentOS-PowerTools.repo.bak\nmv CentOS-AppStream.repo CentOS-AppStream.repo.bak\n```\n2.  下载\n```\n# wget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo\nvi CentOS-Stream-BaseOS.repo\n```\n这里有两点需要解释一下，目前安装的 *centos8* 没有内置 *wget* 和 *vim* ，不过上边只是一个文件，可以用 *windows* 下载完之后将里面的内容复制一下，然后粘贴到 **CentOS-Stream-BaseOS.repo** 保存就好。\n3. 删除缓存并生成新的缓存\n```\ndnf clean all\ndnf makecache\n```\n\n### wsl2配置使用windows网络代理\n我想要在 *wsl2* 上安装 *helm* ，脚本中有需要访问外网，这就需要一个代理。不过我的 *windows* 已经有代理了，只需要让它使用 *windows* 的代理就好。\n\n- wsl2获取win10 ip\n  - cat /etc/resolv.conf|grep nameserver|awk '{print $2}' => 例如：172.20.192.1\n注：由于windows防火墙的存在，此时可能出现ping 172.20.192.1失败\n- 新建防火墙入站规则\n\n  - 打开控制面板\\系统和安全\\Windows Defender 防火墙\n  - 点击入站规则->新建规则\n  - 规则类型：自定义\n  - 程序：所有程序\n  - 协议和端口：默认即可\n  - 作用域：\n    - 本地ip处选择“任何IP地址”\n    - 远程ip处选择“下列IP地址”，并将wsl2的IP添加进去。（请根据自己wsl2的ip进行计算，我这里添加了172.20.192.1/20）（掩码一般是20位）\n  - 操作：允许连接\n  - 配置文件：三个全选\n  - 名称描述：请自定义\n  - 注意：这一步完成后，从wsl2 ping主机的ip应该可以ping通了。\n- 防火墙配置\n  - 打开控制面板\\系统和安全\\Windows Defender 防火墙\\允许的应用。\n  - 将与代理相关的应用程序均设置为：允许其进行专用、公用网络通信。\n  - 特别注意的是：将Privoxy也配置为允许\n  \n- windows端代理软件配置\n  - 启用“允许来自局域网的连接”\n- 测试\n  - 在wsl2中配置http代理，如export http_proxy=\"http://172.20.192.1:1080\"。注意：端口号请结合自己的代理设置进行修改\n  - 执行命令curl cip.cc查看ip地址\n\n## 部分资料参数文章\n1. [arp命令 centos 安装_WSL2子系统安装CentOS8及源码编译Nginx1.18+PHP7.4+MySql8.0开发环境...](https://blog.51cto.com/u_15057852/2567230)\n2. [wsl2配置使用windows网络代理](https://blog.csdn.net/nick_young_qu/article/details/113709768)\n\n","slug":"wsl2 安装 Centos8","published":1,"updated":"2022-08-11T12:49:48.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p61818003ztksc5uyd3u86","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>由于开发需要安装 <em>centos</em> 版本的 <em>wsl</em>， 但 <em>Windows Store</em> 里只有 <em>Ubuntu</em>、<em>Debian</em> 等 <em>kernel</em>，好消息是 <em>Github</em> 上可以找到对应版本的安装包。</p>\n<h3 id=\"安装-Chocolatey\"><a href=\"#安装-Chocolatey\" class=\"headerlink\" title=\"安装 Chocolatey\"></a>安装 Chocolatey</h3><p>NuGet（读作New Get）是用于微软.NET开发平台的软件包管理器，是一个Visual Studio的扩展。Chocolatey 是基于 NuGet 的一个软件包管理器，就像 Linux 中的 yum 或 apt 一样，在 Windows10 中也可以用命令行安装程序了。</p>\n<p>右键单击开始菜单，选择 Windows PowerShell(管理员)，打开一个具有管理员权限的 PowerShell 窗口，输入命令并回车：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://chocolatey.org/install.ps1&#x27;))</span><br></pre></td></tr></table></figure>\n<p>完成后，输入命令：choco ，如果能正确显示版本号，说明安装成功。</p>\n<p>详情请查看官网文档安装说明</p>\n<h3 id=\"LxRunOffline-是非常实用的-WSL-管理软件，可以备份、创建、恢复、导出WSL子系统，也可以安装适配-WSL-的任何-Linux-发行版，可以将-WSL-子系统安装到任意目录中。\"><a href=\"#LxRunOffline-是非常实用的-WSL-管理软件，可以备份、创建、恢复、导出WSL子系统，也可以安装适配-WSL-的任何-Linux-发行版，可以将-WSL-子系统安装到任意目录中。\" class=\"headerlink\" title=\"LxRunOffline 是非常实用的 WSL 管理软件，可以备份、创建、恢复、导出WSL子系统，也可以安装适配 WSL 的任何 Linux 发行版，可以将 WSL 子系统安装到任意目录中。\"></a>LxRunOffline 是非常实用的 WSL 管理软件，可以备份、创建、恢复、导出WSL子系统，也可以安装适配 WSL 的任何 Linux 发行版，可以将 WSL 子系统安装到任意目录中。</h3><p>在 PowerShell 窗口中输入命令安装LxRunOffline，安装完成后重启 PowerShell。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco install lxrunoffline -y</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装-Centos8-wsl\"><a href=\"#安装-Centos8-wsl\" class=\"headerlink\" title=\"安装 Centos8 wsl\"></a>安装 Centos8 wsl</h3><p><a href=\"https://github.com/mishamosher/CentOS-WSL/releases/tag/8-stream-20210603\">打开链接</a>，这里直接下载 <a href=\"https://github.com/mishamosher/CentOS-WSL/releases/download/8-stream-20210603/CentOS8-stream.zip\">CentOS8-stream.zip\n</a>，解压后会发现有一个 <strong>rootfs.tar.gz</strong> 文件，使用 <code> lxrunoffline install -n CentOS -d F:/centos -f E:\\CentOS8-stream\\rootfs.tar.gz</code> 命令来安装，其中 <strong>-d</strong> 后面是 <em>kernel</em> 想要安装到的位置，**-f** 的参数是 <strong>rootfs.tar.gz</strong> 的所有路径。<br>然后将这个发行版设置为 <strong>WSL2</strong>：<code>wsl --set-version CentOS 2</code></p>\n<h3 id=\"换源\"><a href=\"#换源\" class=\"headerlink\" title=\"换源\"></a>换源</h3><p>由于默认源都用的国外安装路径，下载东西很慢，需要换成阿里源</p>\n<ol>\n<li>备份原文件<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/yum.repos.d</span><br><span class=\"line\">mv CentOS-Base.repo CentOS-Base.repo.bak</span><br><span class=\"line\">mv CentOS-extras.repo CentOS-extras.repo.bak</span><br><span class=\"line\">mv CentOS-centosplus.repo CentOS-centosplus.repo.bak</span><br><span class=\"line\">mv CentOS-PowerTools.repo CentOS-PowerTools.repo.bak</span><br><span class=\"line\">mv CentOS-AppStream.repo CentOS-AppStream.repo.bak</span><br></pre></td></tr></table></figure></li>\n<li>下载<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br><span class=\"line\">vi CentOS-Stream-BaseOS.repo</span><br></pre></td></tr></table></figure>\n这里有两点需要解释一下，目前安装的 <em>centos8</em> 没有内置 <em>wget</em> 和 <em>vim</em> ，不过上边只是一个文件，可以用 <em>windows</em> 下载完之后将里面的内容复制一下，然后粘贴到 <strong>CentOS-Stream-BaseOS.repo</strong> 保存就好。</li>\n<li>删除缓存并生成新的缓存<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf clean all</span><br><span class=\"line\">dnf makecache</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"wsl2配置使用windows网络代理\"><a href=\"#wsl2配置使用windows网络代理\" class=\"headerlink\" title=\"wsl2配置使用windows网络代理\"></a>wsl2配置使用windows网络代理</h3><p>我想要在 <em>wsl2</em> 上安装 <em>helm</em> ，脚本中有需要访问外网，这就需要一个代理。不过我的 <em>windows</em> 已经有代理了，只需要让它使用 <em>windows</em> 的代理就好。</p>\n<ul>\n<li><p>wsl2获取win10 ip</p>\n<ul>\n<li>cat &#x2F;etc&#x2F;resolv.conf|grep nameserver|awk ‘{print $2}’ &#x3D;&gt; 例如：172.20.192.1<br>注：由于windows防火墙的存在，此时可能出现ping 172.20.192.1失败</li>\n</ul>\n</li>\n<li><p>新建防火墙入站规则</p>\n<ul>\n<li>打开控制面板\\系统和安全\\Windows Defender 防火墙</li>\n<li>点击入站规则-&gt;新建规则</li>\n<li>规则类型：自定义</li>\n<li>程序：所有程序</li>\n<li>协议和端口：默认即可</li>\n<li>作用域：<ul>\n<li>本地ip处选择“任何IP地址”</li>\n<li>远程ip处选择“下列IP地址”，并将wsl2的IP添加进去。（请根据自己wsl2的ip进行计算，我这里添加了172.20.192.1&#x2F;20）（掩码一般是20位）</li>\n</ul>\n</li>\n<li>操作：允许连接</li>\n<li>配置文件：三个全选</li>\n<li>名称描述：请自定义</li>\n<li>注意：这一步完成后，从wsl2 ping主机的ip应该可以ping通了。</li>\n</ul>\n</li>\n<li><p>防火墙配置</p>\n<ul>\n<li>打开控制面板\\系统和安全\\Windows Defender 防火墙\\允许的应用。</li>\n<li>将与代理相关的应用程序均设置为：允许其进行专用、公用网络通信。</li>\n<li>特别注意的是：将Privoxy也配置为允许</li>\n</ul>\n</li>\n<li><p>windows端代理软件配置</p>\n<ul>\n<li>启用“允许来自局域网的连接”</li>\n</ul>\n</li>\n<li><p>测试</p>\n<ul>\n<li>在wsl2中配置http代理，如export http_proxy&#x3D;”<a href=\"http://172.20.192.1:1080&quot;。注意：端口号请结合自己的代理设置进行修改\">http://172.20.192.1:1080&quot;。注意：端口号请结合自己的代理设置进行修改</a></li>\n<li>执行命令curl cip.cc查看ip地址</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"部分资料参数文章\"><a href=\"#部分资料参数文章\" class=\"headerlink\" title=\"部分资料参数文章\"></a>部分资料参数文章</h2><ol>\n<li><a href=\"https://blog.51cto.com/u_15057852/2567230\">arp命令 centos 安装_WSL2子系统安装CentOS8及源码编译Nginx1.18+PHP7.4+MySql8.0开发环境…</a></li>\n<li><a href=\"https://blog.csdn.net/nick_young_qu/article/details/113709768\">wsl2配置使用windows网络代理</a></li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>由于开发需要安装 <em>centos</em> 版本的 <em>wsl</em>， 但 <em>Windows Store</em> 里只有 <em>Ubuntu</em>、<em>Debian</em> 等 <em>kernel</em>，好消息是 <em>Github</em> 上可以找到对应版本的安装包。</p>\n<h3 id=\"安装-Chocolatey\"><a href=\"#安装-Chocolatey\" class=\"headerlink\" title=\"安装 Chocolatey\"></a>安装 Chocolatey</h3><p>NuGet（读作New Get）是用于微软.NET开发平台的软件包管理器，是一个Visual Studio的扩展。Chocolatey 是基于 NuGet 的一个软件包管理器，就像 Linux 中的 yum 或 apt 一样，在 Windows10 中也可以用命令行安装程序了。</p>\n<p>右键单击开始菜单，选择 Windows PowerShell(管理员)，打开一个具有管理员权限的 PowerShell 窗口，输入命令并回车：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://chocolatey.org/install.ps1&#x27;))</span><br></pre></td></tr></table></figure>\n<p>完成后，输入命令：choco ，如果能正确显示版本号，说明安装成功。</p>\n<p>详情请查看官网文档安装说明</p>\n<h3 id=\"LxRunOffline-是非常实用的-WSL-管理软件，可以备份、创建、恢复、导出WSL子系统，也可以安装适配-WSL-的任何-Linux-发行版，可以将-WSL-子系统安装到任意目录中。\"><a href=\"#LxRunOffline-是非常实用的-WSL-管理软件，可以备份、创建、恢复、导出WSL子系统，也可以安装适配-WSL-的任何-Linux-发行版，可以将-WSL-子系统安装到任意目录中。\" class=\"headerlink\" title=\"LxRunOffline 是非常实用的 WSL 管理软件，可以备份、创建、恢复、导出WSL子系统，也可以安装适配 WSL 的任何 Linux 发行版，可以将 WSL 子系统安装到任意目录中。\"></a>LxRunOffline 是非常实用的 WSL 管理软件，可以备份、创建、恢复、导出WSL子系统，也可以安装适配 WSL 的任何 Linux 发行版，可以将 WSL 子系统安装到任意目录中。</h3><p>在 PowerShell 窗口中输入命令安装LxRunOffline，安装完成后重启 PowerShell。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco install lxrunoffline -y</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装-Centos8-wsl\"><a href=\"#安装-Centos8-wsl\" class=\"headerlink\" title=\"安装 Centos8 wsl\"></a>安装 Centos8 wsl</h3><p><a href=\"https://github.com/mishamosher/CentOS-WSL/releases/tag/8-stream-20210603\">打开链接</a>，这里直接下载 <a href=\"https://github.com/mishamosher/CentOS-WSL/releases/download/8-stream-20210603/CentOS8-stream.zip\">CentOS8-stream.zip\n</a>，解压后会发现有一个 <strong>rootfs.tar.gz</strong> 文件，使用 <code> lxrunoffline install -n CentOS -d F:/centos -f E:\\CentOS8-stream\\rootfs.tar.gz</code> 命令来安装，其中 <strong>-d</strong> 后面是 <em>kernel</em> 想要安装到的位置，**-f** 的参数是 <strong>rootfs.tar.gz</strong> 的所有路径。<br>然后将这个发行版设置为 <strong>WSL2</strong>：<code>wsl --set-version CentOS 2</code></p>\n<h3 id=\"换源\"><a href=\"#换源\" class=\"headerlink\" title=\"换源\"></a>换源</h3><p>由于默认源都用的国外安装路径，下载东西很慢，需要换成阿里源</p>\n<ol>\n<li>备份原文件<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/yum.repos.d</span><br><span class=\"line\">mv CentOS-Base.repo CentOS-Base.repo.bak</span><br><span class=\"line\">mv CentOS-extras.repo CentOS-extras.repo.bak</span><br><span class=\"line\">mv CentOS-centosplus.repo CentOS-centosplus.repo.bak</span><br><span class=\"line\">mv CentOS-PowerTools.repo CentOS-PowerTools.repo.bak</span><br><span class=\"line\">mv CentOS-AppStream.repo CentOS-AppStream.repo.bak</span><br></pre></td></tr></table></figure></li>\n<li>下载<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br><span class=\"line\">vi CentOS-Stream-BaseOS.repo</span><br></pre></td></tr></table></figure>\n这里有两点需要解释一下，目前安装的 <em>centos8</em> 没有内置 <em>wget</em> 和 <em>vim</em> ，不过上边只是一个文件，可以用 <em>windows</em> 下载完之后将里面的内容复制一下，然后粘贴到 <strong>CentOS-Stream-BaseOS.repo</strong> 保存就好。</li>\n<li>删除缓存并生成新的缓存<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf clean all</span><br><span class=\"line\">dnf makecache</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"wsl2配置使用windows网络代理\"><a href=\"#wsl2配置使用windows网络代理\" class=\"headerlink\" title=\"wsl2配置使用windows网络代理\"></a>wsl2配置使用windows网络代理</h3><p>我想要在 <em>wsl2</em> 上安装 <em>helm</em> ，脚本中有需要访问外网，这就需要一个代理。不过我的 <em>windows</em> 已经有代理了，只需要让它使用 <em>windows</em> 的代理就好。</p>\n<ul>\n<li><p>wsl2获取win10 ip</p>\n<ul>\n<li>cat &#x2F;etc&#x2F;resolv.conf|grep nameserver|awk ‘{print $2}’ &#x3D;&gt; 例如：172.20.192.1<br>注：由于windows防火墙的存在，此时可能出现ping 172.20.192.1失败</li>\n</ul>\n</li>\n<li><p>新建防火墙入站规则</p>\n<ul>\n<li>打开控制面板\\系统和安全\\Windows Defender 防火墙</li>\n<li>点击入站规则-&gt;新建规则</li>\n<li>规则类型：自定义</li>\n<li>程序：所有程序</li>\n<li>协议和端口：默认即可</li>\n<li>作用域：<ul>\n<li>本地ip处选择“任何IP地址”</li>\n<li>远程ip处选择“下列IP地址”，并将wsl2的IP添加进去。（请根据自己wsl2的ip进行计算，我这里添加了172.20.192.1&#x2F;20）（掩码一般是20位）</li>\n</ul>\n</li>\n<li>操作：允许连接</li>\n<li>配置文件：三个全选</li>\n<li>名称描述：请自定义</li>\n<li>注意：这一步完成后，从wsl2 ping主机的ip应该可以ping通了。</li>\n</ul>\n</li>\n<li><p>防火墙配置</p>\n<ul>\n<li>打开控制面板\\系统和安全\\Windows Defender 防火墙\\允许的应用。</li>\n<li>将与代理相关的应用程序均设置为：允许其进行专用、公用网络通信。</li>\n<li>特别注意的是：将Privoxy也配置为允许</li>\n</ul>\n</li>\n<li><p>windows端代理软件配置</p>\n<ul>\n<li>启用“允许来自局域网的连接”</li>\n</ul>\n</li>\n<li><p>测试</p>\n<ul>\n<li>在wsl2中配置http代理，如export http_proxy&#x3D;”<a href=\"http://172.20.192.1:1080&quot;。注意：端口号请结合自己的代理设置进行修改\">http://172.20.192.1:1080&quot;。注意：端口号请结合自己的代理设置进行修改</a></li>\n<li>执行命令curl cip.cc查看ip地址</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"部分资料参数文章\"><a href=\"#部分资料参数文章\" class=\"headerlink\" title=\"部分资料参数文章\"></a>部分资料参数文章</h2><ol>\n<li><a href=\"https://blog.51cto.com/u_15057852/2567230\">arp命令 centos 安装_WSL2子系统安装CentOS8及源码编译Nginx1.18+PHP7.4+MySql8.0开发环境…</a></li>\n<li><a href=\"https://blog.csdn.net/nick_young_qu/article/details/113709768\">wsl2配置使用windows网络代理</a></li>\n</ol>\n"},{"title":"《大秦帝国》终于到了","date":"2020-04-02T05:52:30.000Z","author":"Ginta","img":"http://img.ginta.top/qinshi2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/qinshi2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"### NNQI\r\n前天下单的书终于到了！！！\r\n\r\n\r\n![](http://img.ginta.top/markdownx/2020/04/01/5a84814f-d5bd-48d6-93b3-8fa97600dd3d.jpg)\r\n\r\n\r\n![](http://img.ginta.top/markdownx/2020/04/01/d20e997d-8d84-4ac6-9747-45a83b67c7e4.jpg)\r\n\r\n\r\n\r\n\r\n### 一度\r\n上次看**《大秦帝国》** 还是在四川。那时周末会在成都图书馆做志愿者，一般休息的时候都会看看杂志，读者、格言、意林、青年文摘，有时也会看看达芬奇和梵高的作品，虽然始终无法领会他们的境界。偶尔到借阅区转了一圈，就在书架最上层看到了一本《大秦帝国》，当时第一部已经外借出去了，只留下一本第二部的“国命纵横”，大致翻了一下感觉还行，讲的是纵横家苏秦和张仪各自选择不同的国家实现自己的抱负，书中用词没有让我感到浮夸的地方，整体印象就是行文恰到好处。回家的时候顺便也就借走了，不过那一个月也比较忙，没看完就还回去了。\r\n\r\n###  二重\r\n平时在公司午休的时候也基本都是看看杂志，周末的话会多睡几个小时。一段时间没有认真地阅读一部小说总是会感到有些不安，前两天考虑了一下还是决定把之前没有读完的《大秦帝国》通读一遍，至于读完以后再买什么书就是之后的事情了。\r\n\r\n>>>当我还是个孩子的时候，我吃过很多食物，现在已经记不起来吃过什么了。但可以肯定的是，它们中的一部分已经成长为我的骨头和肉。  --三毛","source":"_posts/《大秦帝国》终于到了.md","raw":"---\ntitle: 《大秦帝国》终于到了\ndate: 2020-04-02 13:52:30\nauthor: Ginta\nimg: http://img.ginta.top/qinshi2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/qinshi2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - 历史相关\ncategories: 阅读\n---\n### NNQI\r\n前天下单的书终于到了！！！\r\n\r\n\r\n![](http://img.ginta.top/markdownx/2020/04/01/5a84814f-d5bd-48d6-93b3-8fa97600dd3d.jpg)\r\n\r\n\r\n![](http://img.ginta.top/markdownx/2020/04/01/d20e997d-8d84-4ac6-9747-45a83b67c7e4.jpg)\r\n\r\n\r\n\r\n\r\n### 一度\r\n上次看**《大秦帝国》** 还是在四川。那时周末会在成都图书馆做志愿者，一般休息的时候都会看看杂志，读者、格言、意林、青年文摘，有时也会看看达芬奇和梵高的作品，虽然始终无法领会他们的境界。偶尔到借阅区转了一圈，就在书架最上层看到了一本《大秦帝国》，当时第一部已经外借出去了，只留下一本第二部的“国命纵横”，大致翻了一下感觉还行，讲的是纵横家苏秦和张仪各自选择不同的国家实现自己的抱负，书中用词没有让我感到浮夸的地方，整体印象就是行文恰到好处。回家的时候顺便也就借走了，不过那一个月也比较忙，没看完就还回去了。\r\n\r\n###  二重\r\n平时在公司午休的时候也基本都是看看杂志，周末的话会多睡几个小时。一段时间没有认真地阅读一部小说总是会感到有些不安，前两天考虑了一下还是决定把之前没有读完的《大秦帝国》通读一遍，至于读完以后再买什么书就是之后的事情了。\r\n\r\n>>>当我还是个孩子的时候，我吃过很多食物，现在已经记不起来吃过什么了。但可以肯定的是，它们中的一部分已经成长为我的骨头和肉。  --三毛","slug":"《大秦帝国》终于到了","published":1,"updated":"2022-08-11T12:49:48.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p618180042tksc9ari0xde","content":"<h3 id=\"NNQI\"><a href=\"#NNQI\" class=\"headerlink\" title=\"NNQI\"></a>NNQI</h3><p>前天下单的书终于到了！！！</p>\n<p><img src=\"http://img.ginta.top/markdownx/2020/04/01/5a84814f-d5bd-48d6-93b3-8fa97600dd3d.jpg\"></p>\n<p><img src=\"http://img.ginta.top/markdownx/2020/04/01/d20e997d-8d84-4ac6-9747-45a83b67c7e4.jpg\"></p>\n<h3 id=\"一度\"><a href=\"#一度\" class=\"headerlink\" title=\"一度\"></a>一度</h3><p>上次看<strong>《大秦帝国》</strong> 还是在四川。那时周末会在成都图书馆做志愿者，一般休息的时候都会看看杂志，读者、格言、意林、青年文摘，有时也会看看达芬奇和梵高的作品，虽然始终无法领会他们的境界。偶尔到借阅区转了一圈，就在书架最上层看到了一本《大秦帝国》，当时第一部已经外借出去了，只留下一本第二部的“国命纵横”，大致翻了一下感觉还行，讲的是纵横家苏秦和张仪各自选择不同的国家实现自己的抱负，书中用词没有让我感到浮夸的地方，整体印象就是行文恰到好处。回家的时候顺便也就借走了，不过那一个月也比较忙，没看完就还回去了。</p>\n<h3 id=\"二重\"><a href=\"#二重\" class=\"headerlink\" title=\"二重\"></a>二重</h3><p>平时在公司午休的时候也基本都是看看杂志，周末的话会多睡几个小时。一段时间没有认真地阅读一部小说总是会感到有些不安，前两天考虑了一下还是决定把之前没有读完的《大秦帝国》通读一遍，至于读完以后再买什么书就是之后的事情了。</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>当我还是个孩子的时候，我吃过很多食物，现在已经记不起来吃过什么了。但可以肯定的是，它们中的一部分已经成长为我的骨头和肉。  –三毛</p>\n</blockquote>\n</blockquote>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h3 id=\"NNQI\"><a href=\"#NNQI\" class=\"headerlink\" title=\"NNQI\"></a>NNQI</h3><p>前天下单的书终于到了！！！</p>\n<p><img src=\"http://img.ginta.top/markdownx/2020/04/01/5a84814f-d5bd-48d6-93b3-8fa97600dd3d.jpg\"></p>\n<p><img src=\"http://img.ginta.top/markdownx/2020/04/01/d20e997d-8d84-4ac6-9747-45a83b67c7e4.jpg\"></p>\n<h3 id=\"一度\"><a href=\"#一度\" class=\"headerlink\" title=\"一度\"></a>一度</h3><p>上次看<strong>《大秦帝国》</strong> 还是在四川。那时周末会在成都图书馆做志愿者，一般休息的时候都会看看杂志，读者、格言、意林、青年文摘，有时也会看看达芬奇和梵高的作品，虽然始终无法领会他们的境界。偶尔到借阅区转了一圈，就在书架最上层看到了一本《大秦帝国》，当时第一部已经外借出去了，只留下一本第二部的“国命纵横”，大致翻了一下感觉还行，讲的是纵横家苏秦和张仪各自选择不同的国家实现自己的抱负，书中用词没有让我感到浮夸的地方，整体印象就是行文恰到好处。回家的时候顺便也就借走了，不过那一个月也比较忙，没看完就还回去了。</p>\n<h3 id=\"二重\"><a href=\"#二重\" class=\"headerlink\" title=\"二重\"></a>二重</h3><p>平时在公司午休的时候也基本都是看看杂志，周末的话会多睡几个小时。一段时间没有认真地阅读一部小说总是会感到有些不安，前两天考虑了一下还是决定把之前没有读完的《大秦帝国》通读一遍，至于读完以后再买什么书就是之后的事情了。</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>当我还是个孩子的时候，我吃过很多食物，现在已经记不起来吃过什么了。但可以肯定的是，它们中的一部分已经成长为我的骨头和肉。  –三毛</p>\n</blockquote>\n</blockquote>\n</blockquote>\n"},{"title":"仿佛重生","date":"2020-03-27T09:38:55.000Z","author":"Ginta","img":"http://img.ginta.top/qinshi1.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/qinshi1.jpg","toc":false,"mathjax":false,"summary":null,"_content":"就在一个小时前整个人都感觉不好了，现在好像又活过来了。服务器上竟然有一个当初为了迁移方便的压缩包！！","source":"_posts/仿佛重生.md","raw":"---\ntitle: 仿佛重生\ndate: 2020-03-27 17:38:55\nauthor: Ginta\nimg: http://img.ginta.top/qinshi1.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/qinshi1.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: 生活\n---\n就在一个小时前整个人都感觉不好了，现在好像又活过来了。服务器上竟然有一个当初为了迁移方便的压缩包！！","slug":"仿佛重生","published":1,"updated":"2022-08-11T12:49:48.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p618190046tksc8fvh2u68","content":"<p>就在一个小时前整个人都感觉不好了，现在好像又活过来了。服务器上竟然有一个当初为了迁移方便的压缩包！！</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<p>就在一个小时前整个人都感觉不好了，现在好像又活过来了。服务器上竟然有一个当初为了迁移方便的压缩包！！</p>\n"},{"title":"写了个脚本把以前的博客从sqlite转成md","date":"2021-07-07T16:46:47.000Z","author":"Ginta","img":"/medias/banner/god.jpg","top":false,"hide":false,"cover":false,"coverImg":"/medias/banner/god.jpg","toc":false,"mathjax":false,"summary":null,"_content":"\n## 前言\n以前的博客是用 *django* 写的，现在要迁移到 *hexo* 了，于是乎简单粗暴的写了个脚本把 *sqlite3* 数据转换成了文件。\n有几点需要改进\n1. 脚本暴力过滤了所有异常数据，虽然没有一个是异常的\n2. 封面图全部是一样的，其实可以随机生成的\n3. 文章只生成了分类，其实tags也可以生成的\n\n```python\nimport datetime\nimport sqlite3\nconn = sqlite3.connect('db.sqlite3')\nprint(conn)\ncur = conn.cursor()\nCATEGORY_MAP = {\n\n}\n\ntemplate = \"\"\"---\ntitle: {}\ndate: {}\nauthor: Ginta\nimg: /medias/images/mingfei.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: /medias/images/mingfei.jpg\ntoc: false\nmathjax: false\nsummary:\ncategories: {}\n---\n\"\"\"\n\nsql = \"SELECT * FROM blog_category\"\ncategories = cur.execute(sql)\nfor category in categories:\n    category_id = category[0]\n    category_title = category[3]\n    CATEGORY_MAP[str(category_id)] = category_title\n\nprint(CATEGORY_MAP)\n\nsql = \"SELECT * FROM blog_post\"\nres = cur.execute(sql)\nfor post in res:\n    date = post[2]\n    create_date = datetime.datetime.fromisoformat(date).strftime(\"%Y-%m-%d %H:%M:%S\")\n    post_category = post[-4]\n    title = post[3]\n    content = post[4]\n    head = template.format(title, create_date, CATEGORY_MAP[str(post_category)])\n    try:\n        f = open(title+ '.md', 'w', encoding=\"utf-8\")\n        f.write(head+content)\n        f.close()\n    except:\n        print(title)\n```","source":"_posts/写了个脚本把以前的博客从sqlite转成md.md","raw":"---\ntitle: 写了个脚本把以前的博客从sqlite转成md\ndate: 2021-07-08 00:46:47\nauthor: Ginta\nimg: /medias/banner/god.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: /medias/banner/god.jpg\ntoc: false\nmathjax: false\nsummary:\ncategories: 生活\n---\n\n## 前言\n以前的博客是用 *django* 写的，现在要迁移到 *hexo* 了，于是乎简单粗暴的写了个脚本把 *sqlite3* 数据转换成了文件。\n有几点需要改进\n1. 脚本暴力过滤了所有异常数据，虽然没有一个是异常的\n2. 封面图全部是一样的，其实可以随机生成的\n3. 文章只生成了分类，其实tags也可以生成的\n\n```python\nimport datetime\nimport sqlite3\nconn = sqlite3.connect('db.sqlite3')\nprint(conn)\ncur = conn.cursor()\nCATEGORY_MAP = {\n\n}\n\ntemplate = \"\"\"---\ntitle: {}\ndate: {}\nauthor: Ginta\nimg: /medias/images/mingfei.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: /medias/images/mingfei.jpg\ntoc: false\nmathjax: false\nsummary:\ncategories: {}\n---\n\"\"\"\n\nsql = \"SELECT * FROM blog_category\"\ncategories = cur.execute(sql)\nfor category in categories:\n    category_id = category[0]\n    category_title = category[3]\n    CATEGORY_MAP[str(category_id)] = category_title\n\nprint(CATEGORY_MAP)\n\nsql = \"SELECT * FROM blog_post\"\nres = cur.execute(sql)\nfor post in res:\n    date = post[2]\n    create_date = datetime.datetime.fromisoformat(date).strftime(\"%Y-%m-%d %H:%M:%S\")\n    post_category = post[-4]\n    title = post[3]\n    content = post[4]\n    head = template.format(title, create_date, CATEGORY_MAP[str(post_category)])\n    try:\n        f = open(title+ '.md', 'w', encoding=\"utf-8\")\n        f.write(head+content)\n        f.close()\n    except:\n        print(title)\n```","slug":"写了个脚本把以前的博客从sqlite转成md","published":1,"updated":"2022-08-11T12:49:48.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p61819004atkschc122p2e","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>以前的博客是用 <em>django</em> 写的，现在要迁移到 <em>hexo</em> 了，于是乎简单粗暴的写了个脚本把 <em>sqlite3</em> 数据转换成了文件。<br>有几点需要改进</p>\n<ol>\n<li>脚本暴力过滤了所有异常数据，虽然没有一个是异常的</li>\n<li>封面图全部是一样的，其实可以随机生成的</li>\n<li>文章只生成了分类，其实tags也可以生成的</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> sqlite3</span><br><span class=\"line\">conn = sqlite3.connect(<span class=\"string\">&#x27;db.sqlite3&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(conn)</span><br><span class=\"line\">cur = conn.cursor()</span><br><span class=\"line\">CATEGORY_MAP = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">template = <span class=\"string\">&quot;&quot;&quot;---</span></span><br><span class=\"line\"><span class=\"string\">title: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">date: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">author: Ginta</span></span><br><span class=\"line\"><span class=\"string\">img: /medias/images/mingfei.jpg</span></span><br><span class=\"line\"><span class=\"string\">top: false</span></span><br><span class=\"line\"><span class=\"string\">hide: false</span></span><br><span class=\"line\"><span class=\"string\">cover: false</span></span><br><span class=\"line\"><span class=\"string\">coverImg: /medias/images/mingfei.jpg</span></span><br><span class=\"line\"><span class=\"string\">toc: false</span></span><br><span class=\"line\"><span class=\"string\">mathjax: false</span></span><br><span class=\"line\"><span class=\"string\">summary:</span></span><br><span class=\"line\"><span class=\"string\">categories: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">---</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">sql = <span class=\"string\">&quot;SELECT * FROM blog_category&quot;</span></span><br><span class=\"line\">categories = cur.execute(sql)</span><br><span class=\"line\"><span class=\"keyword\">for</span> category <span class=\"keyword\">in</span> categories:</span><br><span class=\"line\">    category_id = category[<span class=\"number\">0</span>]</span><br><span class=\"line\">    category_title = category[<span class=\"number\">3</span>]</span><br><span class=\"line\">    CATEGORY_MAP[<span class=\"built_in\">str</span>(category_id)] = category_title</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(CATEGORY_MAP)</span><br><span class=\"line\"></span><br><span class=\"line\">sql = <span class=\"string\">&quot;SELECT * FROM blog_post&quot;</span></span><br><span class=\"line\">res = cur.execute(sql)</span><br><span class=\"line\"><span class=\"keyword\">for</span> post <span class=\"keyword\">in</span> res:</span><br><span class=\"line\">    date = post[<span class=\"number\">2</span>]</span><br><span class=\"line\">    create_date = datetime.datetime.fromisoformat(date).strftime(<span class=\"string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class=\"line\">    post_category = post[-<span class=\"number\">4</span>]</span><br><span class=\"line\">    title = post[<span class=\"number\">3</span>]</span><br><span class=\"line\">    content = post[<span class=\"number\">4</span>]</span><br><span class=\"line\">    head = template.<span class=\"built_in\">format</span>(title, create_date, CATEGORY_MAP[<span class=\"built_in\">str</span>(post_category)])</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        f = <span class=\"built_in\">open</span>(title+ <span class=\"string\">&#x27;.md&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">        f.write(head+content)</span><br><span class=\"line\">        f.close()</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(title)</span><br></pre></td></tr></table></figure>","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>以前的博客是用 <em>django</em> 写的，现在要迁移到 <em>hexo</em> 了，于是乎简单粗暴的写了个脚本把 <em>sqlite3</em> 数据转换成了文件。<br>有几点需要改进</p>\n<ol>\n<li>脚本暴力过滤了所有异常数据，虽然没有一个是异常的</li>\n<li>封面图全部是一样的，其实可以随机生成的</li>\n<li>文章只生成了分类，其实tags也可以生成的</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> sqlite3</span><br><span class=\"line\">conn = sqlite3.connect(<span class=\"string\">&#x27;db.sqlite3&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(conn)</span><br><span class=\"line\">cur = conn.cursor()</span><br><span class=\"line\">CATEGORY_MAP = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">template = <span class=\"string\">&quot;&quot;&quot;---</span></span><br><span class=\"line\"><span class=\"string\">title: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">date: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">author: Ginta</span></span><br><span class=\"line\"><span class=\"string\">img: /medias/images/mingfei.jpg</span></span><br><span class=\"line\"><span class=\"string\">top: false</span></span><br><span class=\"line\"><span class=\"string\">hide: false</span></span><br><span class=\"line\"><span class=\"string\">cover: false</span></span><br><span class=\"line\"><span class=\"string\">coverImg: /medias/images/mingfei.jpg</span></span><br><span class=\"line\"><span class=\"string\">toc: false</span></span><br><span class=\"line\"><span class=\"string\">mathjax: false</span></span><br><span class=\"line\"><span class=\"string\">summary:</span></span><br><span class=\"line\"><span class=\"string\">categories: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">---</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">sql = <span class=\"string\">&quot;SELECT * FROM blog_category&quot;</span></span><br><span class=\"line\">categories = cur.execute(sql)</span><br><span class=\"line\"><span class=\"keyword\">for</span> category <span class=\"keyword\">in</span> categories:</span><br><span class=\"line\">    category_id = category[<span class=\"number\">0</span>]</span><br><span class=\"line\">    category_title = category[<span class=\"number\">3</span>]</span><br><span class=\"line\">    CATEGORY_MAP[<span class=\"built_in\">str</span>(category_id)] = category_title</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(CATEGORY_MAP)</span><br><span class=\"line\"></span><br><span class=\"line\">sql = <span class=\"string\">&quot;SELECT * FROM blog_post&quot;</span></span><br><span class=\"line\">res = cur.execute(sql)</span><br><span class=\"line\"><span class=\"keyword\">for</span> post <span class=\"keyword\">in</span> res:</span><br><span class=\"line\">    date = post[<span class=\"number\">2</span>]</span><br><span class=\"line\">    create_date = datetime.datetime.fromisoformat(date).strftime(<span class=\"string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class=\"line\">    post_category = post[-<span class=\"number\">4</span>]</span><br><span class=\"line\">    title = post[<span class=\"number\">3</span>]</span><br><span class=\"line\">    content = post[<span class=\"number\">4</span>]</span><br><span class=\"line\">    head = template.<span class=\"built_in\">format</span>(title, create_date, CATEGORY_MAP[<span class=\"built_in\">str</span>(post_category)])</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        f = <span class=\"built_in\">open</span>(title+ <span class=\"string\">&#x27;.md&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">        f.write(head+content)</span><br><span class=\"line\">        f.close()</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(title)</span><br></pre></td></tr></table></figure>"},{"title":"删除排序数组中的重复项","date":"2019-12-21T01:06:53.000Z","author":"Ginta","img":"http://img.ginta.top/huoying1.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/huoying1.jpg","toc":false,"mathjax":false,"summary":null,"_content":"给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。\r\n\r\n不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。\r\n\r\n>给定数组 nums = [1,1,2], \r\n函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 \r\n你不需要考虑数组中超出新长度后面的元素。\r\n\r\n## 思路\r\n使用双游标方法 *flag* 来记录当前数组不重复的位置，而变量 *j* 控制整个数组的遍历；当 *flag* 位置的数据和 *j* 位置的数据不同时则说明有新的，也就是有效变量进入，此时 *flag* 加 1，同时也要把 *j* 位置的值给 *flag* 位置。\r\n\r\n```\r\nclass Solution:\r\n    def removeDuplicates(self, nums: List[int]) -> int:\r\n        flag = 0\r\n        for j in range(1, len(nums)):\r\n            if nums[j] != nums[flag]:\r\n                flag += 1\r\n                nums[flag] = nums[j]\r\n        return flag+1\r\n```","source":"_posts/删除排序数组中的重复项.md","raw":"---\ntitle: 删除排序数组中的重复项\ndate: 2019-12-21 09:06:53\nauthor: Ginta\nimg: http://img.ginta.top/huoying1.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/huoying1.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: 算法\n---\n给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。\r\n\r\n不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。\r\n\r\n>给定数组 nums = [1,1,2], \r\n函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 \r\n你不需要考虑数组中超出新长度后面的元素。\r\n\r\n## 思路\r\n使用双游标方法 *flag* 来记录当前数组不重复的位置，而变量 *j* 控制整个数组的遍历；当 *flag* 位置的数据和 *j* 位置的数据不同时则说明有新的，也就是有效变量进入，此时 *flag* 加 1，同时也要把 *j* 位置的值给 *flag* 位置。\r\n\r\n```\r\nclass Solution:\r\n    def removeDuplicates(self, nums: List[int]) -> int:\r\n        flag = 0\r\n        for j in range(1, len(nums)):\r\n            if nums[j] != nums[flag]:\r\n                flag += 1\r\n                nums[flag] = nums[j]\r\n        return flag+1\r\n```","slug":"删除排序数组中的重复项","published":1,"updated":"2022-08-11T12:49:48.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p61819004etksc0teu65qk","content":"<p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>\n<blockquote>\n<p>给定数组 nums &#x3D; [1,1,2],<br>函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。<br>你不需要考虑数组中超出新长度后面的元素。</p>\n</blockquote>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>使用双游标方法 <em>flag</em> 来记录当前数组不重复的位置，而变量 <em>j</em> 控制整个数组的遍历；当 <em>flag</em> 位置的数据和 <em>j</em> 位置的数据不同时则说明有新的，也就是有效变量进入，此时 <em>flag</em> 加 1，同时也要把 <em>j</em> 位置的值给 <em>flag</em> 位置。</p>\n<pre><code>class Solution:\n    def removeDuplicates(self, nums: List[int]) -&gt; int:\n        flag = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[flag]:\n                flag += 1\n                nums[flag] = nums[j]\n        return flag+1\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>\n<blockquote>\n<p>给定数组 nums &#x3D; [1,1,2],<br>函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。<br>你不需要考虑数组中超出新长度后面的元素。</p>\n</blockquote>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>使用双游标方法 <em>flag</em> 来记录当前数组不重复的位置，而变量 <em>j</em> 控制整个数组的遍历；当 <em>flag</em> 位置的数据和 <em>j</em> 位置的数据不同时则说明有新的，也就是有效变量进入，此时 <em>flag</em> 加 1，同时也要把 <em>j</em> 位置的值给 <em>flag</em> 位置。</p>\n<pre><code>class Solution:\n    def removeDuplicates(self, nums: List[int]) -&gt; int:\n        flag = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[flag]:\n                flag += 1\n                nums[flag] = nums[j]\n        return flag+1\n</code></pre>\n"},{"title":"围棋第一次胜局","date":"2021-07-08T14:50:21.000Z","author":"Ginta","img":"http://img.ginta.top/weiqi2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/weiqi2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"### 心血来潮\n前几天弟弟说考试比上次进步了，想让得到茫茫多的零食大礼包作为鼓励。考虑到现在的学生也是蛮辛苦的，于是果断奖励了三本课外书，除了《活着》是应付老妈的，《禁区法则》和《天局》一如既往地中二。其中《天局》讲的就是凡人与天人下围棋最终以半子取胜的故事。\n\n### 入门\n给他普及了《天局》故事后顺手就下了个围棋app，百度了一下教程就算入门了。开始是和玩家对弈，想了想不恶心别人了，就人机互啄，难度从入门级降到了儿童级。几天之内下了10几局吧，无一例外全输了，直到今天晚上，终于赢了一局，万分感动。\n附上图以作记录\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210708224624978.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70#pic_center)\n### 其他想说的\n事实证明围棋入门并不难，只是想要精通还是不容易的。比较考验大局观，一子的得失有时候并不重要，总之能赢第一局还是挺高兴的。","source":"_posts/围棋第一次胜局.md","raw":"---\ntitle: 围棋第一次胜局\ndate: 2021-07-08 22:50:21\nauthor: Ginta\nimg: http://img.ginta.top/weiqi2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/weiqi2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - 生活\ncategories: 生活\n---\n### 心血来潮\n前几天弟弟说考试比上次进步了，想让得到茫茫多的零食大礼包作为鼓励。考虑到现在的学生也是蛮辛苦的，于是果断奖励了三本课外书，除了《活着》是应付老妈的，《禁区法则》和《天局》一如既往地中二。其中《天局》讲的就是凡人与天人下围棋最终以半子取胜的故事。\n\n### 入门\n给他普及了《天局》故事后顺手就下了个围棋app，百度了一下教程就算入门了。开始是和玩家对弈，想了想不恶心别人了，就人机互啄，难度从入门级降到了儿童级。几天之内下了10几局吧，无一例外全输了，直到今天晚上，终于赢了一局，万分感动。\n附上图以作记录\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210708224624978.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70#pic_center)\n### 其他想说的\n事实证明围棋入门并不难，只是想要精通还是不容易的。比较考验大局观，一子的得失有时候并不重要，总之能赢第一局还是挺高兴的。","slug":"围棋第一次胜局","published":1,"updated":"2022-08-11T12:49:48.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6181a004htksc5d9470jn","content":"<h3 id=\"心血来潮\"><a href=\"#心血来潮\" class=\"headerlink\" title=\"心血来潮\"></a>心血来潮</h3><p>前几天弟弟说考试比上次进步了，想让得到茫茫多的零食大礼包作为鼓励。考虑到现在的学生也是蛮辛苦的，于是果断奖励了三本课外书，除了《活着》是应付老妈的，《禁区法则》和《天局》一如既往地中二。其中《天局》讲的就是凡人与天人下围棋最终以半子取胜的故事。</p>\n<h3 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h3><p>给他普及了《天局》故事后顺手就下了个围棋app，百度了一下教程就算入门了。开始是和玩家对弈，想了想不恶心别人了，就人机互啄，难度从入门级降到了儿童级。几天之内下了10几局吧，无一例外全输了，直到今天晚上，终于赢了一局，万分感动。<br>附上图以作记录<br><img src=\"https://img-blog.csdnimg.cn/20210708224624978.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"其他想说的\"><a href=\"#其他想说的\" class=\"headerlink\" title=\"其他想说的\"></a>其他想说的</h3><p>事实证明围棋入门并不难，只是想要精通还是不容易的。比较考验大局观，一子的得失有时候并不重要，总之能赢第一局还是挺高兴的。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h3 id=\"心血来潮\"><a href=\"#心血来潮\" class=\"headerlink\" title=\"心血来潮\"></a>心血来潮</h3><p>前几天弟弟说考试比上次进步了，想让得到茫茫多的零食大礼包作为鼓励。考虑到现在的学生也是蛮辛苦的，于是果断奖励了三本课外书，除了《活着》是应付老妈的，《禁区法则》和《天局》一如既往地中二。其中《天局》讲的就是凡人与天人下围棋最终以半子取胜的故事。</p>\n<h3 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h3><p>给他普及了《天局》故事后顺手就下了个围棋app，百度了一下教程就算入门了。开始是和玩家对弈，想了想不恶心别人了，就人机互啄，难度从入门级降到了儿童级。几天之内下了10几局吧，无一例外全输了，直到今天晚上，终于赢了一局，万分感动。<br>附上图以作记录<br><img src=\"https://img-blog.csdnimg.cn/20210708224624978.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"其他想说的\"><a href=\"#其他想说的\" class=\"headerlink\" title=\"其他想说的\"></a>其他想说的</h3><p>事实证明围棋入门并不难，只是想要精通还是不容易的。比较考验大局观，一子的得失有时候并不重要，总之能赢第一局还是挺高兴的。</p>\n"},{"title":"数据库定时备份任务","date":"2020-03-28T08:41:52.000Z","author":"Ginta","img":"http://img.ginta.top/lc1.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/lc1.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 前言\r\n最近因为一次误操作不小心把博客的数据库文件删除了，当时感觉自然是难受的。不过幸运的是之前移动博客文件的时候曾把数据和项目打包了，所以文件又找回来了！！！\r\n虽然文件是找回来了，不过这种情况难免再次发生，而且下次就不一定能找回来了。于是决定写一个定时任务每天备份一下数据库文件。\r\n\r\n使用的第三方库是 **apscheduler**，简单的介绍可以看 [apscheduler](http://ginta.top/detail/41/)，更具体的请参考 [文档](https://apscheduler.readthedocs.io/en/stable/)\r\n\r\n代码如下：\r\n\r\n```\r\n# backup_db.py \r\nimport os\r\nimport datetime\r\n\r\nfrom apscheduler.schedulers.blocking import BlockingScheduler\r\n\r\n\r\nfile_path = \"/root/Workspace/ginta.top/myblog/myblog/db.sqlite3\"\r\nbackup_dir = \"/root/data/backup_blog_db\"\r\n\r\n\r\ndef backup_db(file_path, backup_dir):\r\n    now = datetime.datetime.now()\r\n    date = datetime.datetime.strftime(now, \"%Y-%m-%d\")\r\n    backup_dir = os.path.join(backup_dir, date)\r\n\r\n    os.system(\"mkdir {}\".format(backup_dir))\r\n\r\n    backup_file_dir = os.path.join(backup_dir)\r\n    os.system(\"cp {} {}\".format(file_path, backup_file_dir))\r\n    print(\"{} backup_finished\".format(date))\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"backup_script start!\")\r\n    sched = BlockingScheduler()\r\n    sched.add_job(backup_db, 'interval', [file_path, backup_dir], seconds=60 * 60 * 24)\r\n    sched.start()\r\n```\r\n然后执行 `nohup python -u backup_db.py > /root/data/log/back_db/backup_db.log 2>&1 &` 就放到后台了\r\n\r\n### 总结\r\n实现了每天定时备份一次数据库，但是也很不优雅。\r\n1. 在 *python* 脚本中执行 *mkdir* 和 *cp* 命令是很不好的.\r\n2. 以后脚本多了就很不好管理，问了一下公司我带的大佬推荐了两种管理方式，分别是 **jenkins** 和 **crontab**.","source":"_posts/数据库定时备份任务.md","raw":"---\ntitle: 数据库定时备份任务\ndate: 2020-03-28 16:41:52\nauthor: Ginta\nimg: http://img.ginta.top/lc1.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/lc1.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - python\ncategories: python\n---\n## 前言\r\n最近因为一次误操作不小心把博客的数据库文件删除了，当时感觉自然是难受的。不过幸运的是之前移动博客文件的时候曾把数据和项目打包了，所以文件又找回来了！！！\r\n虽然文件是找回来了，不过这种情况难免再次发生，而且下次就不一定能找回来了。于是决定写一个定时任务每天备份一下数据库文件。\r\n\r\n使用的第三方库是 **apscheduler**，简单的介绍可以看 [apscheduler](http://ginta.top/detail/41/)，更具体的请参考 [文档](https://apscheduler.readthedocs.io/en/stable/)\r\n\r\n代码如下：\r\n\r\n```\r\n# backup_db.py \r\nimport os\r\nimport datetime\r\n\r\nfrom apscheduler.schedulers.blocking import BlockingScheduler\r\n\r\n\r\nfile_path = \"/root/Workspace/ginta.top/myblog/myblog/db.sqlite3\"\r\nbackup_dir = \"/root/data/backup_blog_db\"\r\n\r\n\r\ndef backup_db(file_path, backup_dir):\r\n    now = datetime.datetime.now()\r\n    date = datetime.datetime.strftime(now, \"%Y-%m-%d\")\r\n    backup_dir = os.path.join(backup_dir, date)\r\n\r\n    os.system(\"mkdir {}\".format(backup_dir))\r\n\r\n    backup_file_dir = os.path.join(backup_dir)\r\n    os.system(\"cp {} {}\".format(file_path, backup_file_dir))\r\n    print(\"{} backup_finished\".format(date))\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"backup_script start!\")\r\n    sched = BlockingScheduler()\r\n    sched.add_job(backup_db, 'interval', [file_path, backup_dir], seconds=60 * 60 * 24)\r\n    sched.start()\r\n```\r\n然后执行 `nohup python -u backup_db.py > /root/data/log/back_db/backup_db.log 2>&1 &` 就放到后台了\r\n\r\n### 总结\r\n实现了每天定时备份一次数据库，但是也很不优雅。\r\n1. 在 *python* 脚本中执行 *mkdir* 和 *cp* 命令是很不好的.\r\n2. 以后脚本多了就很不好管理，问了一下公司我带的大佬推荐了两种管理方式，分别是 **jenkins** 和 **crontab**.","slug":"数据库定时备份任务","published":1,"updated":"2022-08-11T12:49:48.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6181a004ltksc9ze72hgi","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近因为一次误操作不小心把博客的数据库文件删除了，当时感觉自然是难受的。不过幸运的是之前移动博客文件的时候曾把数据和项目打包了，所以文件又找回来了！！！<br>虽然文件是找回来了，不过这种情况难免再次发生，而且下次就不一定能找回来了。于是决定写一个定时任务每天备份一下数据库文件。</p>\n<p>使用的第三方库是 <strong>apscheduler</strong>，简单的介绍可以看 <a href=\"http://ginta.top/detail/41/\">apscheduler</a>，更具体的请参考 <a href=\"https://apscheduler.readthedocs.io/en/stable/\">文档</a></p>\n<p>代码如下：</p>\n<pre><code># backup_db.py \nimport os\nimport datetime\n\nfrom apscheduler.schedulers.blocking import BlockingScheduler\n\n\nfile_path = &quot;/root/Workspace/ginta.top/myblog/myblog/db.sqlite3&quot;\nbackup_dir = &quot;/root/data/backup_blog_db&quot;\n\n\ndef backup_db(file_path, backup_dir):\n    now = datetime.datetime.now()\n    date = datetime.datetime.strftime(now, &quot;%Y-%m-%d&quot;)\n    backup_dir = os.path.join(backup_dir, date)\n\n    os.system(&quot;mkdir &#123;&#125;&quot;.format(backup_dir))\n\n    backup_file_dir = os.path.join(backup_dir)\n    os.system(&quot;cp &#123;&#125; &#123;&#125;&quot;.format(file_path, backup_file_dir))\n    print(&quot;&#123;&#125; backup_finished&quot;.format(date))\n\nif __name__ == &quot;__main__&quot;:\n    print(&quot;backup_script start!&quot;)\n    sched = BlockingScheduler()\n    sched.add_job(backup_db, &#39;interval&#39;, [file_path, backup_dir], seconds=60 * 60 * 24)\n    sched.start()\n</code></pre>\n<p>然后执行 <code>nohup python -u backup_db.py &gt; /root/data/log/back_db/backup_db.log 2&gt;&amp;1 &amp;</code> 就放到后台了</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>实现了每天定时备份一次数据库，但是也很不优雅。</p>\n<ol>\n<li>在 <em>python</em> 脚本中执行 <em>mkdir</em> 和 <em>cp</em> 命令是很不好的.</li>\n<li>以后脚本多了就很不好管理，问了一下公司我带的大佬推荐了两种管理方式，分别是 <strong>jenkins</strong> 和 <strong>crontab</strong>.</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近因为一次误操作不小心把博客的数据库文件删除了，当时感觉自然是难受的。不过幸运的是之前移动博客文件的时候曾把数据和项目打包了，所以文件又找回来了！！！<br>虽然文件是找回来了，不过这种情况难免再次发生，而且下次就不一定能找回来了。于是决定写一个定时任务每天备份一下数据库文件。</p>\n<p>使用的第三方库是 <strong>apscheduler</strong>，简单的介绍可以看 <a href=\"http://ginta.top/detail/41/\">apscheduler</a>，更具体的请参考 <a href=\"https://apscheduler.readthedocs.io/en/stable/\">文档</a></p>\n<p>代码如下：</p>\n<pre><code># backup_db.py \nimport os\nimport datetime\n\nfrom apscheduler.schedulers.blocking import BlockingScheduler\n\n\nfile_path = &quot;/root/Workspace/ginta.top/myblog/myblog/db.sqlite3&quot;\nbackup_dir = &quot;/root/data/backup_blog_db&quot;\n\n\ndef backup_db(file_path, backup_dir):\n    now = datetime.datetime.now()\n    date = datetime.datetime.strftime(now, &quot;%Y-%m-%d&quot;)\n    backup_dir = os.path.join(backup_dir, date)\n\n    os.system(&quot;mkdir &#123;&#125;&quot;.format(backup_dir))\n\n    backup_file_dir = os.path.join(backup_dir)\n    os.system(&quot;cp &#123;&#125; &#123;&#125;&quot;.format(file_path, backup_file_dir))\n    print(&quot;&#123;&#125; backup_finished&quot;.format(date))\n\nif __name__ == &quot;__main__&quot;:\n    print(&quot;backup_script start!&quot;)\n    sched = BlockingScheduler()\n    sched.add_job(backup_db, &#39;interval&#39;, [file_path, backup_dir], seconds=60 * 60 * 24)\n    sched.start()\n</code></pre>\n<p>然后执行 <code>nohup python -u backup_db.py &gt; /root/data/log/back_db/backup_db.log 2&gt;&amp;1 &amp;</code> 就放到后台了</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>实现了每天定时备份一次数据库，但是也很不优雅。</p>\n<ol>\n<li>在 <em>python</em> 脚本中执行 <em>mkdir</em> 和 <em>cp</em> 命令是很不好的.</li>\n<li>以后脚本多了就很不好管理，问了一下公司我带的大佬推荐了两种管理方式，分别是 <strong>jenkins</strong> 和 <strong>crontab</strong>.</li>\n</ol>\n"},{"title":"来到深圳","date":"2019-12-15T19:17:09.000Z","author":"Ginta","img":"http://img.ginta.top/qinshi1.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/qinshi1.jpg","toc":false,"mathjax":false,"summary":null,"_content":"很早以前，还是上大二的时候就一直想到深圳发展，后来毕业了就在成都工作。想了很久最后还是来到了深圳，虽然没有亲戚和同学，幸运的是仍有朋友在我刚到深圳的时候招待了一天，还帮我一起去租房。虽然今后怎样还是个未知数，但想想曾经帮助过我的人，还是有了奋斗的动力！！","source":"_posts/来到深圳.md","raw":"---\ntitle: 来到深圳\ndate: 2019-12-16 03:17:09\nauthor: Ginta\nimg: http://img.ginta.top/qinshi1.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/qinshi1.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: 生活\n---\n很早以前，还是上大二的时候就一直想到深圳发展，后来毕业了就在成都工作。想了很久最后还是来到了深圳，虽然没有亲戚和同学，幸运的是仍有朋友在我刚到深圳的时候招待了一天，还帮我一起去租房。虽然今后怎样还是个未知数，但想想曾经帮助过我的人，还是有了奋斗的动力！！","slug":"来到深圳","published":1,"updated":"2022-08-11T12:49:48.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6181a004otkscaoap81am","content":"<p>很早以前，还是上大二的时候就一直想到深圳发展，后来毕业了就在成都工作。想了很久最后还是来到了深圳，虽然没有亲戚和同学，幸运的是仍有朋友在我刚到深圳的时候招待了一天，还帮我一起去租房。虽然今后怎样还是个未知数，但想想曾经帮助过我的人，还是有了奋斗的动力！！</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<p>很早以前，还是上大二的时候就一直想到深圳发展，后来毕业了就在成都工作。想了很久最后还是来到了深圳，虽然没有亲戚和同学，幸运的是仍有朋友在我刚到深圳的时候招待了一天，还帮我一起去租房。虽然今后怎样还是个未知数，但想想曾经帮助过我的人，还是有了奋斗的动力！！</p>\n"},{"title":"树莓派4b ubuntu 20 设置阿里源","date":"2020-09-05T09:55:01.000Z","author":"Ginta","img":"http://img.ginta.top/chaoshou2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/chaoshou2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 前言\r\n设置国内源其实很简单，但是由于我是下载的 64位 操作系统，并且树莓派是arm架构，所以有一点不同\r\n执行 `lsb_release -a` 查看发行版本\r\n```\r\nubuntu@ubuntu:/etc/netplan$ lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu 20.04.1 LTS\r\nRelease:\t20.04\r\nCodename:\tfocal\r\n```\r\n所以修改配置文件 `sudo vim /etc/apt/sources.list`:\r\n```\r\n## Note, this file is written by cloud-init on first boot of an instance\r\n## modifications made here will not survive a re-bundle.\r\n## if you wish to make changes you can:\r\n## a.) add 'apt_preserve_sources_list: true' to /etc/cloud/cloud.cfg\r\n##     or do the same in user-data\r\n## b.) add sources in /etc/apt/sources.list.d\r\n## c.) make changes to template file /etc/cloud/templates/sources.list.tmpl\r\n\r\n# See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to\r\n# newer versions of the distribution.\r\ndeb http://mirrors.aliyun.com/ubuntu-ports focal main restricted\r\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal main restricted\r\n\r\n## Major bug fix updates produced after the final release of the\r\n## distribution.\r\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-updates main restricted\r\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-updates main restricted\r\n\r\n## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu\r\n## team. Also, please note that software in universe WILL NOT receive any\r\n## review or updates from the Ubuntu security team.\r\ndeb http://mirrors.aliyun.com/ubuntu-ports focal universe\r\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal universe\r\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-updates universe\r\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-updates universe\r\n\r\n## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu\r\n## team, and may not be under a free licence. Please satisfy yourself as to\r\n## your rights to use the software. Also, please note that software in\r\n## multiverse WILL NOT receive any review or updates from the Ubuntu\r\n## security team.\r\ndeb http://mirrors.aliyun.com/ubuntu-ports focal multiverse\r\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal multiverse\r\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-updates multiverse\r\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-updates multiverse\r\n\r\n## N.B. software from this repository may not have been tested as\r\n## extensively as that contained in the main release, although it includes\r\n## newer versions of some applications which may provide useful features.\r\n## Also, please note that software in backports WILL NOT receive any review\r\n## or updates from the Ubuntu security team.\r\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-backports main restricted universe multiverse\r\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-backports main restricted universe multiverse\r\n\r\n## Uncomment the following two lines to add software from Canonical's\r\n## 'partner' repository.\r\n## This software is not part of Ubuntu, but is offered by Canonical and the\r\n## respective vendors as a service to Ubuntu users.\r\n# deb http://archive.canonical.com/ubuntu focal partner\r\n# deb-src http://archive.canonical.com/ubuntu focal partner\r\n\r\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-security main restricted\r\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-security main restricted\r\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-security universe\r\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-security universe\r\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-security multiverse\r\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-security multiverse\r\n```\r\n\r\n## 注意\r\n由于是 **arm架构，一定要改成  http://mirrors.aliyun.com/ubuntu-ports 而不是  http://mirrors.aliyun.com/ubuntu，否则无法正常更新下载！！！**。","source":"_posts/树莓派4b ubuntu 20 设置阿里源.md","raw":"---\ntitle: 树莓派4b ubuntu 20 设置阿里源\ndate: 2020-09-05 17:55:01\nauthor: Ginta\nimg: http://img.ginta.top/chaoshou2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/chaoshou2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: 树莓派\n---\n## 前言\r\n设置国内源其实很简单，但是由于我是下载的 64位 操作系统，并且树莓派是arm架构，所以有一点不同\r\n执行 `lsb_release -a` 查看发行版本\r\n```\r\nubuntu@ubuntu:/etc/netplan$ lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu 20.04.1 LTS\r\nRelease:\t20.04\r\nCodename:\tfocal\r\n```\r\n所以修改配置文件 `sudo vim /etc/apt/sources.list`:\r\n```\r\n## Note, this file is written by cloud-init on first boot of an instance\r\n## modifications made here will not survive a re-bundle.\r\n## if you wish to make changes you can:\r\n## a.) add 'apt_preserve_sources_list: true' to /etc/cloud/cloud.cfg\r\n##     or do the same in user-data\r\n## b.) add sources in /etc/apt/sources.list.d\r\n## c.) make changes to template file /etc/cloud/templates/sources.list.tmpl\r\n\r\n# See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to\r\n# newer versions of the distribution.\r\ndeb http://mirrors.aliyun.com/ubuntu-ports focal main restricted\r\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal main restricted\r\n\r\n## Major bug fix updates produced after the final release of the\r\n## distribution.\r\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-updates main restricted\r\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-updates main restricted\r\n\r\n## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu\r\n## team. Also, please note that software in universe WILL NOT receive any\r\n## review or updates from the Ubuntu security team.\r\ndeb http://mirrors.aliyun.com/ubuntu-ports focal universe\r\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal universe\r\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-updates universe\r\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-updates universe\r\n\r\n## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu\r\n## team, and may not be under a free licence. Please satisfy yourself as to\r\n## your rights to use the software. Also, please note that software in\r\n## multiverse WILL NOT receive any review or updates from the Ubuntu\r\n## security team.\r\ndeb http://mirrors.aliyun.com/ubuntu-ports focal multiverse\r\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal multiverse\r\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-updates multiverse\r\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-updates multiverse\r\n\r\n## N.B. software from this repository may not have been tested as\r\n## extensively as that contained in the main release, although it includes\r\n## newer versions of some applications which may provide useful features.\r\n## Also, please note that software in backports WILL NOT receive any review\r\n## or updates from the Ubuntu security team.\r\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-backports main restricted universe multiverse\r\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-backports main restricted universe multiverse\r\n\r\n## Uncomment the following two lines to add software from Canonical's\r\n## 'partner' repository.\r\n## This software is not part of Ubuntu, but is offered by Canonical and the\r\n## respective vendors as a service to Ubuntu users.\r\n# deb http://archive.canonical.com/ubuntu focal partner\r\n# deb-src http://archive.canonical.com/ubuntu focal partner\r\n\r\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-security main restricted\r\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-security main restricted\r\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-security universe\r\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-security universe\r\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-security multiverse\r\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-security multiverse\r\n```\r\n\r\n## 注意\r\n由于是 **arm架构，一定要改成  http://mirrors.aliyun.com/ubuntu-ports 而不是  http://mirrors.aliyun.com/ubuntu，否则无法正常更新下载！！！**。","slug":"树莓派4b ubuntu 20 设置阿里源","published":1,"updated":"2022-08-11T12:49:48.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6181a004rtkscdvsq80vg","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>设置国内源其实很简单，但是由于我是下载的 64位 操作系统，并且树莓派是arm架构，所以有一点不同<br>执行 <code>lsb_release -a</code> 查看发行版本</p>\n<pre><code>ubuntu@ubuntu:/etc/netplan$ lsb_release -a\nNo LSB modules are available.\nDistributor ID:\tUbuntu\nDescription:\tUbuntu 20.04.1 LTS\nRelease:\t20.04\nCodename:\tfocal\n</code></pre>\n<p>所以修改配置文件 <code>sudo vim /etc/apt/sources.list</code>:</p>\n<pre><code>## Note, this file is written by cloud-init on first boot of an instance\n## modifications made here will not survive a re-bundle.\n## if you wish to make changes you can:\n## a.) add &#39;apt_preserve_sources_list: true&#39; to /etc/cloud/cloud.cfg\n##     or do the same in user-data\n## b.) add sources in /etc/apt/sources.list.d\n## c.) make changes to template file /etc/cloud/templates/sources.list.tmpl\n\n# See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to\n# newer versions of the distribution.\ndeb http://mirrors.aliyun.com/ubuntu-ports focal main restricted\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal main restricted\n\n## Major bug fix updates produced after the final release of the\n## distribution.\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-updates main restricted\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-updates main restricted\n\n## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu\n## team. Also, please note that software in universe WILL NOT receive any\n## review or updates from the Ubuntu security team.\ndeb http://mirrors.aliyun.com/ubuntu-ports focal universe\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal universe\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-updates universe\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-updates universe\n\n## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu\n## team, and may not be under a free licence. Please satisfy yourself as to\n## your rights to use the software. Also, please note that software in\n## multiverse WILL NOT receive any review or updates from the Ubuntu\n## security team.\ndeb http://mirrors.aliyun.com/ubuntu-ports focal multiverse\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal multiverse\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-updates multiverse\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-updates multiverse\n\n## N.B. software from this repository may not have been tested as\n## extensively as that contained in the main release, although it includes\n## newer versions of some applications which may provide useful features.\n## Also, please note that software in backports WILL NOT receive any review\n## or updates from the Ubuntu security team.\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-backports main restricted universe multiverse\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-backports main restricted universe multiverse\n\n## Uncomment the following two lines to add software from Canonical&#39;s\n## &#39;partner&#39; repository.\n## This software is not part of Ubuntu, but is offered by Canonical and the\n## respective vendors as a service to Ubuntu users.\n# deb http://archive.canonical.com/ubuntu focal partner\n# deb-src http://archive.canonical.com/ubuntu focal partner\n\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-security main restricted\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-security main restricted\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-security universe\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-security universe\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-security multiverse\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-security multiverse\n</code></pre>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>由于是 <strong>arm架构，一定要改成  <a href=\"http://mirrors.aliyun.com/ubuntu-ports\">http://mirrors.aliyun.com/ubuntu-ports</a> 而不是  <a href=\"http://mirrors.aliyun.com/ubuntu%EF%BC%8C%E5%90%A6%E5%88%99%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E6%9B%B4%E6%96%B0%E4%B8%8B%E8%BD%BD%EF%BC%81%EF%BC%81%EF%BC%81\">http://mirrors.aliyun.com/ubuntu，否则无法正常更新下载！！！</a></strong>。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>设置国内源其实很简单，但是由于我是下载的 64位 操作系统，并且树莓派是arm架构，所以有一点不同<br>执行 <code>lsb_release -a</code> 查看发行版本</p>\n<pre><code>ubuntu@ubuntu:/etc/netplan$ lsb_release -a\nNo LSB modules are available.\nDistributor ID:\tUbuntu\nDescription:\tUbuntu 20.04.1 LTS\nRelease:\t20.04\nCodename:\tfocal\n</code></pre>\n<p>所以修改配置文件 <code>sudo vim /etc/apt/sources.list</code>:</p>\n<pre><code>## Note, this file is written by cloud-init on first boot of an instance\n## modifications made here will not survive a re-bundle.\n## if you wish to make changes you can:\n## a.) add &#39;apt_preserve_sources_list: true&#39; to /etc/cloud/cloud.cfg\n##     or do the same in user-data\n## b.) add sources in /etc/apt/sources.list.d\n## c.) make changes to template file /etc/cloud/templates/sources.list.tmpl\n\n# See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to\n# newer versions of the distribution.\ndeb http://mirrors.aliyun.com/ubuntu-ports focal main restricted\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal main restricted\n\n## Major bug fix updates produced after the final release of the\n## distribution.\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-updates main restricted\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-updates main restricted\n\n## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu\n## team. Also, please note that software in universe WILL NOT receive any\n## review or updates from the Ubuntu security team.\ndeb http://mirrors.aliyun.com/ubuntu-ports focal universe\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal universe\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-updates universe\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-updates universe\n\n## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu\n## team, and may not be under a free licence. Please satisfy yourself as to\n## your rights to use the software. Also, please note that software in\n## multiverse WILL NOT receive any review or updates from the Ubuntu\n## security team.\ndeb http://mirrors.aliyun.com/ubuntu-ports focal multiverse\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal multiverse\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-updates multiverse\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-updates multiverse\n\n## N.B. software from this repository may not have been tested as\n## extensively as that contained in the main release, although it includes\n## newer versions of some applications which may provide useful features.\n## Also, please note that software in backports WILL NOT receive any review\n## or updates from the Ubuntu security team.\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-backports main restricted universe multiverse\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-backports main restricted universe multiverse\n\n## Uncomment the following two lines to add software from Canonical&#39;s\n## &#39;partner&#39; repository.\n## This software is not part of Ubuntu, but is offered by Canonical and the\n## respective vendors as a service to Ubuntu users.\n# deb http://archive.canonical.com/ubuntu focal partner\n# deb-src http://archive.canonical.com/ubuntu focal partner\n\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-security main restricted\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-security main restricted\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-security universe\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-security universe\ndeb http://mirrors.aliyun.com/ubuntu-ports focal-security multiverse\n# deb-src http://mirrors.aliyun.com/ubuntu-ports focal-security multiverse\n</code></pre>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>由于是 <strong>arm架构，一定要改成  <a href=\"http://mirrors.aliyun.com/ubuntu-ports\">http://mirrors.aliyun.com/ubuntu-ports</a> 而不是  <a href=\"http://mirrors.aliyun.com/ubuntu%EF%BC%8C%E5%90%A6%E5%88%99%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E6%9B%B4%E6%96%B0%E4%B8%8B%E8%BD%BD%EF%BC%81%EF%BC%81%EF%BC%81\">http://mirrors.aliyun.com/ubuntu，否则无法正常更新下载！！！</a></strong>。</p>\n"},{"title":"树莓派frp内网穿透","date":"2020-05-30T20:17:22.000Z","author":"Ginta","img":"http://img.ginta.top/huoying1.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/huoying1.jpg","toc":false,"mathjax":false,"summary":null,"_content":"### 前言\r\n目的是实现外网连接树莓派\r\n\r\n### 步骤\r\n```\r\n# 客户端（树莓派）frpc.ini \r\n[common]\r\nserver_addr = 120.79.215.235\r\nserver_port = 7000\r\n\r\n[ssh]\r\ntype = tcp\r\nlocal_ip = 127.0.0.1\r\nlocal_port = 22\r\nremote_port = 6000\r\n```\r\n然后执行 `./frps -c ./frps.ini`\r\n\r\n```\r\n# 服务端（阿里云服务器） \r\n[common]\r\n\r\n[common]\r\n# 本机公网ip 120.79.215.235\r\nbind_port = 7000\r\n```\r\n然后执行 `./frpc -c ./frpc.ini`\r\n\r\n\r\n最后通过 *xshell* 连接\r\n![](http://img.ginta.top/markdownx/2020/05/02/0d5c197a-a50b-47f1-a3e5-680e16ddc59d.png)\r\n\r\n或者命令行 `ssh -oPort=6000 pi@120.79.215.235`\r\n但是不知道为什么命令行的方式在 *xshell* 老提示密码错误。","source":"_posts/树莓派frp内网穿透.md","raw":"---\ntitle: 树莓派frp内网穿透\ndate: 2020-05-31 04:17:22\nauthor: Ginta\nimg: http://img.ginta.top/huoying1.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/huoying1.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: 树莓派\n---\n### 前言\r\n目的是实现外网连接树莓派\r\n\r\n### 步骤\r\n```\r\n# 客户端（树莓派）frpc.ini \r\n[common]\r\nserver_addr = 120.79.215.235\r\nserver_port = 7000\r\n\r\n[ssh]\r\ntype = tcp\r\nlocal_ip = 127.0.0.1\r\nlocal_port = 22\r\nremote_port = 6000\r\n```\r\n然后执行 `./frps -c ./frps.ini`\r\n\r\n```\r\n# 服务端（阿里云服务器） \r\n[common]\r\n\r\n[common]\r\n# 本机公网ip 120.79.215.235\r\nbind_port = 7000\r\n```\r\n然后执行 `./frpc -c ./frpc.ini`\r\n\r\n\r\n最后通过 *xshell* 连接\r\n![](http://img.ginta.top/markdownx/2020/05/02/0d5c197a-a50b-47f1-a3e5-680e16ddc59d.png)\r\n\r\n或者命令行 `ssh -oPort=6000 pi@120.79.215.235`\r\n但是不知道为什么命令行的方式在 *xshell* 老提示密码错误。","slug":"树莓派frp内网穿透","published":1,"updated":"2022-08-11T12:49:48.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6181b004vtksc5tv30alg","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>目的是实现外网连接树莓派</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><pre><code># 客户端（树莓派）frpc.ini \n[common]\nserver_addr = 120.79.215.235\nserver_port = 7000\n\n[ssh]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 6000\n</code></pre>\n<p>然后执行 <code>./frps -c ./frps.ini</code></p>\n<pre><code># 服务端（阿里云服务器） \n[common]\n\n[common]\n# 本机公网ip 120.79.215.235\nbind_port = 7000\n</code></pre>\n<p>然后执行 <code>./frpc -c ./frpc.ini</code></p>\n<p>最后通过 <em>xshell</em> 连接<br><img src=\"http://img.ginta.top/markdownx/2020/05/02/0d5c197a-a50b-47f1-a3e5-680e16ddc59d.png\"></p>\n<p>或者命令行 <code>ssh -oPort=6000 pi@120.79.215.235</code><br>但是不知道为什么命令行的方式在 <em>xshell</em> 老提示密码错误。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>目的是实现外网连接树莓派</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><pre><code># 客户端（树莓派）frpc.ini \n[common]\nserver_addr = 120.79.215.235\nserver_port = 7000\n\n[ssh]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 6000\n</code></pre>\n<p>然后执行 <code>./frps -c ./frps.ini</code></p>\n<pre><code># 服务端（阿里云服务器） \n[common]\n\n[common]\n# 本机公网ip 120.79.215.235\nbind_port = 7000\n</code></pre>\n<p>然后执行 <code>./frpc -c ./frpc.ini</code></p>\n<p>最后通过 <em>xshell</em> 连接<br><img src=\"http://img.ginta.top/markdownx/2020/05/02/0d5c197a-a50b-47f1-a3e5-680e16ddc59d.png\"></p>\n<p>或者命令行 <code>ssh -oPort=6000 pi@120.79.215.235</code><br>但是不知道为什么命令行的方式在 <em>xshell</em> 老提示密码错误。</p>\n"},{"title":"树莓派ubuntu 20 网络设置","date":"2020-09-05T09:49:26.000Z","author":"Ginta","img":"http://img.ginta.top/dm2.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/dm2.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 前言\n\n在树莓派4B上配置一个 *ubuntu 20 LTS* 网络环境折腾了挺久的，在此记录一下以免下次再次采坑。\n\n```\n\n# 编辑 /etc/netplan/50-cloud-init.yaml 改成如下\n\nnetwork:\n\n    ethernets:\n\n        eth0:\n\n            dhcp4: true\n\n            optional: true\n\n    version: 2\n\n    wifis:\n\n        wlan0:\n\n            access-points:\n\n                \"Danke42168_1\":  # 这个是wifi名字\n\n                    password: \"wifi.danke.life\"   # 这是wifi密码\n\n            dhcp4: true\n\n            optional: true\n\n```\n\n## 最后\n\n如果没有显示器可以先修改 root文件夹下的 **network-config** 文件， **一定要在第一次开机前设置，否则无法生效**。不过由于安装包用的是国外的源，所以一般还是要接上显示器来配置国内源\n\n如果想设置固定ip可以追加配置，最终配置如下：\n\n```\n\n# This file is generated from information provided by the datasource.  Changes\n\n# to it will not persist across an instance reboot.  To disable cloud-init's\n\n# network configuration capabilities, write a file\n\n# /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:\n\n# network: {config: disabled}\n\nnetwork:\n\n    ethernets:\n\n        eth0:\n\n            dhcp4: true\n\n            optional: true\n\n    version: 2\n\n    wifis:\n\n        wlan0:\n\n            access-points:\n\n                \"Danke42168_1\":\n\n                    password: \"wifi.danke.life\"\n\n            dhcp4: true\n\n            optional: true\n\n            addresses: [192.168.124.18/24]\n\n            gateway4: 192.168.124.1\n\n            nameservers:\n\n                addresses: [192.168.124.1, 8.8.8.8]\n\n```","source":"_posts/树莓派ubuntu 20 网络设置.md","raw":"---\ntitle: 树莓派ubuntu 20 网络设置\ndate: 2020-09-05 17:49:26\nauthor: Ginta\nimg: http://img.ginta.top/dm2.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/dm2.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - 树莓派\ncategories: 树莓派\n---\n## 前言\n\n在树莓派4B上配置一个 *ubuntu 20 LTS* 网络环境折腾了挺久的，在此记录一下以免下次再次采坑。\n\n```\n\n# 编辑 /etc/netplan/50-cloud-init.yaml 改成如下\n\nnetwork:\n\n    ethernets:\n\n        eth0:\n\n            dhcp4: true\n\n            optional: true\n\n    version: 2\n\n    wifis:\n\n        wlan0:\n\n            access-points:\n\n                \"Danke42168_1\":  # 这个是wifi名字\n\n                    password: \"wifi.danke.life\"   # 这是wifi密码\n\n            dhcp4: true\n\n            optional: true\n\n```\n\n## 最后\n\n如果没有显示器可以先修改 root文件夹下的 **network-config** 文件， **一定要在第一次开机前设置，否则无法生效**。不过由于安装包用的是国外的源，所以一般还是要接上显示器来配置国内源\n\n如果想设置固定ip可以追加配置，最终配置如下：\n\n```\n\n# This file is generated from information provided by the datasource.  Changes\n\n# to it will not persist across an instance reboot.  To disable cloud-init's\n\n# network configuration capabilities, write a file\n\n# /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:\n\n# network: {config: disabled}\n\nnetwork:\n\n    ethernets:\n\n        eth0:\n\n            dhcp4: true\n\n            optional: true\n\n    version: 2\n\n    wifis:\n\n        wlan0:\n\n            access-points:\n\n                \"Danke42168_1\":\n\n                    password: \"wifi.danke.life\"\n\n            dhcp4: true\n\n            optional: true\n\n            addresses: [192.168.124.18/24]\n\n            gateway4: 192.168.124.1\n\n            nameservers:\n\n                addresses: [192.168.124.1, 8.8.8.8]\n\n```","slug":"树莓派ubuntu 20 网络设置","published":1,"updated":"2022-08-11T12:49:48.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6181b004ztkscfjr0dgic","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在树莓派4B上配置一个 <em>ubuntu 20 LTS</em> 网络环境折腾了挺久的，在此记录一下以免下次再次采坑。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 编辑 /etc/netplan/50-cloud-init.yaml 改成如下</span><br><span class=\"line\"></span><br><span class=\"line\">network:</span><br><span class=\"line\"></span><br><span class=\"line\">    ethernets:</span><br><span class=\"line\"></span><br><span class=\"line\">        eth0:</span><br><span class=\"line\"></span><br><span class=\"line\">            dhcp4: true</span><br><span class=\"line\"></span><br><span class=\"line\">            optional: true</span><br><span class=\"line\"></span><br><span class=\"line\">    version: 2</span><br><span class=\"line\"></span><br><span class=\"line\">    wifis:</span><br><span class=\"line\"></span><br><span class=\"line\">        wlan0:</span><br><span class=\"line\"></span><br><span class=\"line\">            access-points:</span><br><span class=\"line\"></span><br><span class=\"line\">                &quot;Danke42168_1&quot;:  # 这个是wifi名字</span><br><span class=\"line\"></span><br><span class=\"line\">                    password: &quot;wifi.danke.life&quot;   # 这是wifi密码</span><br><span class=\"line\"></span><br><span class=\"line\">            dhcp4: true</span><br><span class=\"line\"></span><br><span class=\"line\">            optional: true</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>如果没有显示器可以先修改 root文件夹下的 <strong>network-config</strong> 文件， <strong>一定要在第一次开机前设置，否则无法生效</strong>。不过由于安装包用的是国外的源，所以一般还是要接上显示器来配置国内源</p>\n<p>如果想设置固定ip可以追加配置，最终配置如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># This file is generated from information provided by the datasource.  Changes</span><br><span class=\"line\"></span><br><span class=\"line\"># to it will not persist across an instance reboot.  To disable cloud-init&#x27;s</span><br><span class=\"line\"></span><br><span class=\"line\"># network configuration capabilities, write a file</span><br><span class=\"line\"></span><br><span class=\"line\"># /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:</span><br><span class=\"line\"></span><br><span class=\"line\"># network: &#123;config: disabled&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">network:</span><br><span class=\"line\"></span><br><span class=\"line\">    ethernets:</span><br><span class=\"line\"></span><br><span class=\"line\">        eth0:</span><br><span class=\"line\"></span><br><span class=\"line\">            dhcp4: true</span><br><span class=\"line\"></span><br><span class=\"line\">            optional: true</span><br><span class=\"line\"></span><br><span class=\"line\">    version: 2</span><br><span class=\"line\"></span><br><span class=\"line\">    wifis:</span><br><span class=\"line\"></span><br><span class=\"line\">        wlan0:</span><br><span class=\"line\"></span><br><span class=\"line\">            access-points:</span><br><span class=\"line\"></span><br><span class=\"line\">                &quot;Danke42168_1&quot;:</span><br><span class=\"line\"></span><br><span class=\"line\">                    password: &quot;wifi.danke.life&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">            dhcp4: true</span><br><span class=\"line\"></span><br><span class=\"line\">            optional: true</span><br><span class=\"line\"></span><br><span class=\"line\">            addresses: [192.168.124.18/24]</span><br><span class=\"line\"></span><br><span class=\"line\">            gateway4: 192.168.124.1</span><br><span class=\"line\"></span><br><span class=\"line\">            nameservers:</span><br><span class=\"line\"></span><br><span class=\"line\">                addresses: [192.168.124.1, 8.8.8.8]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在树莓派4B上配置一个 <em>ubuntu 20 LTS</em> 网络环境折腾了挺久的，在此记录一下以免下次再次采坑。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 编辑 /etc/netplan/50-cloud-init.yaml 改成如下</span><br><span class=\"line\"></span><br><span class=\"line\">network:</span><br><span class=\"line\"></span><br><span class=\"line\">    ethernets:</span><br><span class=\"line\"></span><br><span class=\"line\">        eth0:</span><br><span class=\"line\"></span><br><span class=\"line\">            dhcp4: true</span><br><span class=\"line\"></span><br><span class=\"line\">            optional: true</span><br><span class=\"line\"></span><br><span class=\"line\">    version: 2</span><br><span class=\"line\"></span><br><span class=\"line\">    wifis:</span><br><span class=\"line\"></span><br><span class=\"line\">        wlan0:</span><br><span class=\"line\"></span><br><span class=\"line\">            access-points:</span><br><span class=\"line\"></span><br><span class=\"line\">                &quot;Danke42168_1&quot;:  # 这个是wifi名字</span><br><span class=\"line\"></span><br><span class=\"line\">                    password: &quot;wifi.danke.life&quot;   # 这是wifi密码</span><br><span class=\"line\"></span><br><span class=\"line\">            dhcp4: true</span><br><span class=\"line\"></span><br><span class=\"line\">            optional: true</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>如果没有显示器可以先修改 root文件夹下的 <strong>network-config</strong> 文件， <strong>一定要在第一次开机前设置，否则无法生效</strong>。不过由于安装包用的是国外的源，所以一般还是要接上显示器来配置国内源</p>\n<p>如果想设置固定ip可以追加配置，最终配置如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># This file is generated from information provided by the datasource.  Changes</span><br><span class=\"line\"></span><br><span class=\"line\"># to it will not persist across an instance reboot.  To disable cloud-init&#x27;s</span><br><span class=\"line\"></span><br><span class=\"line\"># network configuration capabilities, write a file</span><br><span class=\"line\"></span><br><span class=\"line\"># /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:</span><br><span class=\"line\"></span><br><span class=\"line\"># network: &#123;config: disabled&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">network:</span><br><span class=\"line\"></span><br><span class=\"line\">    ethernets:</span><br><span class=\"line\"></span><br><span class=\"line\">        eth0:</span><br><span class=\"line\"></span><br><span class=\"line\">            dhcp4: true</span><br><span class=\"line\"></span><br><span class=\"line\">            optional: true</span><br><span class=\"line\"></span><br><span class=\"line\">    version: 2</span><br><span class=\"line\"></span><br><span class=\"line\">    wifis:</span><br><span class=\"line\"></span><br><span class=\"line\">        wlan0:</span><br><span class=\"line\"></span><br><span class=\"line\">            access-points:</span><br><span class=\"line\"></span><br><span class=\"line\">                &quot;Danke42168_1&quot;:</span><br><span class=\"line\"></span><br><span class=\"line\">                    password: &quot;wifi.danke.life&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">            dhcp4: true</span><br><span class=\"line\"></span><br><span class=\"line\">            optional: true</span><br><span class=\"line\"></span><br><span class=\"line\">            addresses: [192.168.124.18/24]</span><br><span class=\"line\"></span><br><span class=\"line\">            gateway4: 192.168.124.1</span><br><span class=\"line\"></span><br><span class=\"line\">            nameservers:</span><br><span class=\"line\"></span><br><span class=\"line\">                addresses: [192.168.124.1, 8.8.8.8]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"树莓派ubuntu 20 安装k3s","date":"2021-02-11T04:25:05.000Z","author":"Ginta","img":"http://img.ginta.top/qinshi1.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/qinshi1.jpg","toc":false,"mathjax":false,"summary":null,"_content":"## 安装\n到 [helm的Github仓库](https://github.com/helm/helm/releases) 找到\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210701225823848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210701225836183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\n解压后把这个目录加入环境变量就可以了\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210701230115822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\n","source":"_posts/树莓派ubuntu 20 安装k3s.md","raw":"---\ntitle: 树莓派ubuntu 20 安装k3s\ndate: 2021-02-11 12:25:05\nauthor: Ginta\nimg: http://img.ginta.top/qinshi1.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/qinshi1.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \n  - 树莓派\ncategories: 其他\n---\n## 安装\n到 [helm的Github仓库](https://github.com/helm/helm/releases) 找到\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210701225823848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210701225836183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\n解压后把这个目录加入环境变量就可以了\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210701230115822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70)\n","slug":"树莓派ubuntu 20 安装k3s","published":1,"updated":"2022-08-11T12:49:48.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6181b0053tksc62zg1cqc","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>到 <a href=\"https://github.com/helm/helm/releases\">helm的Github仓库</a> 找到<br><img src=\"https://img-blog.csdnimg.cn/20210701225823848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20210701225836183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>解压后把这个目录加入环境变量就可以了<br><img src=\"https://img-blog.csdnimg.cn/20210701230115822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>到 <a href=\"https://github.com/helm/helm/releases\">helm的Github仓库</a> 找到<br><img src=\"https://img-blog.csdnimg.cn/20210701225823848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20210701225836183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>解压后把这个目录加入环境变量就可以了<br><img src=\"https://img-blog.csdnimg.cn/20210701230115822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDY4OTMz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"镜像发布","date":"2019-12-19T20:26:15.000Z","author":"Ginta","img":"http://img.ginta.top/dragin1.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/dragin1.jpg","toc":false,"mathjax":false,"summary":null,"_content":"### 发布\r\n1. docker login 登录 docker hub\r\n2. docker push caesar123/hello-world:1.00\r\n\r\n### 下载\r\n`docker pull caesar123/hello-world:1.00`","source":"_posts/镜像发布.md","raw":"---\ntitle: 镜像发布\ndate: 2019-12-20 04:26:15\nauthor: Ginta\nimg: http://img.ginta.top/dragin1.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/dragin1.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: docker\n---\n### 发布\r\n1. docker login 登录 docker hub\r\n2. docker push caesar123/hello-world:1.00\r\n\r\n### 下载\r\n`docker pull caesar123/hello-world:1.00`","slug":"镜像发布","published":1,"updated":"2022-08-11T12:49:48.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6181b0056tksc4q1p5a5o","content":"<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><ol>\n<li>docker login 登录 docker hub</li>\n<li>docker push caesar123&#x2F;hello-world:1.00</li>\n</ol>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p><code>docker pull caesar123/hello-world:1.00</code></p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><ol>\n<li>docker login 登录 docker hub</li>\n<li>docker push caesar123&#x2F;hello-world:1.00</li>\n</ol>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p><code>docker pull caesar123/hello-world:1.00</code></p>\n"},{"title":"树莓派固定ip设置","date":"2020-05-30T07:04:43.000Z","author":"Ginta","img":"http://img.ginta.top/dragin1.jpg","top":false,"hide":false,"cover":false,"coverImg":"http://img.ginta.top/dragin1.jpg","toc":false,"mathjax":false,"summary":null,"_content":"### 前言\r\n由于没有多余的屏幕以及鼠标和键盘等外设（就是有也没空间放），所以树莓派只能通过 **xshell** 连接，先前我是可以连接上的，但是由于 *ip* 发生了变化所以又要重新连上屏幕查看 *ip*，但是以后难免还会发生这样的事情。一劳永逸的方法是设置一个固定 *ip* 这样下次登录就不会发生之前的问题了。\r\n### 步骤\r\n操作也很简单\r\n树莓派中有个文件可以实现固定 *ip* 的设置，执行  `vim /etc/dhcpcd.conf`，修改配置文件\r\n```\r\n# 在最后加入下面几行\r\n# 指定接口 wlan0\r\ninterface wlan0\r\n# 指定静态IP，/24表示子网掩码为 255.255.255.0\r\nstatic ip_address=192.168.124.18/24\r\n# 路由器/网关IP地址\r\nstatic routers=192.168.124.1\r\n# 手动自定义DNS服务器\r\nstatic domain_name_servers=114.114.114.114\r\n```\r\n然后执行 `sudo reboot` 即可，之后便可以通过 *xshell* 等工具进行连接\r\n这里有两点需要注意\r\n1. 我的路由器 *ip* 是 *192.168.124.1* ，但是常见的一般是 *192.168.1.1* 和 *192.168.0.1*\r\n2. static ip_address=192.168.124.18/24，这一项要保证 **18端口没有被占用**，简单的方法就是 *ping 192.168.124.18* 如果没有响应就可以了\r\n\r\n## 其他\r\n至于树莓派怎么连接 *wifi* 参考 [无屏幕和键盘配置树莓派WiFi和SSH](https://shumeipai.nxez.com/2017/09/13/raspberry-pi-network-configuration-before-boot.html)。","source":"_posts/树莓派固定ip设置.md","raw":"---\ntitle: 树莓派固定ip设置\ndate: 2020-05-30 15:04:43\nauthor: Ginta\nimg: http://img.ginta.top/dragin1.jpg\ntop: false\nhide: false\ncover: false\ncoverImg: http://img.ginta.top/dragin1.jpg\ntoc: false\nmathjax: false\nsummary:\ntags: \ncategories: 树莓派\n---\n### 前言\r\n由于没有多余的屏幕以及鼠标和键盘等外设（就是有也没空间放），所以树莓派只能通过 **xshell** 连接，先前我是可以连接上的，但是由于 *ip* 发生了变化所以又要重新连上屏幕查看 *ip*，但是以后难免还会发生这样的事情。一劳永逸的方法是设置一个固定 *ip* 这样下次登录就不会发生之前的问题了。\r\n### 步骤\r\n操作也很简单\r\n树莓派中有个文件可以实现固定 *ip* 的设置，执行  `vim /etc/dhcpcd.conf`，修改配置文件\r\n```\r\n# 在最后加入下面几行\r\n# 指定接口 wlan0\r\ninterface wlan0\r\n# 指定静态IP，/24表示子网掩码为 255.255.255.0\r\nstatic ip_address=192.168.124.18/24\r\n# 路由器/网关IP地址\r\nstatic routers=192.168.124.1\r\n# 手动自定义DNS服务器\r\nstatic domain_name_servers=114.114.114.114\r\n```\r\n然后执行 `sudo reboot` 即可，之后便可以通过 *xshell* 等工具进行连接\r\n这里有两点需要注意\r\n1. 我的路由器 *ip* 是 *192.168.124.1* ，但是常见的一般是 *192.168.1.1* 和 *192.168.0.1*\r\n2. static ip_address=192.168.124.18/24，这一项要保证 **18端口没有被占用**，简单的方法就是 *ping 192.168.124.18* 如果没有响应就可以了\r\n\r\n## 其他\r\n至于树莓派怎么连接 *wifi* 参考 [无屏幕和键盘配置树莓派WiFi和SSH](https://shumeipai.nxez.com/2017/09/13/raspberry-pi-network-configuration-before-boot.html)。","slug":"树莓派固定ip设置","published":1,"updated":"2022-08-11T12:49:48.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6p6181c005btkscep0f4pez","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>由于没有多余的屏幕以及鼠标和键盘等外设（就是有也没空间放），所以树莓派只能通过 <strong>xshell</strong> 连接，先前我是可以连接上的，但是由于 <em>ip</em> 发生了变化所以又要重新连上屏幕查看 <em>ip</em>，但是以后难免还会发生这样的事情。一劳永逸的方法是设置一个固定 <em>ip</em> 这样下次登录就不会发生之前的问题了。</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>操作也很简单<br>树莓派中有个文件可以实现固定 <em>ip</em> 的设置，执行  <code>vim /etc/dhcpcd.conf</code>，修改配置文件</p>\n<pre><code># 在最后加入下面几行\n# 指定接口 wlan0\ninterface wlan0\n# 指定静态IP，/24表示子网掩码为 255.255.255.0\nstatic ip_address=192.168.124.18/24\n# 路由器/网关IP地址\nstatic routers=192.168.124.1\n# 手动自定义DNS服务器\nstatic domain_name_servers=114.114.114.114\n</code></pre>\n<p>然后执行 <code>sudo reboot</code> 即可，之后便可以通过 <em>xshell</em> 等工具进行连接<br>这里有两点需要注意</p>\n<ol>\n<li>我的路由器 <em>ip</em> 是 <em>192.168.124.1</em> ，但是常见的一般是 <em>192.168.1.1</em> 和 <em>192.168.0.1</em></li>\n<li>static ip_address&#x3D;192.168.124.18&#x2F;24，这一项要保证 <strong>18端口没有被占用</strong>，简单的方法就是 <em>ping 192.168.124.18</em> 如果没有响应就可以了</li>\n</ol>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>至于树莓派怎么连接 <em>wifi</em> 参考 <a href=\"https://shumeipai.nxez.com/2017/09/13/raspberry-pi-network-configuration-before-boot.html\">无屏幕和键盘配置树莓派WiFi和SSH</a>。</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>由于没有多余的屏幕以及鼠标和键盘等外设（就是有也没空间放），所以树莓派只能通过 <strong>xshell</strong> 连接，先前我是可以连接上的，但是由于 <em>ip</em> 发生了变化所以又要重新连上屏幕查看 <em>ip</em>，但是以后难免还会发生这样的事情。一劳永逸的方法是设置一个固定 <em>ip</em> 这样下次登录就不会发生之前的问题了。</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>操作也很简单<br>树莓派中有个文件可以实现固定 <em>ip</em> 的设置，执行  <code>vim /etc/dhcpcd.conf</code>，修改配置文件</p>\n<pre><code># 在最后加入下面几行\n# 指定接口 wlan0\ninterface wlan0\n# 指定静态IP，/24表示子网掩码为 255.255.255.0\nstatic ip_address=192.168.124.18/24\n# 路由器/网关IP地址\nstatic routers=192.168.124.1\n# 手动自定义DNS服务器\nstatic domain_name_servers=114.114.114.114\n</code></pre>\n<p>然后执行 <code>sudo reboot</code> 即可，之后便可以通过 <em>xshell</em> 等工具进行连接<br>这里有两点需要注意</p>\n<ol>\n<li>我的路由器 <em>ip</em> 是 <em>192.168.124.1</em> ，但是常见的一般是 <em>192.168.1.1</em> 和 <em>192.168.0.1</em></li>\n<li>static ip_address&#x3D;192.168.124.18&#x2F;24，这一项要保证 <strong>18端口没有被占用</strong>，简单的方法就是 <em>ping 192.168.124.18</em> 如果没有响应就可以了</li>\n</ol>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>至于树莓派怎么连接 <em>wifi</em> 参考 <a href=\"https://shumeipai.nxez.com/2017/09/13/raspberry-pi-network-configuration-before-boot.html\">无屏幕和键盘配置树莓派WiFi和SSH</a>。</p>\n"},{"title":"时生","date":"2022-08-23T13:32:31.000Z","_content":"《时生》看完了，区别于之前看过的东野圭吾的小说，没有涉及到凶杀，这本小说讲的是时生从未来回到过去找寻自己的父亲（拓实）。内容没有留下很深的印象，大概就是时生让父亲直面自己弃婴这一身世，原谅奶奶当初把他送人这一无奈举动，小说最后时生告别父亲后就消失了。\n\n读完后还是想了很多，比如自己像时生一样在生命快要终结的时候意外回到了十几年前，有机会重写这一段过去，又会做什么不一样的选择？时间究竟是什么，时生竭力去改变父亲，做了很多事，结局和历史依旧是重合的。是不是意味时间就是那么神奇，即使有机会回到过去，以为改变了很多，实际上什么都没有改变，过去即是未来，未来即是过去。\n\n如果历史真的可以改变，改变后的历史还是历史吗？会不会像龙珠所讲的每次穿越时间，只是凭空多出一个平行的时间线？\n","source":"_posts/时生.md","raw":"---\ntitle: 时生\ndate: 2022-08-23 21:32:31\ntags: \n  - 小说\n  - 东野圭吾\ncategories: 阅读\n---\n《时生》看完了，区别于之前看过的东野圭吾的小说，没有涉及到凶杀，这本小说讲的是时生从未来回到过去找寻自己的父亲（拓实）。内容没有留下很深的印象，大概就是时生让父亲直面自己弃婴这一身世，原谅奶奶当初把他送人这一无奈举动，小说最后时生告别父亲后就消失了。\n\n读完后还是想了很多，比如自己像时生一样在生命快要终结的时候意外回到了十几年前，有机会重写这一段过去，又会做什么不一样的选择？时间究竟是什么，时生竭力去改变父亲，做了很多事，结局和历史依旧是重合的。是不是意味时间就是那么神奇，即使有机会回到过去，以为改变了很多，实际上什么都没有改变，过去即是未来，未来即是过去。\n\n如果历史真的可以改变，改变后的历史还是历史吗？会不会像龙珠所讲的每次穿越时间，只是凭空多出一个平行的时间线？\n","slug":"时生","published":1,"updated":"2022-09-05T13:35:19.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7otbdkn0001qkf07tew68hj","content":"<p>《时生》看完了，区别于之前看过的东野圭吾的小说，没有涉及到凶杀，这本小说讲的是时生从未来回到过去找寻自己的父亲（拓实）。内容没有留下很深的印象，大概就是时生让父亲直面自己弃婴这一身世，原谅奶奶当初把他送人这一无奈举动，小说最后时生告别父亲后就消失了。</p>\n<p>读完后还是想了很多，比如自己像时生一样在生命快要终结的时候意外回到了十几年前，有机会重写这一段过去，又会做什么不一样的选择？时间究竟是什么，时生竭力去改变父亲，做了很多事，结局和历史依旧是重合的。是不是意味时间就是那么神奇，即使有机会回到过去，以为改变了很多，实际上什么都没有改变，过去即是未来，未来即是过去。</p>\n<p>如果历史真的可以改变，改变后的历史还是历史吗？会不会像龙珠所讲的每次穿越时间，只是凭空多出一个平行的时间线？</p>\n","site":{"data":{"friends":[{"avatar":"https://avatars.githubusercontent.com/u/26385612?v=4","name":"Angus","introduction":"一个快乐的调包侠","url":"https://anguswg.github.io/AngusWG/","title":"Angus"}]}},"excerpt":"","more":"<p>《时生》看完了，区别于之前看过的东野圭吾的小说，没有涉及到凶杀，这本小说讲的是时生从未来回到过去找寻自己的父亲（拓实）。内容没有留下很深的印象，大概就是时生让父亲直面自己弃婴这一身世，原谅奶奶当初把他送人这一无奈举动，小说最后时生告别父亲后就消失了。</p>\n<p>读完后还是想了很多，比如自己像时生一样在生命快要终结的时候意外回到了十几年前，有机会重写这一段过去，又会做什么不一样的选择？时间究竟是什么，时生竭力去改变父亲，做了很多事，结局和历史依旧是重合的。是不是意味时间就是那么神奇，即使有机会回到过去，以为改变了很多，实际上什么都没有改变，过去即是未来，未来即是过去。</p>\n<p>如果历史真的可以改变，改变后的历史还是历史吗？会不会像龙珠所讲的每次穿越时间，只是凭空多出一个平行的时间线？</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl6p6180m0001tkscbucr6r3j","category_id":"cl6p6180p0004tksc9juhb5ao","_id":"cl6p6180t000jtksca18lgbuw"},{"post_id":"cl6p6180r000atkscauc4ap1v","category_id":"cl6p6180p0004tksc9juhb5ao","_id":"cl6p6180u000ltkscb9ps8o6y"},{"post_id":"cl6p6180o0003tkscfdxj5qnk","category_id":"cl6p6180p0004tksc9juhb5ao","_id":"cl6p6180u000ptksc18wy0tev"},{"post_id":"cl6p6180s000dtksc3x9i8kql","category_id":"cl6p6180u000mtkscfysr3n16","_id":"cl6p6180w000ytksc8be81m68"},{"post_id":"cl6p6180s000etksc4cu99s4j","category_id":"cl6p6180v000ttkscfv5c9nak","_id":"cl6p6180x0015tksc2j3v7ylc"},{"post_id":"cl6p6180t000itkscfaqa3ofj","category_id":"cl6p6180v000ttkscfv5c9nak","_id":"cl6p6180x001atksc6rwuglzn"},{"post_id":"cl6p6180x0016tkschzh38y0n","category_id":"cl6p6180w0014tksc5s8328ix","_id":"cl6p6180y001etkscawmp36td"},{"post_id":"cl6p6180t000ktkscel9y3p0k","category_id":"cl6p6180w0014tksc5s8328ix","_id":"cl6p6180y001itkschrfndsj1"},{"post_id":"cl6p6180x0018tksc8igm7hi3","category_id":"cl6p6180w0014tksc5s8328ix","_id":"cl6p6180y001ltksc3j5d85nx"},{"post_id":"cl6p6180u000ntksccmh29ip0","category_id":"cl6p6180v000ttkscfv5c9nak","_id":"cl6p6180z001otkscbiomgprl"},{"post_id":"cl6p6180v000rtksc3hur601m","category_id":"cl6p6180v000ttkscfv5c9nak","_id":"cl6p6180z001qtkscdijrdkym"},{"post_id":"cl6p6180z001ptksc0hueegtj","category_id":"cl6p6180u000mtkscfysr3n16","_id":"cl6p61810001wtkschgephisp"},{"post_id":"cl6p6180v000utkscdl4j158s","category_id":"cl6p6180y001mtkscc7v2f2p6","_id":"cl6p61810001ztksc07i0cg0c"},{"post_id":"cl6p6180z001rtkscdxnyefts","category_id":"cl6p6180w0014tksc5s8328ix","_id":"cl6p618100023tksc90w4dhf7"},{"post_id":"cl6p6180z001utksc77jt40sh","category_id":"cl6p6180w0014tksc5s8328ix","_id":"cl6p618110027tkscfyd9gsbp"},{"post_id":"cl6p6180v000wtksc0qtectb5","category_id":"cl6p6180y001mtkscc7v2f2p6","_id":"cl6p61811002btksc58ln8f7j"},{"post_id":"cl6p61810001ytksc12kocx03","category_id":"cl6p6180u000mtkscfysr3n16","_id":"cl6p61811002ftkscctfz6yr7"},{"post_id":"cl6p6180w0010tksc3uh94tom","category_id":"cl6p6180w0014tksc5s8328ix","_id":"cl6p61812002jtksch0m426qg"},{"post_id":"cl6p618100022tkscd1h33v6h","category_id":"cl6p6180v000ttkscfv5c9nak","_id":"cl6p61812002ntksc5x1u3p36"},{"post_id":"cl6p618100026tksc3rcw7g5w","category_id":"cl6p6180u000mtkscfysr3n16","_id":"cl6p61812002rtksc4tirfcdp"},{"post_id":"cl6p6180w0012tksc2wyj0wgx","category_id":"cl6p6180w0014tksc5s8328ix","_id":"cl6p61813002utksc3q9s8let"},{"post_id":"cl6p61811002atkscgcst4ed9","category_id":"cl6p6180v000ttkscfv5c9nak","_id":"cl6p61813002wtksc9thuh6ag"},{"post_id":"cl6p61811002etksc8diu8n26","category_id":"cl6p6180v000ttkscfv5c9nak","_id":"cl6p618130031tkscbjm38m39"},{"post_id":"cl6p6180x001ctksc9h7iaago","category_id":"cl6p61811002ctksc6993a7lb","_id":"cl6p618130034tksc1ob2b217"},{"post_id":"cl6p61811002itksc0y3cg2f5","category_id":"cl6p6180y001mtkscc7v2f2p6","_id":"cl6p618140039tksc2nf5gia1"},{"post_id":"cl6p61812002mtkscdsh8fo04","category_id":"cl6p6180p0004tksc9juhb5ao","_id":"cl6p61814003ctksc3g8b6f8u"},{"post_id":"cl6p6180y001dtksc88nx17uk","category_id":"cl6p61811002ctksc6993a7lb","_id":"cl6p61814003htksc36x1gqgw"},{"post_id":"cl6p61812002qtkscejgt6h1x","category_id":"cl6p6180v000ttkscfv5c9nak","_id":"cl6p61815003ktkscd0os3uw9"},{"post_id":"cl6p6180y001htksc37df8i23","category_id":"cl6p61812002stksca015086b","_id":"cl6p61815003ptkscecag0zgd"},{"post_id":"cl6p618130030tksc97fe0dgm","category_id":"cl6p6180u000mtkscfysr3n16","_id":"cl6p61815003stkschbine448"},{"post_id":"cl6p6180y001ktksc6xumg0zt","category_id":"cl6p61813002ytksc4ir01nc0","_id":"cl6p61816003vtksc9s9a34gv"},{"post_id":"cl6p618140038tksc45o51gdj","category_id":"cl6p6180u000mtkscfysr3n16","_id":"cl6p618180040tkscgcgcap5h"},{"post_id":"cl6p6180z001ntksc7oflblz4","category_id":"cl6p61813002ytksc4ir01nc0","_id":"cl6p618180043tksceq1b1pyt"},{"post_id":"cl6p61814003btkscd5c592jp","category_id":"cl6p6180v000ttkscfv5c9nak","_id":"cl6p618190047tkscffw35eof"},{"post_id":"cl6p61814003gtksc3z1v2rwu","category_id":"cl6p6180u000mtkscfysr3n16","_id":"cl6p61819004btksc32cp6zcc"},{"post_id":"cl6p6180z001vtksc2tq1cybv","category_id":"cl6p61812002stksca015086b","_id":"cl6p6181a004ftkscd0b5g5p5"},{"post_id":"cl6p61814003jtkscb44l5aba","category_id":"cl6p6180v000ttkscfv5c9nak","_id":"cl6p6181a004itksc74ws28hy"},{"post_id":"cl6p61815003otksc84f341z1","category_id":"cl6p61812002stksca015086b","_id":"cl6p6181a004mtksc096h6yxs"},{"post_id":"cl6p61815003rtksc9pp998th","category_id":"cl6p61812002stksca015086b","_id":"cl6p6181a004ptkscef8fcuj5"},{"post_id":"cl6p61813002vtksc7van54go","category_id":"cl6p61815003ntkscf9t0ej40","_id":"cl6p6181b004stkscdm6lhp5b"},{"post_id":"cl6p61815003utkschguwc3dc","category_id":"cl6p61812002stksca015086b","_id":"cl6p6181b004wtksc808k7oep"},{"post_id":"cl6p61818003ztksc5uyd3u86","category_id":"cl6p61812002stksca015086b","_id":"cl6p6181b0050tksc1pi17bzo"},{"post_id":"cl6p618130033tksc2cnwgby6","category_id":"cl6p61816003xtksca1o360g7","_id":"cl6p6181b0054tksc0o094238"},{"post_id":"cl6p618190046tksc8fvh2u68","category_id":"cl6p6180p0004tksc9juhb5ao","_id":"cl6p6181c0058tksc9mb18tdt"},{"post_id":"cl6p61819004atkschc122p2e","category_id":"cl6p6180p0004tksc9juhb5ao","_id":"cl6p6181c005ctksc705cfd7t"},{"post_id":"cl6p618180042tksc9ari0xde","category_id":"cl6p618190048tkscfb8q9mai","_id":"cl6p6181c005ftkscfy0bclsa"},{"post_id":"cl6p6181a004htksc5d9470jn","category_id":"cl6p6180p0004tksc9juhb5ao","_id":"cl6p6181c005itkscf7q6hhgr"},{"post_id":"cl6p6181a004ltksc9ze72hgi","category_id":"cl6p6180u000mtkscfysr3n16","_id":"cl6p6181c005ktksc8wbm0np3"},{"post_id":"cl6p6181a004otkscaoap81am","category_id":"cl6p6180p0004tksc9juhb5ao","_id":"cl6p6181c005ntkscguwp0jpx"},{"post_id":"cl6p61819004etksc0teu65qk","category_id":"cl6p6181a004jtksc426mgsf2","_id":"cl6p6181c005ptksca226b5c8"},{"post_id":"cl6p6181b0053tksc62zg1cqc","category_id":"cl6p61812002stksca015086b","_id":"cl6p6181c005qtksc7jnm74h0"},{"post_id":"cl6p6181a004rtkscdvsq80vg","category_id":"cl6p6181b004ytksc99btd20d","_id":"cl6p6181d005ttkscet29gym4"},{"post_id":"cl6p6181b0056tksc4q1p5a5o","category_id":"cl6p6180y001mtkscc7v2f2p6","_id":"cl6p6181d005utksc7ui85fjo"},{"post_id":"cl6p6181c005btkscep0f4pez","category_id":"cl6p6181b004ytksc99btd20d","_id":"cl6p6181d005wtksc3ue59pnp"},{"post_id":"cl6p6181b004vtksc5tv30alg","category_id":"cl6p6181b004ytksc99btd20d","_id":"cl6p6181d005xtksc8m6bc8wk"},{"post_id":"cl6p6181b004ztkscfjr0dgic","category_id":"cl6p6181b004ytksc99btd20d","_id":"cl6p6181d005ytksccvzw1wfq"},{"post_id":"cl7otbdkn0001qkf07tew68hj","category_id":"cl6p618190048tkscfb8q9mai","_id":"cl7otbdkz0004qkf0cq365qes"}],"PostTag":[{"post_id":"cl6p6180s000dtksc3x9i8kql","tag_id":"cl6p6180t000htksccqvu6yjv","_id":"cl6p6180v000qtksc9x0ocat5"},{"post_id":"cl6p6180s000etksc4cu99s4j","tag_id":"cl6p6180u000otkscc83me597","_id":"cl6p6180w000xtksc7upi0fep"},{"post_id":"cl6p6180t000itkscfaqa3ofj","tag_id":"cl6p6180u000otkscc83me597","_id":"cl6p6180w0013tksc5noo0y6r"},{"post_id":"cl6p6180t000ktkscel9y3p0k","tag_id":"cl6p6180u000otkscc83me597","_id":"cl6p6180x0019tksc9aqg7b2m"},{"post_id":"cl6p6180u000ntksccmh29ip0","tag_id":"cl6p6180t000htksccqvu6yjv","_id":"cl6p6180y001ftksc71yzete5"},{"post_id":"cl6p6180u000ntksccmh29ip0","tag_id":"cl6p6180u000otkscc83me597","_id":"cl6p6180y001jtkscd5262o3w"},{"post_id":"cl6p6180z001ptksc0hueegtj","tag_id":"cl6p6180z001ttksccwbwfutf","_id":"cl6p618100021tkscaw0vany5"},{"post_id":"cl6p61810001ytksc12kocx03","tag_id":"cl6p6180t000htksccqvu6yjv","_id":"cl6p618100025tksc3dijhmsm"},{"post_id":"cl6p618100022tkscd1h33v6h","tag_id":"cl6p6180u000otkscc83me597","_id":"cl6p618110029tksc5xwo1uav"},{"post_id":"cl6p6180z001utksc77jt40sh","tag_id":"cl6p618100020tksc274wdjb9","_id":"cl6p61811002dtkscg6zv9n4t"},{"post_id":"cl6p618100026tksc3rcw7g5w","tag_id":"cl6p6180t000htksccqvu6yjv","_id":"cl6p61811002htksc18dk6qki"},{"post_id":"cl6p618100026tksc3rcw7g5w","tag_id":"cl6p6180u000otkscc83me597","_id":"cl6p61812002ltksc44rx54a1"},{"post_id":"cl6p61811002itksc0y3cg2f5","tag_id":"cl6p618110028tksccdrcaeal","_id":"cl6p61812002ptksc0pkaedti"},{"post_id":"cl6p6180z001vtksc2tq1cybv","tag_id":"cl6p618110028tksccdrcaeal","_id":"cl6p61813002ztksc07sn2fot"},{"post_id":"cl6p6180z001vtksc2tq1cybv","tag_id":"cl6p61811002gtksc5rhkb4qb","_id":"cl6p618130032tksccbj16e25"},{"post_id":"cl6p6180z001vtksc2tq1cybv","tag_id":"cl6p61812002otkscg0bt258j","_id":"cl6p618140036tkscd54k6ap1"},{"post_id":"cl6p618130030tksc97fe0dgm","tag_id":"cl6p6180t000htksccqvu6yjv","_id":"cl6p61814003atksc3liz286v"},{"post_id":"cl6p61811002atkscgcst4ed9","tag_id":"cl6p6180u000otkscc83me597","_id":"cl6p61814003etksc92k85noz"},{"post_id":"cl6p61811002atkscgcst4ed9","tag_id":"cl6p61813002xtkscannzfwsf","_id":"cl6p61814003itksc111bfgnr"},{"post_id":"cl6p618140038tksc45o51gdj","tag_id":"cl6p6180t000htksccqvu6yjv","_id":"cl6p61815003mtkscae71c891"},{"post_id":"cl6p61811002etksc8diu8n26","tag_id":"cl6p618130035tkscdtxqbcfg","_id":"cl6p61815003qtksc9lpwg53b"},{"post_id":"cl6p61814003gtksc3z1v2rwu","tag_id":"cl6p6180t000htksccqvu6yjv","_id":"cl6p61815003ttksc7blz5agm"},{"post_id":"cl6p61812002mtkscdsh8fo04","tag_id":"cl6p61814003dtksc3a1gd8s0","_id":"cl6p61818003ytkscbjre8ujd"},{"post_id":"cl6p61815003rtksc9pp998th","tag_id":"cl6p618110028tksccdrcaeal","_id":"cl6p618180041tkscha62ecrd"},{"post_id":"cl6p61815003rtksc9pp998th","tag_id":"cl6p61811002gtksc5rhkb4qb","_id":"cl6p618190045tkscew6z82ee"},{"post_id":"cl6p61815003rtksc9pp998th","tag_id":"cl6p61812002otkscg0bt258j","_id":"cl6p618190049tksc0zso2ybj"},{"post_id":"cl6p61813002vtksc7van54go","tag_id":"cl6p61815003ltkscg3avbpf2","_id":"cl6p61819004dtksc28pj7geo"},{"post_id":"cl6p61813002vtksc7van54go","tag_id":"cl6p61816003wtksc8o8y7oe5","_id":"cl6p6181a004gtksc1md2dosf"},{"post_id":"cl6p618130033tksc2cnwgby6","tag_id":"cl6p618190044tksc4xts9pkl","_id":"cl6p6181a004ntksccl1936im"},{"post_id":"cl6p618130033tksc2cnwgby6","tag_id":"cl6p61819004ctksc23ht3pq3","_id":"cl6p6181a004qtksc3zjl71re"},{"post_id":"cl6p6181a004htksc5d9470jn","tag_id":"cl6p61814003dtksc3a1gd8s0","_id":"cl6p6181b004utksccwfg0qef"},{"post_id":"cl6p6181a004ltksc9ze72hgi","tag_id":"cl6p6180t000htksccqvu6yjv","_id":"cl6p6181b004xtksc6ype18f9"},{"post_id":"cl6p61814003btkscd5c592jp","tag_id":"cl6p6180t000htksccqvu6yjv","_id":"cl6p6181b0052tkscd85k95dc"},{"post_id":"cl6p61814003btkscd5c592jp","tag_id":"cl6p6180u000otkscc83me597","_id":"cl6p6181b0055tksce1cdejsg"},{"post_id":"cl6p61814003btkscd5c592jp","tag_id":"cl6p6181a004ktkschtwo7l6s","_id":"cl6p6181c005atksc0i028d1h"},{"post_id":"cl6p61814003jtkscb44l5aba","tag_id":"cl6p6180u000otkscc83me597","_id":"cl6p6181c005dtksc2h752l9j"},{"post_id":"cl6p61814003jtkscb44l5aba","tag_id":"cl6p6181a004ktkschtwo7l6s","_id":"cl6p6181c005htksc4tt5d4rq"},{"post_id":"cl6p61814003jtkscb44l5aba","tag_id":"cl6p6181b0051tksc99zqcew4","_id":"cl6p6181c005jtksc3ruoguii"},{"post_id":"cl6p61818003ztksc5uyd3u86","tag_id":"cl6p6181c0059tkscexgt471q","_id":"cl6p6181c005ltksc5deu5jwu"},{"post_id":"cl6p618180042tksc9ari0xde","tag_id":"cl6p6181c005gtkscfyqx1d9r","_id":"cl6p6181c005otkscac1t1nos"},{"post_id":"cl6p6181b004ztkscfjr0dgic","tag_id":"cl6p6181c005mtksc6lm7cwxu","_id":"cl6p6181d005stksc4tky34q7"},{"post_id":"cl6p6181b0053tksc62zg1cqc","tag_id":"cl6p6181c005mtksc6lm7cwxu","_id":"cl6p6181d005vtkscf6cy4z0p"},{"post_id":"cl7otbdkn0001qkf07tew68hj","tag_id":"cl7otbdkp0002qkf0apb716zz","_id":"cl7otbdl00006qkf09xk06n1o"},{"post_id":"cl7otbdkn0001qkf07tew68hj","tag_id":"cl7otbdkz0005qkf00sa20oi1","_id":"cl7otbdl00007qkf06cl3gwcy"}],"Tag":[{"name":"python","_id":"cl6p6180t000htksccqvu6yjv"},{"name":"Django","_id":"cl6p6180u000otkscc83me597"},{"name":"多线程","_id":"cl6p6180z001ttksccwbwfutf"},{"name":"redis","_id":"cl6p618100020tksc274wdjb9"},{"name":"docker","_id":"cl6p618110028tksccdrcaeal"},{"name":"windows","_id":"cl6p61811002gtksc5rhkb4qb"},{"name":"k8s","_id":"cl6p61812002otkscg0bt258j"},{"name":"邮件","_id":"cl6p61813002xtkscannzfwsf"},{"name":"django3","_id":"cl6p618130035tkscdtxqbcfg"},{"name":"生活","_id":"cl6p61814003dtksc3a1gd8s0"},{"name":"Typora","_id":"cl6p61815003ltkscg3avbpf2"},{"name":"Markdown","_id":"cl6p61816003wtksc8o8y7oe5"},{"name":"FastAPI","_id":"cl6p618190044tksc4xts9pkl"},{"name":"Vue","_id":"cl6p61819004ctksc23ht3pq3"},{"name":"自动化","_id":"cl6p6181a004ktkschtwo7l6s"},{"name":"uwsgi","_id":"cl6p6181b0051tksc99zqcew4"},{"name":"WSL2","_id":"cl6p6181c0059tkscexgt471q"},{"name":"历史相关","_id":"cl6p6181c005gtkscfyqx1d9r"},{"name":"树莓派","_id":"cl6p6181c005mtksc6lm7cwxu"},{"name":"小说","_id":"cl7otbdkp0002qkf0apb716zz"},{"name":"东野圭吾","_id":"cl7otbdkz0005qkf00sa20oi1"}]}}